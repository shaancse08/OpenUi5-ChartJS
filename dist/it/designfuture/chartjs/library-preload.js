jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "it.designfuture.chartjs.library-preload",
	"modules": {
		"it/designfuture/chartjs/BarChartJS.js": "// Provides control it.designfuture.chartjs.BarChartJS\nsap.ui.define([\n\t\"./BaseChartJS\",\n], function (BaseChartJS) {\n\t\"use strict\";\n\n\t/**\n\t * BaseChart class\n\t * A bar chart provides a way of showing data values represented as vertical bars. \n\t * It is sometimes used to show trend data, and the comparison of multiple data sets side by side.\n\t *\n\t * @param {string} [sId] id for the new control, generated automatically if no id is given \n\t * @param {object} [mSettings] initial settings for the new control\n\t *\n\t * @class\n\t * BaseChart constructor\n\t * @extends it.designfuture.chartjs.BaseChartJS\n\t * @alias it.designfuture.chartjs.BarChartJS\n\t * @version ${version}\n\t *\n\t * @constructor\n\t * @public\n\t * @since 1.40\n\t * @name it.designfuture.chartjs.BarChartJS\n\t */\n\tvar BarChartJS = BaseChartJS.extend(\"it.designfuture.chartjs.BarChartJS\", /** @lends sap.m.BarChartJS.prototype */ {\n\n\t\tmetadata: {\n\t\t\tlibrary: 'it.designfuture.chartjs',\n\t\t\tproperties: {\n\t\t\t\t/**\n\t\t\t\t * If the Bar Chart is horizontal\n\t\t\t\t */\n\t\t\t\tisHorizontal: { type: \"boolean\", group: \"Appearance\", defaultValue: true },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// HOVER\n\t\t\t\t// The hover configuration is passed into the options.hover namespace. \n\t\t\t\t// The global hover configuration is at Chart.defaults.global.hover.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Sets which elements appear in the tooltip.\n\t\t\t\t */\n\t\t\t\thoverMode: { type: \"string\", group: \"Appearance\", defaultValue: \"label\" },\n\n\t\t\t},\n\t\t\taggregations: {},\n\t\t\tevents: {}\n\t\t},\n\n\t\tonBeforeRendering: function () {\n\t\t\tthis.setChartType(this.getIsHorizontal() ? \"horizontalBar\" : \"bar\");\n\t\t\tBaseChartJS.prototype.setHoverMode.call(this, this.getHoverMode());\n\t\t},\n\n\t\t/////////////////////////////////////\n\t\t// OVERRIDE\n\t\t/////////////////////////////////////\n\n\t\taddGlobalOptions: function (globalOptions) {\n\t\t},\n\n\t\t//////////////////////////////////////////////\n\t\t// GETTER / SETTER\n\t\t//////////////////////////////////////////////\n\n\n\n\t\t//////////////////////////////////////////////\n\t\t// CHART METHODS\n\t\t//////////////////////////////////////////////\n\n\t});\n\n\n\treturn BarChartJS;\n\n}, /* bExport= */ true);",
		"it/designfuture/chartjs/BarChartJSRenderer.js": "sap.ui.define(['jquery.sap.global', 'sap/ui/core/Renderer', './BaseChartJSRenderer'],\n\tfunction(jQuery, Renderer, BaseChartJSRenderer) {\n\t\"use strict\";\n\n\n\t/**\n\t* BarChartJS renderer.\n\t* @static\n\t* @namespace\n\t*/\n\tvar BarChartJSRenderer = Renderer.extend(BaseChartJSRenderer);\n\t\n\t/**\n\t * Adds control specific class\n\t *\n\t * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer\n\t * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered\n\t */\n\tBarChartJSRenderer.addOuterClasses = function(oRm, oControl) {\n\t\toRm.addClass(\"opeui5-bar-chartjs\");\n\t\tif( oControl.getIsHorizontal() ) {\n\t\t\toRm.addClass(\"opeui5-bar-horizontal-chartjs\");\n\t\t}\n\t};\n\n\n\treturn BarChartJSRenderer;\n\n}, /* bExport= */ true);",
		"it/designfuture/chartjs/BaseChartJS.js": "// Provides control it.designfuture.chartjs.BaseChartJS\nsap.ui.define([\n\t\"sap/ui/core/Control\",\n\t'./3rdparty/Chart',\n\t'./library'\n], function (Control, ChartJS, library) {\n\t\"use strict\";\n\n\t/**\n\t * BaseChart class, it contains all the common properties, methods and events of a Chart\n\t *\n\t * @param {string} [sId] id for the new control, generated automatically if no id is given \n\t * @param {object} [mSettings] initial settings for the new control\n\t *\n\t * @class\n\t * QRCode Control to render a QR Code\n\t * @extends sap.m.InputBase\n\t * @version ${version}\n\t *\n\t * @constructor\n\t * @public\n\t * @since 1.40\n\t * @name it.designfuture.chartjs.BaseChartJS\n\t */\n\tvar BaseChartJS = Control.extend(\"it.designfuture.chartjs.BaseChartJS\", /** @lends sap.m.BaseChartJS.prototype */ {\n\n\t\t__ctx: undefined,\n\t\t__chart: undefined,\n\n\t\tmetadata: {\n\t\t\tlibrary: 'it.designfuture.chartjs',\n\t\t\tproperties: {\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// CHART TYPE\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Chart type: line\n\t\t\t\t */\n\t\t\t\tchartType: { type: \"string\", group: \"Appearance\", defaultValue: null },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// CALLBACKS / FUNCTIONS\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Generates legend items for each thing in the legend. Default implementation returns the text + styling for the color box.\n\t\t\t\t */\n\t\t\t\tgenerateLabelsCallback: { type: \"object\", group: \"Appearance\", defaultValue: null },\n\n\t\t\t\t/**\n\t\t\t\t * Define a function to generate custom tooltip\n\t\t\t\t */\n\t\t\t\tcustomTooltipCallback: { type: \"object\", group: \"Appearance\", defaultValue: null },\n\n\t\t\t\t/**\n\t\t\t\t * Allows sorting of tooltip items. Must implement at minimum a function that can be passed to Array.prototype.sort. \n\t\t\t\t * This function can also accept a third parameter that is the data object passed to the chart.\n\t\t\t\t */\n\t\t\t\ttooltipSortFunction: { type: \"object\", group: \"Appearance\", defaultValue: undefined },\n\n\t\t\t\t/**\n\t\t\t\t * Allows filtering of tooltip items. Must implement at minimum a function that can be passed to Array.prototype.filter. \n\t\t\t\t * This function can also accept a second parameter that is the data object passed to the chart.\n\t\t\t\t */\n\t\t\t\ttooltipFilterFunction: { type: \"object\", group: \"Appearance\", defaultValue: undefined },\n\n\t\t\t\t/**\n\t\t\t\t * See http://www.chartjs.org/docs/#chart-configuration-tooltip-callbacks\n\t\t\t\t */\n\t\t\t\ttooltipCallbacks: { type: \"object\", group: \"Appearance\", defaultValue: {} },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// DATA\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Data to be displayed by the Chart. Data structure will change based on the current Chart type\n\t\t\t\t */\n\t\t\t\tdatasets: { type: \"object\", group: \"Appearance\", defaultValue: null },\n\n\t\t\t\t/**\n\t\t\t\t * Labels of the Chart\n\t\t\t\t */\n\t\t\t\tlabels: { type: \"object\", group: \"Appearance\", defaultValue: null },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// COMMON\n\t\t\t\t// The following options are applicable to all charts. \n\t\t\t\t// The can be set on the global configuration, or they can be passed to the chart constructor.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Resizes the chart canvas when its container does.\n\t\t\t\t */\n\t\t\t\tresponsive: { type: \"boolean\", group: \"Appearance\", defaultValue: true },\n\n\t\t\t\t/**\n\t\t\t\t * Duration in milliseconds it takes to animate to new size after a resize event.\n\t\t\t\t */\n\t\t\t\tresponsiveAnimationDuration: { type: \"int\", group: \"Appearance\", defaultValue: 0 },\n\n\t\t\t\t/**\n\t\t\t\t * Maintain the original canvas aspect ratio (width / height) when resizing.\n\t\t\t\t */\n\t\t\t\tmaintainAspectRatio: { type: \"boolean\", group: \"Appearance\", defaultValue: true },\n\n\t\t\t\t/**\n\t\t\t\t * Events that the chart should listen to for tooltips and hovering\n\t\t\t\t */\n\t\t\t\tevents: { type: \"string[]\", group: \"Appearance\", defaultValue: [\"mousemove\", \"mouseout\", \"click\", \"touchstart\", \"touchmove\", \"touchend\"] },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// LAYOUT\n\t\t\t\t// The layout configuration is passed into the options.layout namespace. \n\t\t\t\t// The global options for the chart layout is defined in Chart.defaults.global.layout.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * The padding to add inside the chart. If this value is a number, it is applied to all sides of the chart (left, top, right, bottom).\n\t\t\t\t * If this value is an object, the left property defines the left padding. Similarly the right, top, and bottom properties can also be specified.\n\t\t\t\t */\n\t\t\t\tlayoutPadding: { type: \"object\", group: \"Appearance\", defaultValue: 0 },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// TITLE\n\t\t\t\t// The title configuration is passed into the options.title namespace. \n\t\t\t\t// The global options for the chart title is defined in Chart.defaults.global.title.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Title text\n\t\t\t\t */\n\t\t\t\ttitleText: { type: \"string\", group: \"Appearance\", defaultValue: \"\" },\n\n\t\t\t\t/**\n\t\t\t\t * Display the title block\n\t\t\t\t */\n\t\t\t\ttitleDisplay: { type: \"boolean\", group: \"Appearance\", defaultValue: false },\n\n\t\t\t\t/**\n\t\t\t\t * Position of the title. Possible values are 'top', 'left', 'bottom' and 'right'.\n\t\t\t\t */\n\t\t\t\ttitlePosition: { type: \"string\", group: \"Appearance\", defaultValue: \"top\" },\n\n\t\t\t\t/**\n\t\t\t\t * Marks that this box should take the full width of the canvas (pushing down other boxes)\n\t\t\t\t */\n\t\t\t\ttitleFullWidth: { type: \"boolean\", group: \"Appearance\", defaultValue: true },\n\n\t\t\t\t/**\n\t\t\t\t * Font size inherited from global configuration\n\t\t\t\t */\n\t\t\t\ttitleFontSize: { type: \"int\", group: \"Appearance\", defaultValue: 12 },\n\n\t\t\t\t/**\n\t\t\t\t * Font family inherited from global configuration\n\t\t\t\t */\n\t\t\t\ttitleFontFamily: { type: \"string\", group: \"Appearance\", defaultValue: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\" },\n\n\t\t\t\t/**\n\t\t\t\t * Font color inherited from global configuration\n\t\t\t\t */\n\t\t\t\ttitleFontColor: { type: \"string\", group: \"Appearance\", defaultValue: \"#666\" },\n\n\t\t\t\t/**\n\t\t\t\t * Font styling of the title.\n\t\t\t\t */\n\t\t\t\ttitleFontStyle: { type: \"string\", group: \"Appearance\", defaultValue: \"bold\" },\n\n\t\t\t\t/**\n\t\t\t\t * Number of pixels to add above and below the title text\n\t\t\t\t */\n\t\t\t\ttitlePadding: { type: \"int\", group: \"Appearance\", defaultValue: 10 },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// LEGEND\n\t\t\t\t// The legend configuration is passed into the options.legend namespace. The global options for the chart legend \n\t\t\t\t// is defined in Chart.defaults.global.legend.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Width of coloured box\n\t\t\t\t */\n\t\t\t\tlegendDisplay: { type: \"boolean\", group: \"Appearance\", defaultValue: true },\n\n\t\t\t\t/**\n\t\t\t\t * Position of the legend. Possible values are 'top', 'left', 'bottom' and 'right'.\n\t\t\t\t */\n\t\t\t\tlegendPosition: { type: \"string\", group: \"Appearance\", defaultValue: \"top\" },\n\n\t\t\t\t/**\n\t\t\t\t * Marks that this box should take the full width of the canvas (pushing down other boxes)\n\t\t\t\t */\n\t\t\t\tlegendFullWidth: { type: \"boolean\", group: \"Appearance\", defaultValue: true },\n\n\t\t\t\t/**\n\t\t\t\t * Legend will show datasets in reverse order\n\t\t\t\t */\n\t\t\t\tlegendReverse: { type: \"boolean\", group: \"Appearance\", defaultValue: false },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// LEGEND LABEL\n\t\t\t\t// The legend label configuration is nested below the legend configuration using the labels key.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Width of coloured box\n\t\t\t\t */\n\t\t\t\tlegendLabelBoxWidth: { type: \"int\", group: \"Appearance\", defaultValue: 40 },\n\n\t\t\t\t/**\n\t\t\t\t * Font size inherited from global configuration\n\t\t\t\t */\n\t\t\t\tlegendLabelFontSize: { type: \"int\", group: \"Appearance\", defaultValue: 12 },\n\n\t\t\t\t/**\n\t\t\t\t * Font family inherited from global configuration\n\t\t\t\t */\n\t\t\t\tlegendLabelFontStyle: { type: \"string\", group: \"Appearance\", defaultValue: \"normal\" },\n\n\t\t\t\t/**\n\t\t\t\t * Font color inherited from global configuration\n\t\t\t\t */\n\t\t\t\tlegendLabelFontColor: { type: \"string\", group: \"Appearance\", defaultValue: \"#666\" },\n\n\t\t\t\t/**\n\t\t\t\t * Font family inherited from global configuration\n\t\t\t\t */\n\t\t\t\tlegendLabelFontFamily: { type: \"string\", group: \"Appearance\", defaultValue: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\" },\n\n\t\t\t\t/**\n\t\t\t\t * Padding between rows of colored boxes\n\t\t\t\t */\n\t\t\t\tlegendLabelPadding: { type: \"int\", group: \"Appearance\", defaultValue: 10 },\n\n\t\t\t\t/**\n\t\t\t\t * Label style will match corresponding point style (size is based on fontSize, boxWidth is not used in this case).\n\t\t\t\t */\n\t\t\t\tlegendLabelUsePointStyle: { type: \"boolean\", group: \"Appearance\", defaultValue: false },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// TOOLTOP\n\t\t\t\t// The tooltip configuration is passed into the options.tooltips namespace.\n\t\t\t\t// The global options for the chart tooltips is defined in Chart.defaults.global.tooltips.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Are tooltips enabled\n\t\t\t\t */\n\t\t\t\ttooltipEnabled: { type: \"boolean\", group: \"Appearance\", defaultValue: true },\n\n\t\t\t\t/**\n\t\t\t\t * Sets which elements appear in the tooltip\n\t\t\t\t */\n\t\t\t\ttooltipMode: { type: \"string\", group: \"Appearance\", defaultValue: \"nearest\" },\n\n\t\t\t\t/**\n\t\t\t\t * if true, the tooltip mode applies only when the mouse position intersects with an element. \n\t\t\t\t * If false, the mode will be applied at all times.\n\t\t\t\t */\n\t\t\t\ttooltipIntersect: { type: \"boolean\", group: \"Appearance\", defaultValue: true },\n\n\t\t\t\t/**\n\t\t\t\t * The mode for positioning the tooltip. 'average' mode will place the tooltip at the average position of the items displayed in the tooltip. \n\t\t\t\t * 'nearest' will place the tooltip at the position of the element closest to the event position. \n\t\t\t\t * New modes can be defined by adding functions to the Chart.Tooltip.positioners map.\n\t\t\t\t */\n\t\t\t\ttooltipPosition: { type: \"string\", group: \"Appearance\", defaultValue: \"average\" },\n\n\t\t\t\t/**\n\t\t\t\t * Background color of the tooltip\n\t\t\t\t */\n\t\t\t\ttooltipBackgroundColor: { type: \"string\", group: \"Appearance\", defaultValue: \"rgba(0,0,0,0.8)\" },\n\n\t\t\t\t/**\n\t\t\t\t * Font family for tooltip title inherited from global font family\n\t\t\t\t */\n\t\t\t\ttooltipTitleFontFamily: { type: \"string\", group: \"Appearance\", defaultValue: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\" },\n\n\t\t\t\t/**\n\t\t\t\t * Font size for tooltip title inherited from global font size\n\t\t\t\t */\n\t\t\t\ttooltipTitleFontSize: { type: \"int\", group: \"Appearance\", defaultValue: 12 },\n\n\t\t\t\t/**\n\t\t\t\t * Font size for tooltip title inherited from global font size\n\t\t\t\t */\n\t\t\t\ttooltipTitleFontStyle: { type: \"string\", group: \"Appearance\", defaultValue: \"bold\" },\n\n\t\t\t\t/**\n\t\t\t\t * Font color for tooltip title\n\t\t\t\t */\n\t\t\t\ttooltipTitleFontColor: { type: \"string\", group: \"Appearance\", defaultValue: \"#fff\" },\n\n\t\t\t\t/**\n\t\t\t\t * Spacing to add to top and bottom of each title line.\n\t\t\t\t */\n\t\t\t\ttooltipTitleSpacing: { type: \"int\", group: \"Appearance\", defaultValue: 2 },\n\n\t\t\t\t/**\n\t\t\t\t * Margin to add on bottom of title section\n\t\t\t\t */\n\t\t\t\ttooltipTitleMarginBottom: { type: \"int\", group: \"Appearance\", defaultValue: 2 },\n\n\t\t\t\t/**\n\t\t\t\t * Font family for tooltip items inherited from global font family\n\t\t\t\t */\n\t\t\t\ttooltipBodyFontFamily: { type: \"string\", group: \"Appearance\", defaultValue: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\" },\n\n\t\t\t\t/**\n\t\t\t\t * Font size for tooltip items inherited from global font size\n\t\t\t\t */\n\t\t\t\ttooltipBodyFontSize: { type: \"int\", group: \"Appearance\", defaultValue: 12 },\n\n\t\t\t\t/**\n\t\t\t\t * Font size for tooltip items inherited from global font size\n\t\t\t\t */\n\t\t\t\ttooltipBodyFontStyle: { type: \"string\", group: \"Appearance\", defaultValue: \"normal\" },\n\n\t\t\t\t/**\n\t\t\t\t * Font color for tooltip items.\n\t\t\t\t */\n\t\t\t\ttooltipBodyFontColor: { type: \"string\", group: \"Appearance\", defaultValue: \"#fff\" },\n\n\t\t\t\t/**\n\t\t\t\t * Spacing to add to top and bottom of each tooltip item\n\t\t\t\t */\n\t\t\t\ttooltipBodySpacing: { type: \"int\", group: \"Appearance\", defaultValue: 2 },\n\n\t\t\t\t/**\n\t\t\t\t * Font family for tooltip footer inherited from global font family.\n\t\t\t\t */\n\t\t\t\ttooltipFooterFontFamily: { type: \"string\", group: \"Appearance\", defaultValue: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\" },\n\n\t\t\t\t/**\n\t\t\t\t * Font size for tooltip footer inherited from global font size.\n\t\t\t\t */\n\t\t\t\ttooltipFooterFontSize: { type: \"int\", group: \"Appearance\", defaultValue: 12 },\n\n\t\t\t\t/**\n\t\t\t\t * Font style for tooltip footer.\n\t\t\t\t */\n\t\t\t\ttooltipFooterFontStyle: { type: \"string\", group: \"Appearance\", defaultValue: \"bold\" },\n\n\t\t\t\t/**\n\t\t\t\t * #fff\n\t\t\t\t */\n\t\t\t\ttooltipFooterFontColor: { type: \"string\", group: \"Appearance\", defaultValue: \"#fff\" },\n\n\t\t\t\t/**\n\t\t\t\t * Spacing to add to top and bottom of each footer line.\n\t\t\t\t */\n\t\t\t\ttooltipFooterSpacing: { type: \"int\", group: \"Appearance\", defaultValue: 2 },\n\n\t\t\t\t/**\n\t\t\t\t * Margin to add before drawing the footer\n\t\t\t\t */\n\t\t\t\ttooltipFooterMarginTop: { type: \"int\", group: \"Appearance\", defaultValue: 6 },\n\n\t\t\t\t/**\n\t\t\t\t * Padding to add on left and right of tooltip\n\t\t\t\t */\n\t\t\t\ttooltipXPadding: { type: \"int\", group: \"Appearance\", defaultValue: 6 },\n\n\t\t\t\t/**\n\t\t\t\t * Padding to add on top and bottom of tooltip\n\t\t\t\t */\n\t\t\t\ttooltipYPadding: { type: \"int\", group: \"Appearance\", defaultValue: 6 },\n\n\t\t\t\t/**\n\t\t\t\t * Size, in px, of the tooltip arrow\n\t\t\t\t */\n\t\t\t\ttooltipCaretSize: { type: \"int\", group: \"Appearance\", defaultValue: 5 },\n\n\t\t\t\t/**\n\t\t\t\t * Radius of tooltip corner curves\n\t\t\t\t */\n\t\t\t\ttooltipCornerRadius: { type: \"int\", group: \"Appearance\", defaultValue: 6 },\n\n\t\t\t\t/**\n\t\t\t\t * Color to draw behind the colored boxes when multiple items are in the tooltip\n\t\t\t\t */\n\t\t\t\ttooltipMultiKeyBackground: { type: \"string\", group: \"Appearance\", defaultValue: \"#fff\" },\n\n\t\t\t\t/**\n\t\t\t\t * if true, color boxes are shown in the tooltip\n\t\t\t\t */\n\t\t\t\ttooltipDisplayColors: { type: \"boolean\", group: \"Appearance\", defaultValue: true },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// HOVER\n\t\t\t\t// The hover configuration is passed into the options.hover namespace. \n\t\t\t\t// The global hover configuration is at Chart.defaults.global.hover.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Sets which elements appear in the tooltip.\n\t\t\t\t */\n\t\t\t\thoverMode: { type: \"string\", group: \"Appearance\", defaultValue: \"nearest\" },\n\n\t\t\t\t/**\n\t\t\t\t * if true, the hover mode only applies when the mouse position intersects an item on the chart\n\t\t\t\t */\n\t\t\t\thoverIntersect: { type: \"boolean\", group: \"Appearance\", defaultValue: true },\n\n\t\t\t\t/**\n\t\t\t\t * Duration in milliseconds it takes to animate hover style changes\n\t\t\t\t */\n\t\t\t\thoverAnimationDuration: { type: \"int\", group: \"Appearance\", defaultValue: 400 },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// ANIMATION\n\t\t\t\t// The following animation options are available. The global options for are defined in Chart.defaults.global.animation.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * The number of milliseconds an animation takes.\n\t\t\t\t */\n\t\t\t\tanimationDuration: { type: \"int\", group: \"Appearance\", defaultValue: 1000 },\n\n\t\t\t\t/**\n\t\t\t\t * Easing function to use. Available options are: 'linear', 'easeInQuad', 'easeOutQuad', 'easeInOutQuad', 'easeInCubic', \n\t\t\t\t * 'easeOutCubic', 'easeInOutCubic', 'easeInQuart', 'easeOutQuart', 'easeInOutQuart', 'easeInQuint', 'easeOutQuint', \n\t\t\t\t * 'easeInOutQuint', 'easeInSine', 'easeOutSine', 'easeInOutSine', 'easeInExpo', 'easeOutExpo', 'easeInOutExpo', 'easeInCirc', \n\t\t\t\t * 'easeOutCirc', 'easeInOutCirc', 'easeInElastic', 'easeOutElastic', 'easeInOutElastic', 'easeInBack', 'easeOutBack', \n\t\t\t\t * 'easeInOutBack', 'easeInBounce', 'easeOutBounce', 'easeInOutBounce'\n\t\t\t\t */\n\t\t\t\tanimationEasing: { type: \"string\", group: \"Appearance\", defaultValue: \"easeOutQuart\" },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// ARC\n\t\t\t\t// Arcs are used in the polar area, doughnut and pie charts. They can be configured with the following options. \n\t\t\t\t// The global arc options are stored in Chart.defaults.global.elements.arc.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Default fill color for arcs. Inherited from the global default\n\t\t\t\t */\n\t\t\t\tarcBackgroundColor: { type: \"string\", group: \"Appearance\", defaultValue: \"rgba(0,0,0,0.1)\" },\n\n\t\t\t\t/**\n\t\t\t\t * Default stroke color for arcs\n\t\t\t\t */\n\t\t\t\tarcBorderColor: { type: \"string\", group: \"Appearance\", defaultValue: \"#fff\" },\n\n\t\t\t\t/**\n\t\t\t\t * Default stroke width for arcs\n\t\t\t\t */\n\t\t\t\tarcBorderWidth: { type: \"int\", group: \"Appearance\", defaultValue: 2 },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// LINE\n\t\t\t\t// Line elements are used to represent the line in a line chart. \n\t\t\t\t// The global line options are stored in Chart.defaults.global.elements.line.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Default bezier curve tension. Set to 0 for no bezier curves.\n\t\t\t\t */\n\t\t\t\tlineTension: { type: \"int\", group: \"Appearance\", defaultValue: 0.4 },\n\n\t\t\t\t/**\n\t\t\t\t * Default line fill color\n\t\t\t\t */\n\t\t\t\tlineBackgroundColor: { type: \"string\", group: \"Appearance\", defaultValue: \"rgba(0,0,0,0.1)\" },\n\n\t\t\t\t/**\n\t\t\t\t * Default line stroke width\n\t\t\t\t */\n\t\t\t\tlineBorderWidth: { type: \"int\", group: \"Appearance\", defaultValue: 3 },\n\n\t\t\t\t/**\n\t\t\t\t * Default line stroke color\n\t\t\t\t */\n\t\t\t\tlineBorderColor: { type: \"string\", group: \"Appearance\", defaultValue: \"rgba(0,0,0,0.1)\" },\n\n\t\t\t\t/**\n\t\t\t\t * Default line cap style.\n\t\t\t\t */\n\t\t\t\tlineBorderCapStyle: { type: \"string\", group: \"Appearance\", defaultValue: \"butt\" },\n\n\t\t\t\t/**\n\t\t\t\t * Default line dash. \n\t\t\t\t */\n\t\t\t\tlineBorderDash: { type: \"int[]\", group: \"Appearance\", defaultValue: [] },\n\n\t\t\t\t/**\n\t\t\t\t * Default line dash offset.\n\t\t\t\t */\n\t\t\t\tlineBorderDashOffset: { type: \"int\", group: \"Appearance\", defaultValue: 0.0 },\n\n\t\t\t\t/**\n\t\t\t\t * Default line join style.\n\t\t\t\t */\n\t\t\t\tlineBorderJoinStyle: { type: \"string\", group: \"Appearance\", defaultValue: \"miter\" },\n\n\t\t\t\t/**\n\t\t\t\t * If true, bezier control points are kept inside the chart. If false, no restriction is enforced.\n\t\t\t\t */\n\t\t\t\tlineCapBezierPoints: { type: \"boolean\", group: \"Appearance\", defaultValue: true },\n\n\t\t\t\t/**\n\t\t\t\t * If true, the fill is assumed to be to zero. String values are 'zero', 'top', and 'bottom' to fill to different locations. \n\t\t\t\t * If false, no fill is added\n\t\t\t\t */\n\t\t\t\tlineFill: { type: \"object\", group: \"Appearance\", defaultValue: true },\n\n\t\t\t\t/**\n\t\t\t\t * If true, the line is shown as a stepped line and 'tension' will be ignored\n\t\t\t\t */\n\t\t\t\tlineStepped: { type: \"boolean\", group: \"Appearance\", defaultValue: false },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// POINT\n\t\t\t\t// Point elements are used to represent the points in a line chart or a bubble chart. \n\t\t\t\t// The global point options are stored in Chart.defaults.global.elements.point.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Default point radius\n\t\t\t\t */\n\t\t\t\tpointRadius: { type: \"int\", group: \"Appearance\", defaultValue: 3 },\n\n\t\t\t\t/**\n\t\t\t\t * Default point style\n\t\t\t\t */\n\t\t\t\tpointStyle: { type: \"string\", group: \"Appearance\", defaultValue: \"circle\" },\n\n\t\t\t\t/**\n\t\t\t\t * Default point fill color\n\t\t\t\t */\n\t\t\t\tpointBackgroundColor: { type: \"string\", group: \"Appearance\", defaultValue: \"rgba(0,0,0,0.1)\" },\n\n\t\t\t\t/**\n\t\t\t\t * Default point stroke width\n\t\t\t\t */\n\t\t\t\tpointBorderWidth: { type: \"int\", group: \"Appearance\", defaultValue: 1 },\n\n\t\t\t\t/**\n\t\t\t\t * Default point stroke color\n\t\t\t\t */\n\t\t\t\tpointBorderColor: { type: \"string\", group: \"Appearance\", defaultValue: \"rgba(0,0,0,0.1)\" },\n\n\t\t\t\t/**\n\t\t\t\t * Extra radius added to point radius for hit detection\n\t\t\t\t */\n\t\t\t\tpointHitRadius: { type: \"string\", group: \"Appearance\", defaultValue: \"circle\" },\n\n\t\t\t\t/**\n\t\t\t\t * Default point radius when hovered\n\t\t\t\t */\n\t\t\t\tpointHoverRadius: { type: \"int\", group: \"Appearance\", defaultValue: 4 },\n\n\t\t\t\t/**\n\t\t\t\t * Default stroke width when hovered\n\t\t\t\t */\n\t\t\t\tpointHoverBorderWidth: { type: \"int\", group: \"Appearance\", defaultValue: 1 },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// RECTANGLE\n\t\t\t\t// Rectangle elements are used to represent the bars in a bar chart. \n\t\t\t\t// The global rectangle options are stored in Chart.defaults.global.elements.rectangle.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Default bar fill color\n\t\t\t\t */\n\t\t\t\trectangleBackgroundColor: { type: \"string\", group: \"Appearance\", defaultValue: \"rgba(0,0,0,0.1)\" },\n\n\t\t\t\t/**\n\t\t\t\t * Default bar stroke width\n\t\t\t\t */\n\t\t\t\trectangleBorderWidth: { type: \"int\", group: \"Appearance\", defaultValue: 1 },\n\n\t\t\t\t/**\n\t\t\t\t * Default bar stroke color\n\t\t\t\t */\n\t\t\t\trectangleBorderColor: { type: \"string\", group: \"Appearance\", defaultValue: \"rgba(0,0,0,0.1)\" },\n\n\t\t\t\t/**\n\t\t\t\t * Default skipped (excluded) border for rectangle. Can be one of bottom, left, top, right\n\t\t\t\t */\n\t\t\t\trectangleBorderSkipped: { type: \"string\", group: \"Appearance\", defaultValue: \"bottom\" },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// SCALE\n\t\t\t\t// Rectangle elements are used to represent the bars in a bar chart. \n\t\t\t\t// The global rectangle options are stored in Chart.defaults.global.elements.rectangle.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * Chart scales. More information: http://www.chartjs.org/docs/#scales-common-configuration\n\t\t\t\t */\n\t\t\t\tscales: { type: \"object\", group: \"Appearance\", defaultValue: null },\n\n\t\t\t\theight: { type: \"string\", group: \"Appearance\", defaultValue: \"0\" },\n\t\t\t\twidth: { type: \"string\", group: \"Appearance\", defaultValue: \"0\" },\n\n\t\t\t},\n\t\t\taggregations: {},\n\t\t\tevents: {\n\n\t\t\t\t/**\n\t\t\t\t * Called if the event is of type 'mouseup' or 'click'. Called in the context of the chart and passed the event and an array of active elements\n\t\t\t\t */\n\t\t\t\tonClick: {\n\t\t\t\t\tparameters: {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Event\n\t\t\t\t\t\t */\n\t\t\t\t\t\tevent: { type: \"object\" },\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Acive object clicked\n\t\t\t\t\t\t */\n\t\t\t\t\t\tactiveElements: { type: \"object[]\" }\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * Called when any of the events fire. Called in the context of the chart and passed the event and an array of active elements (bars, points, etc)\n\t\t\t\t */\n\t\t\t\tonHover: {\n\t\t\t\t\tparameters: {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Event\n\t\t\t\t\t\t */\n\t\t\t\t\t\tevent: { type: \"object\" },\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Acive object clicked\n\t\t\t\t\t\t */\n\t\t\t\t\t\tactiveElements: { type: \"object[]\" }\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * Called when a resize occurs. Gets passed two arguments: the chart instance and the new size.\n\t\t\t\t */\n\t\t\t\tonResize: {\n\t\t\t\t\tparameters: {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Chart\n\t\t\t\t\t\t */\n\t\t\t\t\t\tchart: { type: \"object\" },\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * New resized size of the chart\n\t\t\t\t\t\t */\n\t\t\t\t\t\tnewSize: { type: \"object\" }\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * A callback that is called when a 'click' event is registered on top of a label item\n\t\t\t\t */\n\t\t\t\tonLegendItemClick: {\n\t\t\t\t\tparameters: {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Event\n\t\t\t\t\t\t */\n\t\t\t\t\t\tevent: { type: \"object\" },\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Legend item clicked\n\t\t\t\t\t\t */\n\t\t\t\t\t\tlegendItem: { type: \"object\" }\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * A callback that is called when a 'mousemove' event is registered on top of a label item\n\t\t\t\t */\n\t\t\t\tonLegendItemHover: {\n\t\t\t\t\tparameters: {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Event\n\t\t\t\t\t\t */\n\t\t\t\t\t\tevent: { type: \"object\" },\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Legend item clicked\n\t\t\t\t\t\t */\n\t\t\t\t\t\tlegendItem: { type: \"object\" }\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * Callback called at the end of an animation. Passed the same arguments as onProgress\n\t\t\t\t */\n\t\t\t\tonAnimationProgress: {\n\t\t\t\t\tparameters: {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Animation object composed by the chart instance and animaton detail\n\t\t\t\t\t\t */\n\t\t\t\t\t\tanimation: { type: \"object\" },\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * Callback called on each step of an animation. Passed a single argument, an object, containing the \n\t\t\t\t * chart instance and an object with details of the animation.\n\t\t\t\t */\n\t\t\t\tonAnimationComplete: {\n\t\t\t\t\tparameters: {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Animation object composed by the chart instance and animaton detail\n\t\t\t\t\t\t */\n\t\t\t\t\t\tanimation: { type: \"object\" },\n\t\t\t\t\t}\n\t\t\t\t},\n\n\n\t\t\t},\n\t\t},\n\n\t\tonAfterRendering: function () {\n\t\t\tvar that = this;\n\t\t\tvar titleOptions = {\n\t\t\t\tdisplay: this.getTitleDisplay(),\n\t\t\t\tposition: this.getTitlePosition(),\n\t\t\t\ttext: this.getTitleText()\n\t\t\t};\n\n\t\t\tvar layoutOptions = {\n\t\t\t\tpadding: this.getLayoutPadding()\n\t\t\t};\n\n\t\t\tvar titleOptions = {\n\t\t\t\tdisplay: this.getTitleDisplay(),\n\t\t\t\tposition: this.getTitlePosition(),\n\t\t\t\tfullWidth: this.getTitleFullWidth(),\n\t\t\t\tfontSize: this.getTitleFontSize(),\n\t\t\t\tfontFamily: this.getTitleFontFamily(),\n\t\t\t\tfontColor: this.getTitleFontColor(),\n\t\t\t\tfontStyle: this.getTitleFontStyle(),\n\t\t\t\tpadding: this.getTitlePadding(),\n\t\t\t\ttext: this.getTitleText()\n\t\t\t};\n\n\t\t\tvar legendLabelOptions = {\n\t\t\t\tboxWidth: this.getLegendLabelBoxWidth(),\n\t\t\t\tfontSize: this.getLegendLabelFontSize(),\n\t\t\t\tfontStyle: this.getLegendLabelFontStyle(),\n\t\t\t\tfontColor: this.getLegendLabelFontColor(),\n\t\t\t\tfontFamily: this.getLegendLabelFontFamily(),\n\t\t\t\tpadding: this.getLegendLabelPadding(),\n\t\t\t\tusePointStyle: this.getLegendLabelUsePointStyle()\n\t\t\t};\n\n\t\t\tif (this.getGenerateLabelsCallback()) {\n\t\t\t\tlegendLabelOptions.generateLabels = this.getGenerateLabelsCallback();\n\t\t\t}\n\n\t\t\tvar legendOptions = {\n\t\t\t\tdisplay: this.getLegendDisplay(),\n\t\t\t\tposition: this.getLegendPosition(),\n\t\t\t\tfullWidth: this.getLegendFullWidth(),\n\t\t\t\treverse: this.getLegendReverse(),\n\t\t\t\tlabels: legendLabelOptions,\n\t\t\t\tonClick: function (event, legendItem) {\n\t\t\t\t\tthat.fireOnLegendItemClick({ event: event, legendItem: legendItem });\n\t\t\t\t},\n\t\t\t\tonHover: function (event, legendItem) {\n\t\t\t\t\tthat.fireOnLegendItemHover({ event: event, legendItem: legendItem });\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tvar tooltipOptions = {\n\t\t\t\tenabled: this.getTooltipEnabled(),\n\t\t\t\tmode: this.getTooltipMode(),\n\t\t\t\tintersect: this.getTooltipIntersect(),\n\t\t\t\tposition: this.getTooltipPosition(),\n\t\t\t\tbackgroundColor: this.getTooltipBackgroundColor(),\n\t\t\t\ttitleFontFamily: this.getTooltipTitleFontFamily(),\n\t\t\t\ttitleFontSize: this.getTooltipTitleFontSize(),\n\t\t\t\ttitleFontStyle: this.getTooltipTitleFontStyle(),\n\t\t\t\ttitleFontColor: this.getTooltipTitleFontColor(),\n\t\t\t\ttitleSpacing: this.getTooltipTitleSpacing(),\n\t\t\t\ttitleMarginBottom: this.getTooltipTitleMarginBottom(),\n\t\t\t\tbodyFontFamily: this.getTooltipBodyFontFamily(),\n\t\t\t\tbodyFontSize: this.getTooltipBodyFontSize(),\n\t\t\t\tbodyFontStyle: this.getTooltipBodyFontStyle(),\n\t\t\t\tbodyFontColor: this.getTooltipBodyFontColor(),\n\t\t\t\tbodySpacing: this.getTooltipBodySpacing(),\n\t\t\t\tfooterFontFamily: this.getTooltipFooterFontFamily(),\n\t\t\t\tfooterFontSize: this.getTooltipFooterFontSize(),\n\t\t\t\tfooterFontStyle: this.getTooltipFooterFontStyle(),\n\t\t\t\tfooterFontColor: this.getTooltipFooterFontColor(),\n\t\t\t\tfooterSpacing: this.getTooltipFooterSpacing(),\n\t\t\t\tfooterMarginTop: this.getTooltipFooterMarginTop(),\n\t\t\t\txPadding: this.getTooltipXPadding(),\n\t\t\t\tyPadding: this.getTooltipYPadding(),\n\t\t\t\tcaretSize: this.getTooltipCaretSize(),\n\t\t\t\tcornerRadius: this.getTooltipCornerRadius(),\n\t\t\t\tmultiKeyBackground: this.getTooltipMultiKeyBackground(),\n\t\t\t\tdisplayColors: this.getTooltipDisplayColors(),\n\t\t\t\tcustom: this.getCustomTooltipCallback(),\n\t\t\t\titemSort: this.getTooltipSortFunction(),\n\t\t\t\tfilter: this.getTooltipFilterFunction(),\n\t\t\t\tcallbacks: this.getTooltipCallbacks()\n\t\t\t};\n\n\t\t\t// if( this.getTooltipCallbacks() ) tooltipOptions.callbacks = this.getTooltipCallbacks();\n\n\t\t\tvar hoverOptions = {\n\t\t\t\tmode: this.getHoverMode(),\n\t\t\t\tintersect: this.getHoverIntersect(),\n\t\t\t\tanimationDuration: this.getHoverAnimationDuration(),\n\t\t\t};\n\n\t\t\tvar animationOptions = {\n\t\t\t\tduration: this.getAnimationDuration(),\n\t\t\t\teasing: this.getAnimationEasing(),\n\t\t\t\tonProgress: function (animation) {\n\t\t\t\t\tthat.fireOnAnimationProgress({ animation: animation });\n\t\t\t\t},\n\t\t\t\tonComplete: function (animation) {\n\t\t\t\t\tthat.fireOnAnimationComplete({ animation: animation });\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tvar arcOptions = {\n\t\t\t\tbackgroundColor: this.getArcBackgroundColor(),\n\t\t\t\tborderColor: this.getArcBorderColor(),\n\t\t\t\tborderWidth: this.getArcBorderWidth()\n\t\t\t};\n\n\t\t\tvar lineOptions = {\n\t\t\t\ttension: this.getLineTension(),\n\t\t\t\tbackgroundColor: this.getLineBackgroundColor(),\n\t\t\t\tborderWidth: this.getLineBorderWidth(),\n\t\t\t\tborderColor: this.getLineBorderColor(),\n\t\t\t\tborderCapStyle: this.getLineBorderCapStyle(),\n\t\t\t\tborderDash: this.getLineBorderDash(),\n\t\t\t\tborderDashOffset: this.getLineBorderDashOffset(),\n\t\t\t\tborderJoinStyle: this.getLineBorderJoinStyle(),\n\t\t\t\tcapBezierPoints: this.getLineCapBezierPoints(),\n\t\t\t\tfill: this.getLineFill(),\n\t\t\t\tstepped: this.getLineStepped()\n\t\t\t};\n\n\t\t\tvar pointOptions = {\n\t\t\t\tradius: this.getPointRadius(),\n\t\t\t\tpointStyle: this.getPointStyle(),\n\t\t\t\tbackgroundColor: this.getPointBackgroundColor(),\n\t\t\t\tborderWidth: this.getPointBorderWidth(),\n\t\t\t\tborderColor: this.getPointBorderColor(),\n\t\t\t\thitRadius: this.getPointHitRadius(),\n\t\t\t\thoverRadius: this.getPointHoverRadius(),\n\t\t\t\thoverBorderWidth: this.getPointHoverBorderWidth()\n\t\t\t};\n\n\t\t\tvar rectangleOptions = {\n\t\t\t\tbackgroundColor: this.getRectangleBackgroundColor(),\n\t\t\t\tborderWidth: this.getRectangleBorderWidth(),\n\t\t\t\tborderColor: this.getRectangleBorderColor(),\n\t\t\t\tborderSkipped: this.getRectangleBorderSkipped()\n\t\t\t};\n\n\t\t\tvar globalOptions = {\n\t\t\t\tonClick: function (event, activeElements) {\n\t\t\t\t\tthat.fireOnClick({ event: event, activeElements: activeElements });\n\t\t\t\t},\n\t\t\t\tonHover: function (event, activeElements) {\n\t\t\t\t\tthat.fireOnHover({ event: event, activeElements: activeElements });\n\t\t\t\t},\n\t\t\t\tonResize: function (chart, newSize) {\n\t\t\t\t\tthat.fireOnResize({ chart: chart, newSize: newSize });\n\t\t\t\t},\n\t\t\t\tresponsive: this.getResponsive(),\n\t\t\t\tresponsiveAnimationDuration: this.getResponsiveAnimationDuration(),\n\t\t\t\tmaintainAspectRatio: this.getMaintainAspectRatio(),\n\t\t\t\tevents: this.getEvents(),\n\t\t\t\ttitle: titleOptions,\n\t\t\t\tlayout: layoutOptions,\n\t\t\t\t// legend: legendOptions,\n\t\t\t\ttooltips: tooltipOptions,\n\t\t\t\thover: hoverOptions,\n\t\t\t\tanimation: animationOptions,\n\t\t\t\tarc: arcOptions,\n\t\t\t\tline: lineOptions,\n\t\t\t\tpoint: pointOptions,\n\t\t\t\trectangle: rectangleOptions\n\t\t\t};\n\n\t\t\tif (this.getScales()) {\n\t\t\t\tglobalOptions.scales = this.getScales();\n\t\t\t}\n\t\t\tglobalOptions.plugins = {};\n\t\t\tglobalOptions.plugins.legend = legendOptions;\n\n\t\t\tthis.addGlobalOptions(globalOptions);\n\n\t\t\tthis.__ctx = document.getElementById(this.getId());\n\t\t\tthis.__chart = new Chart(this.__ctx, {\n\t\t\t\ttype: this.getChartType(),\n\t\t\t\tdata: {\n\t\t\t\t\tlabels: this.getLabels(),\n\t\t\t\t\tdatasets: this.getDatasets()\n\t\t\t\t},\n\t\t\t\toptions: globalOptions,\n\t\t\t});\n\t\t},\n\n\n\n\t\t/////////////////////////////////////\n\t\t// OVERRIDE\n\t\t/////////////////////////////////////\n\n\t\taddGlobalOptions: function (globalOptions) {\n\t\t},\n\n\t\t//////////////////////////////////////////////\n\t\t// GETTER / SETTER\n\t\t//////////////////////////////////////////////\n\n\n\n\t\t//////////////////////////////////////////////\n\t\t// CHART METHODS\n\t\t//////////////////////////////////////////////\n\n\n\t\t/**\n\t\t* Update Chart Datasets\n\t\t* @public\n\t\t* @param {object} oDatasets - Chart Datasets\n\t\t*/\n\t\tsetDatasets: function (oDatasets) {\n\t\t\tthis.setProperty(\"datasets\", oDatasets, true);\n\t\t\tif (this.__chart) {\n\t\t\t\tthis.__chart.data.datasets = oDatasets;\n\t\t\t}\n\t\t\tthis.updateChart();\n\t\t},\n\n\t\t/**\n\t\t* Update Chart Labels\n\t\t* @public\n\t\t* @param {object} oLabels - Chart Labels\n\t\t*/\n\t\tsetLabels: function (oLabels) {\n\t\t\tthis.setProperty(\"labels\", oLabels, true);\n\t\t\tif (this.__chart) {\n\t\t\t\tthis.__chart.data.labels = oLabels;\n\t\t\t}\n\t\t\tthis.updateChart();\n\t\t},\n\n\t\t/**\n\t\t* Set the Chart Hover Mode\n\t\t* @public\n\t\t* @param {string} sHoverMode - Hover mode\n\t\t*/\n\t\tsetHoverMode: function (sHoverMode) {\n\t\t\tthis.setProperty(\"hoverMode\", sHoverMode, true);\n\t\t},\n\n\t\t/**\n\t\t* Use this to destroy any chart instances that are created. \n\t\t* This will clean up any references stored to the chart object within Chart.js, along with any associated event listeners attached by Chart.js. \n\t\t* This must be called before the canvas is reused for a new chart.\n\t\t* @public\n\t\t*/\n\t\tdestroyChart: function () {\n\t\t\tif (this.__chart) {\n\t\t\t\tthis.__chart.destroy();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* Triggers an update of the chart. This can be safely called after replacing the entire data object. \n\t\t* This will update all scales, legends, and then re-render the chart.\n\t\t* @public\n\t\t* @param {int} iDuration - Time for the animation of the redraw in milliseconds\n\t\t* @param {boolean} bLazy - If true, the animation can be interrupted by other animations\n\t\t*/\n\t\tupdateChart: function (iDuration, bLazy) {\n\t\t\tif (this.__chart) {\n\t\t\t\tthis.__chart.update(iDuration, bLazy);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* Reset the chart to it's state before the initial animation. A new animation can then be triggered using update.\n\t\t* @public\n\t\t*/\n\t\treset: function () {\n\t\t\tif (this.__chart) {\n\t\t\t\tthis.__chart.reset();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* Reset the chart to it's state before the initial animation. A new animation can then be triggered using update.\n\t\t* @public\n\t\t* @param {int} iDuration - Time for the animation of the redraw in milliseconds\n\t\t* @param {boolean} bLazy - If true, the animation can be interrupted by other animations\n\t\t*/\n\t\trender: function (iDuration, bLazy) {\n\t\t\tif (this.__chart) {\n\t\t\t\tthis.__chart.reset(iDuration, bLazy);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* Use this to stop any current animation loop. This will pause the chart during any current animation frame. Call .render() to re-animate.\n\t\t* @public\n\t\t* @returns {object} Returns 'this' for chainability\n\t\t*/\n\t\tstop: function () {\n\t\t\tif (this.__chart) {\n\t\t\t\tthis.__chart.stop();\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t* Use this to manually resize the canvas element. \n\t\t* This is run each time the canvas container is resized, but you can call this method manually if you change the size of the canvas nodes container element.\n\t\t* @public\n\t\t* @returns {object} Returns 'this' for chainability\n\t\t*/\n\t\tresize: function () {\n\t\t\tif (this.__chart) {\n\t\t\t\tthis.__chart.resize();\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t* Will clear the chart canvas. Used extensively internally between animation frames, but you might find it useful.\n\t\t* @public\n\t\t* @returns {object} Returns 'this' for chainability\n\t\t*/\n\t\tclear: function () {\n\t\t\tif (this.__chart) {\n\t\t\t\tthis.__chart.clear();\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t* This returns a base 64 encoded string of the chart in it's current state.\n\t\t* @public\n\t\t* @returns {object} Returns png data url of the image on the canvas\n\t\t*/\n\t\ttoBase64Image: function () {\n\t\t\tif (this.__chart) {\n\t\t\t\treturn this.__chart.toBase64Image();\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\n\t\t/**\n\t\t* Calling getElementAtEvent(event) on your Chart instance passing an argument of an event, or jQuery event, \n\t\t* will return the single element at the event position. If there are multiple items within range, only the first is returned\n\t\t* @public\n\t\t* @param {object} oEvent - Event or jQuery Event\n\t\t* @returns {object} Returns HTML string of a legend for this chart\n\t\t*/\n\t\tgetElementAtEvent: function (oEvent) {\n\t\t\tif (this.__chart) {\n\t\t\t\treturn this.__chart.getElementAtEvent(oEvent);\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\n\t\t/**\n\t\t* Looks for the element under the event point, then returns all elements at the same data index. This is used internally for 'label' mode highlighting.\n\t\t* Calling getElementsAtEvent(event) on your Chart instance passing an argument of an event, or jQuery event, \n\t\t* will return the point elements that are at that the same position of that event.\n\t\t* @public\n\t\t* @param {object} oEvent - Event or jQuery Event\n\t\t* @returns {object} An array of points on the canvas that are at the same position as the click event.\n\t\t*/\n\t\tgetElementsAtEvent: function (oEvent) {\n\t\t\tif (this.__chart) {\n\t\t\t\treturn this.__chart.getElementsAtEvent(oEvent);\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\n\t\t/**\n\t\t* Looks for the element under the event point, then returns all elements from that dataset. This is used internally for 'dataset' mode highlighting\n\t\t* @public\n\t\t* @param {object} oEvent - Event or jQuery Event\n\t\t* @returns {object} An array of elements\n\t\t*/\n\t\tgetDatasetAtEvent: function (oEvent) {\n\t\t\tif (this.__chart) {\n\t\t\t\treturn this.__chart.getDatasetAtEvent(oEvent);\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\n\t\t/**\n\t\t* Looks for the dataset that matches the current index and returns that metadata. This returned data has all of the metadata that is used to construct the chart.\n\t\t* @public\n\t\t* @param {int} iIndex - Index\n\t\t* @returns {object} The data property of the metadata will contain information about each point, rectangle, etc. depending on the chart type.\n\t\t*/\n\t\tgetDatasetMeta: function (iIndex) {\n\t\t\tif (this.__chart) {\n\t\t\t\treturn this.__chart.getDatasetMeta(iIndex);\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\n\t});\n\n\n\t/**\n\t* Override the exit method to free local resources and destroy \n\t* @public\n\t*/\n\tBaseChartJS.prototype.exit = function () {\n\t\tthis.__chart.destroy();\n\t\tthis.__chart = undefined;\n\t};\n\n\treturn BaseChartJS;\n\n}, /* bExport= */ true);",
		"it/designfuture/chartjs/BaseChartJSRenderer.js": "sap.ui.define(['jquery.sap.global'],\n\tfunction(jQuery) {\n\t\"use strict\";\n\n\n\t/**\n\t* BaseChartJS renderer.\n\t* @static\n\t* @namespace\n\t*/\n\tvar BaseChartJSRenderer = {};\n\t\n\t/**\n\t * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.\n\t *\n\t * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.\n\t * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered.\n\t */\n\tBaseChartJSRenderer.render = function(oRM, oControl) {\n\t\toRM.write(\"<canvas\");\n\t\toRM.writeControlData(oControl);\n\t\toRM.addClass(\"opeui5-base-chartjs\");\n\t\tthis.addOuterClasses(oRM, oControl);\n\t\toRM.writeClasses();\n\t\toRM.write(\">\");\n\t\t\n\t\tif (oControl.getHeight() !== undefined && oControl.getHeight() !== null) {\n\t\t\toRM.addStyle(\"height\", oControl.getHeight());\n\t\t}\n\t\tif (oControl.getWidth() !== undefined && oControl.getWidth() !== null) {\n\t\t\toRM.addStyle(\"width\", oControl.getWidth());\n\t\t}\n\t\toRM.writeStyles();\n\t\t\n\t\toRM.write(\"</canvas>\");\n\t};\n\t\n\t/**\n\t * This method is reserved for derived classes to add extra classes for chart container.\n\t *\n\t * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.\n\t * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered.\n\t */\n\tBaseChartJSRenderer.addOuterClasses = function(oRm, oControl) {};\n\n\n\treturn BaseChartJSRenderer;\n\n}, /* bExport= */ true);\n",
		"it/designfuture/chartjs/BubbleChartJS.js": "// Provides control it.designfuture.chartjs.BubbleChartJS\nsap.ui.define([\n\t\"./BaseChartJS\",\n], function (BaseChartJS) {\n\t\"use strict\";\n\t\n\t/**\n\t * Constructor for a new Chart.\n\t *\n\t * @param {string} [sId] id for the new control, generated automatically if no id is given \n\t * @param {object} [mSettings] initial settings for the new control\n\t *\n\t * @class\n\t * QRCode Control to render a QR Code\n\t * @extends sap.m.InputBase\n\t * @version ${version}\n\t *\n\t * @constructor\n\t * @public\n\t * @since 1.40\n\t * @name it.designfuture.chartjs.BubbleChartJS\n\t */\n\tvar BubbleChartJS =  BaseChartJS.extend(\"it.designfuture.chartjs.BubbleChartJS\", {\n\t\t\n\t\tmetadata : {\n\t\t\t//library: 'it.designfuture.chartjs',\n\t\t\tproperties: {},\n\t\t\taggregations: {},\n\t\t\tevents: {}\n\t\t},\n\t\t\n\t\tonBeforeRendering: function() {\n\t\t\tthis.setChartType(\"bubble\");\n\t\t},\n\t\t\n\t\t/////////////////////////////////////\n\t\t// OVERRIDE\n\t\t/////////////////////////////////////\n\t\t\n\t\taddGlobalOptions: function(globalOptions) {},\n\t\t\n\t\t//////////////////////////////////////////////\n\t\t// GETTER / SETTER\n\t\t//////////////////////////////////////////////\n\t\t\n\t\t\n\t\t//////////////////////////////////////////////\n\t\t// CHART METHODS\n\t\t//////////////////////////////////////////////\n\t\t\n\t});\n\n\n\treturn BubbleChartJS;\n\n}, /* bExport= */ true);",
		"it/designfuture/chartjs/BubbleChartJSRenderer.js": "sap.ui.define(['jquery.sap.global', 'sap/ui/core/Renderer', './BaseChartJSRenderer'],\n\tfunction(jQuery, Renderer, BaseChartJSRenderer) {\n\t\"use strict\";\n\n\n\t/**\n\t* BubbleChartJS renderer.\n\t* @static\n\t* @namespace\n\t*/\n\tvar BubbleChartJSRenderer = Renderer.extend(BaseChartJSRenderer);\n\t\n\t/**\n\t * Adds control specific class\n\t *\n\t * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer\n\t * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered\n\t */\n\tBubbleChartJSRenderer.addOuterClasses = function(oRm, oControl) {\n\t\toRm.addClass(\"opeui5-bubble-chartjs\");\n\t};\n\n\n\treturn BubbleChartJSRenderer;\n\n}, /* bExport= */ true);",
		"it/designfuture/chartjs/library.js": "/*!\n * ${copyright}\n */\n\n/**\n * Initialization Code and shared classes of library it.designfuture.flatpickr.\n */\nsap.ui.define([\n\t'jquery.sap.global', \n\t'sap/ui/core/library' // library dependency\n\t],  function(jQuery, library) {\n\n\t\t\"use strict\";\n\n\t\t/**\n\t\t * Suite controls library.\n\t\t *\n\t\t * @namespace\n\t\t * @name it.designfuture.chartjs\n\t\t * @author Avik Saha <shaancse08@gmail.com>\n\t\t * @version ${version}\n\t\t * @public\n\t\t */\n\n\n\t\t// delegate further initialization of this library to the Core\n\t\tsap.ui.getCore().initLibrary({\n\t\t\tname : \"it.designfuture.chartjs\",\n\t\t\tversion: \"${version}\",\n\t\t\tnoLibraryCSS: true,\n\t\t\tdependencies : [\"sap.ui.core\", \"sap.m\"],\n\t\t\ttypes: [],\n\t\t\tinterfaces: [],\n\t\t\tcontrols: [ \n\t\t\t\t\"it.designfuture.chartjs.BarChartJS\",\n\t\t\t\t\"it.designfuture.chartjs.BubbleChartJS\",\n\t\t\t\t\"it.designfuture.chartjs.LineChartJS\",\n\t\t\t\t\"it.designfuture.chartjs.PieChartJS\",\n\t\t\t\t\"it.designfuture.chartjs.PolarAreaChartJS\",\n\t\t\t\t\"it.designfuture.chartjs.RadarChartJS\"\n\t\t\t],\n\t\t\telements: []\n\t\t});\n\n\t\treturn it.designfuture.chartjs;\n\n}, /* bExport= */ false);",
		"it/designfuture/chartjs/LineChartJS.js": "// Provides control it.designfuture.chartjs.LineChartJS\nsap.ui.define([\n\t\"./BaseChartJS\",\n], function (BaseChartJS) {\n\t\"use strict\";\n\t\n\t/**\n\t * Constructor for a new Chart.\n\t *\n\t * @param {string} [sId] id for the new control, generated automatically if no id is given \n\t * @param {object} [mSettings] initial settings for the new control\n\t *\n\t * @class\n\t * QRCode Control to render a QR Code\n\t * @extends sap.m.InputBase\n\t * @version ${version}\n\t *\n\t * @constructor\n\t * @public\n\t * @since 1.40\n\t * @name it.designfuture.chartjs.LineChartJS\n\t */\n\tvar LineChartJS =  BaseChartJS.extend(\"it.designfuture.chartjs.LineChartJS\", {\n\t\t\n\t\tmetadata : {\n\t\t\t//library: 'it.designfuture.chartjs',\n\t\t\tproperties: {\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * If false, the lines between points are not drawn\n\t\t\t\t */\n\t\t\t\tshowLines : {type : \"boolean\", group : \"Appearance\", defaultValue : true},\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * If true, NaN data does not break the line\n\t\t\t\t */\n\t\t\t\tspanGaps : {type : \"boolean\", group : \"Appearance\", defaultValue : false},\n\t\t\t\t\n\t\t\t},\n\t\t\taggregations: {},\n\t\t\tevents: {}\n\t\t},\n\t\t\n\t\tinit: function() {\n\t\t},\n\t\t\n\t\tonBeforeRendering: function() {\n\t\t\tthis.setChartType(\"line\");\n\t\t},\n\t\t\n\t\t/////////////////////////////////////\n\t\t// OVERRIDE\n\t\t/////////////////////////////////////\n\t\t\n\t\taddGlobalOptions: function(globalOptions) {\n\t\t\tglobalOptions.showLines = this.getShowLines();\n\t\t\tglobalOptions.spanGaps = this.getSpanGaps();\n\t\t},\n\t\t\n\t\t//////////////////////////////////////////////\n\t\t// GETTER / SETTER\n\t\t//////////////////////////////////////////////\n\t\t\n\t\t\n\t\t\n\t\t//////////////////////////////////////////////\n\t\t// CHART METHODS\n\t\t//////////////////////////////////////////////\n\t\t\n\t});\n\n\n\treturn LineChartJS;\n\n}, /* bExport= */ true);",
		"it/designfuture/chartjs/LineChartJSRenderer.js": "sap.ui.define(['jquery.sap.global', 'sap/ui/core/Renderer', './BaseChartJSRenderer'],\n\tfunction(jQuery, Renderer, BaseChartJSRenderer) {\n\t\"use strict\";\n\n\n\t/**\n\t* LineChartJS renderer.\n\t* @static\n\t* @namespace\n\t*/\n\tvar LineChartJSRenderer = Renderer.extend(BaseChartJSRenderer);\n\t\n\t/**\n\t * Adds control specific class\n\t *\n\t * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer\n\t * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered\n\t */\n\tLineChartJSRenderer.addOuterClasses = function(oRm, oControl) {\n\t\toRm.addClass(\"opeui5-line-chartjs\");\n\t};\n\n\n\treturn LineChartJSRenderer;\n\n}, /* bExport= */ true);",
		"it/designfuture/chartjs/PieChartJS.js": "// Provides control it.designfuture.chartjs.PieChartJS\nsap.ui.define([\n\t\"./BaseChartJS\",\n], function (BaseChartJS) {\n\t\"use strict\";\n\n\t/**\n\t * Constructor for a new Chart.\n\t *\n\t * @param {string} [sId] id for the new control, generated automatically if no id is given \n\t * @param {object} [mSettings] initial settings for the new control\n\t *\n\t * @class\n\t * QRCode Control to render a QR Code\n\t * @extends sap.m.InputBase\n\t * @version ${version}\n\t *\n\t * @constructor\n\t * @public\n\t * @since 1.40\n\t * @name it.designfuture.chartjs.PieChartJS\n\t */\n\tvar PieChartJS = BaseChartJS.extend(\"it.designfuture.chartjs.PieChartJS\", {\n\n\t\tDEFAULT_PIE_CUTOUT_PERCENTAGE: 50,\n\t\tDEFAULT_DOUGHNUT_CUTOUT_PERCENTAGE: 0,\n\n\t\tmetadata: {\n\t\t\t//library: 'it.designfuture.chartjs',\n\t\t\tproperties: {\n\t\t\t\t/**\n\t\t\t\t * If the Pie Chart doughnut style\n\t\t\t\t */\n\t\t\t\tisDoughnut: { type: \"boolean\", group: \"Appearance\", defaultValue: false },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// GENERAL\n\t\t\t\t// These are the customisation options specific to Pie & Doughnut charts. \n\t\t\t\t// These options are merged with the global chart configuration options, and form the options of the chart.\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * The percentage of the chart that is cut out of the middle.\n\t\t\t\t * 50 - for doughnut, 0 - for pie\n\t\t\t\t */\n\t\t\t\tcutoutPercentage: { type: \"string\", group: \"Appearance\", defaultValue: null },\n\n\t\t\t\t/**\n\t\t\t\t * Starting angle to draw arcs from\n\t\t\t\t */\n\t\t\t\trotation: { type: \"int\", group: \"Appearance\", defaultValue: 0 },\n\n\t\t\t\t/**\n\t\t\t\t * Sweep to allow arcs to cover\n\t\t\t\t */\n\t\t\t\tcircumference: { type: \"int\", group: \"Appearance\", defaultValue: 360 },\n\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// ANIMATION\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\t\t\t/**\n\t\t\t\t * If true, will animate the rotation of the chart.\n\t\t\t\t */\n\t\t\t\tanimationAnimateRotate: { type: \"boolean\", group: \"Appearance\", defaultValue: true },\n\n\t\t\t\t/**\n\t\t\t\t * If true, will animate scaling the Doughnut from the centre.\n\t\t\t\t */\n\t\t\t\tanimationAnimateScale: { type: \"boolean\", group: \"Appearance\", defaultValue: false },\n\n\t\t\t},\n\t\t\taggregations: {},\n\t\t\tevents: {}\n\t\t},\n\n\t\tonBeforeRendering: function () {\n\t\t\tthis.setChartType(this.getIsDoughnut() ? \"doughnut\" : \"pie\");\n\t\t},\n\n\t\t/////////////////////////////////////\n\t\t// OVERRIDE\n\t\t/////////////////////////////////////\n\n\t\taddGlobalOptions: function (globalOptions) {\n\t\t\tif (this.getCutoutPercentage() === null) {\n\t\t\t\tglobalOptions.cutoutPercentage = this.getIsDoughnut() ? this.DEFAULT_DOUGHNUT_CUTOUT_PERCENTAGE : this.DEFAULT_PIE_CUTOUT_PERCENTAGE;\n\t\t\t} else {\n\t\t\t\tglobalOptions.cutoutPercentage = this.getCutoutPercentage();\n\t\t\t}\n\t\t\tglobalOptions.rotation = this.getRotation();\n\t\t\tglobalOptions.circumference = this.getCircumference();\n\t\t\tglobalOptions.animation.animateRotate = this.getAnimationAnimateRotate();\n\t\t\tglobalOptions.animation.animateScale = this.getAnimationAnimateScale();\n\t\t},\n\n\t\t//////////////////////////////////////////////\n\t\t// GETTER / SETTER\n\t\t//////////////////////////////////////////////\n\n\n\n\t\t//////////////////////////////////////////////\n\t\t// CHART METHODS\n\t\t//////////////////////////////////////////////\n\n\t});\n\n\n\treturn PieChartJS;\n\n}, /* bExport= */ true);",
		"it/designfuture/chartjs/PieChartJSRenderer.js": "sap.ui.define(['jquery.sap.global', 'sap/ui/core/Renderer', './BaseChartJSRenderer'],\n\tfunction(jQuery, Renderer, BaseChartJSRenderer) {\n\t\"use strict\";\n\n\n\t/**\n\t* PieChartJS renderer.\n\t* @static\n\t* @namespace\n\t*/\n\tvar PieChartJSRenderer = Renderer.extend(BaseChartJSRenderer);\n\t\n\t/**\n\t * Adds control specific class\n\t *\n\t * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer\n\t * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered\n\t */\n\tPieChartJSRenderer.addOuterClasses = function(oRm, oControl) {\n\t\toRm.addClass(\"opeui5-pie-chartjs\");\n\t\tif( oControl.getIsDoughnut() ) {\n\t\t\toRm.addClass(\"opeui5-pie-doughnut-chartjs\");\n\t\t}\n\t};\n\n\n\treturn PieChartJSRenderer;\n\n}, /* bExport= */ true);",
		"it/designfuture/chartjs/PolarAreaChartJS.js": "// Provides control it.designfuture.chartjs.PolarAreaChartJS\nsap.ui.define([\n\t\"./BaseChartJS\",\n], function (BaseChartJS) {\n\t\"use strict\";\n\t\n\t/**\n\t * Constructor for a new Chart.\n\t *\n\t * @param {string} [sId] id for the new control, generated automatically if no id is given \n\t * @param {object} [mSettings] initial settings for the new control\n\t *\n\t * @class\n\t * QRCode Control to render a QR Code\n\t * @extends sap.m.InputBase\n\t * @version ${version}\n\t *\n\t * @constructor\n\t * @public\n\t * @since 1.40\n\t * @name it.designfuture.chartjs.PolarAreaChartJS\n\t */\n\tvar PolarAreaChartJS =  BaseChartJS.extend(\"it.designfuture.chartjs.PolarAreaChartJS\", {\n\t\t\n\t\tmetadata : {\n\t\t\t//library: 'it.designfuture.chartjs',\n\t\t\tproperties: {\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * Sets the starting angle for the first item in a dataset\n\t\t\t\t */\n\t\t\t\tstartAngle : {type : \"int\", group : \"Appearance\", defaultValue : -0.5 * Math.PI},\n\t\t\t\t\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t// ANIMATION\n\t\t\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * If true, will animate the rotation of the chart.\n\t\t\t\t */\n\t\t\t\tanimationAnimateRotate : {type : \"boolean\", group : \"Appearance\", defaultValue : true},\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * If true, will animate scaling the chart.\n\t\t\t\t */\n\t\t\t\tanimationAnimateScale : {type : \"boolean\", group : \"Appearance\", defaultValue : true},\n\t\t\t\t\n\t\t\t},\n\t\t\taggregations: {},\n\t\t\tevents: {}\n\t\t},\n\t\t\n\t\tinit: function() {\n\t\t},\n\t\t\n\t\tonBeforeRendering: function() {\n\t\t\tthis.setChartType(\"polarArea\");\n\t\t},\n\t\t\n\t\t/////////////////////////////////////\n\t\t// OVERRIDE\n\t\t/////////////////////////////////////\n\t\t\n\t\taddGlobalOptions: function(globalOptions) {\n\t\t\tglobalOptions.startAngle = this.getStartAngle();\n\t\t\tglobalOptions.animation.animateRotate = this.getAnimationAnimateRotate();\n\t\t\tglobalOptions.animation.animateScale = this.getAnimationAnimateScale();\n\t\t},\n\t\t\n\t\t//////////////////////////////////////////////\n\t\t// GETTER / SETTER\n\t\t//////////////////////////////////////////////\n\t\t\n\t});\n\n\n\treturn PolarAreaChartJS;\n\n}, /* bExport= */ true);",
		"it/designfuture/chartjs/PolarAreaChartJSRenderer.js": "sap.ui.define(['jquery.sap.global', 'sap/ui/core/Renderer', './BaseChartJSRenderer'],\n\tfunction(jQuery, Renderer, BaseChartJSRenderer) {\n\t\"use strict\";\n\n\n\t/**\n\t* PolarChartJS renderer.\n\t* @static\n\t* @namespace\n\t*/\n\tvar PolarAreaChartJSRenderer = Renderer.extend(BaseChartJSRenderer);\n\t\n\t/**\n\t * Adds control specific class\n\t *\n\t * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer\n\t * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered\n\t */\n\tPolarAreaChartJSRenderer.addOuterClasses = function(oRm, oControl) {\n\t\toRm.addClass(\"opeui5-polar-area-chartjs\");\n\t};\n\n\n\treturn PolarAreaChartJSRenderer;\n\n}, /* bExport= */ true);",
		"it/designfuture/chartjs/RadarChartJS.js": "// Provides control it.designfuture.chartjs.RadarChartJS\nsap.ui.define([\n\t\"./BaseChartJS\",\n], function (BaseChartJS) {\n\t\"use strict\";\n\t\n\t/**\n\t * Constructor for a new Chart.\n\t *\n\t * @param {string} [sId] id for the new control, generated automatically if no id is given \n\t * @param {object} [mSettings] initial settings for the new control\n\t *\n\t * @class\n\t * QRCode Control to render a QR Code\n\t * @extends sap.m.InputBase\n\t * @version ${version}\n\t *\n\t * @constructor\n\t * @public\n\t * @since 1.40\n\t * @name it.designfuture.chartjs.RadarChartJS\n\t */\n\tvar RadarChartJS =  BaseChartJS.extend(\"it.designfuture.chartjs.RadarChartJS\", {\n\t\t\n\t\tmetadata : {\n\t\t\t//library: 'it.designfuture.chartjs',\n\t\t\tproperties: {\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * The number of degrees to rotate the chart clockwise.\n\t\t\t\t */\n\t\t\t\tstartAngle : {type : \"int\", group : \"Appearance\", defaultValue : 0},\n\t\t\t\t\n\t\t\t},\n\t\t\taggregations: {},\n\t\t\tevents: {}\n\t\t},\n\t\t\n\t\tinit: function() {\n\t\t},\n\t\t\n\t\tonBeforeRendering: function() {\n\t\t\tthis.setChartType(\"radar\");\n\t\t},\n\t\t\n\t\t/////////////////////////////////////\n\t\t// OVERRIDE\n\t\t/////////////////////////////////////\n\t\t\n\t\taddGlobalOptions: function(globalOptions) {\n\t\t\tglobalOptions.startAngle = this.getStartAngle();\n\t\t},\n\t\t\n\t\t//////////////////////////////////////////////\n\t\t// GETTER / SETTER\n\t\t//////////////////////////////////////////////\n\t\t\n\t\t\n\t\t\n\t\t//////////////////////////////////////////////\n\t\t// CHART METHODS\n\t\t//////////////////////////////////////////////\n\t\t\n\t});\n\n\n\treturn RadarChartJS;\n\n}, /* bExport= */ true);",
		"it/designfuture/chartjs/RadarChartJSRenderer.js": "sap.ui.define(['jquery.sap.global', 'sap/ui/core/Renderer', './BaseChartJSRenderer'],\n\tfunction(jQuery, Renderer, BaseChartJSRenderer) {\n\t\"use strict\";\n\n\n\t/**\n\t* RadarChartJS renderer.\n\t* @static\n\t* @namespace\n\t*/\n\tvar RadarChartJSRenderer = Renderer.extend(BaseChartJSRenderer);\n\t\n\t/**\n\t * Adds control specific class\n\t *\n\t * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer\n\t * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered\n\t */\n\tRadarChartJSRenderer.addOuterClasses = function(oRm, oControl) {\n\t\toRm.addClass(\"opeui5-radar-chartjs\");\n\t};\n\n\n\treturn RadarChartJSRenderer;\n\n}, /* bExport= */ true);",
		"it/designfuture/chartjs/3rdparty/Chart.js": "/*!\n * Chart.js v3.3.2\n * https://www.chartjs.org\n * (c) 2021 Chart.js Contributors\n * Released under the MIT License\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n      (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Chart = factory());\n}(this, (function () {\n  'use strict';\n\n  function fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n  }\n  const requestAnimFrame = (function () {\n    if (typeof window === 'undefined') {\n      return function (callback) {\n        return callback();\n      };\n    }\n    return window.requestAnimationFrame;\n  }());\n  function throttled(fn, thisArg, updateFn) {\n    const updateArgs = updateFn || ((args) => Array.prototype.slice.call(args));\n    let ticking = false;\n    let args = [];\n    return function (...rest) {\n      args = updateArgs(rest);\n      if (!ticking) {\n        ticking = true;\n        requestAnimFrame.call(window, () => {\n          ticking = false;\n          fn.apply(thisArg, args);\n        });\n      }\n    };\n  }\n  function debounce(fn, delay) {\n    let timeout;\n    return function () {\n      if (delay) {\n        clearTimeout(timeout);\n        timeout = setTimeout(fn, delay);\n      } else {\n        fn();\n      }\n      return delay;\n    };\n  }\n  const _toLeftRightCenter = (align) => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n  const _alignStartEnd = (align, start, end) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n  const _textX = (align, left, right) => align === 'right' ? right : align === 'center' ? (left + right) / 2 : left;\n\n  class Animator {\n    constructor() {\n      this._request = null;\n      this._charts = new Map();\n      this._running = false;\n      this._lastDate = undefined;\n    }\n    _notify(chart, anims, date, type) {\n      const callbacks = anims.listeners[type];\n      const numSteps = anims.duration;\n      callbacks.forEach(fn => fn({\n        chart,\n        initial: anims.initial,\n        numSteps,\n        currentStep: Math.min(date - anims.start, numSteps)\n      }));\n    }\n    _refresh() {\n      const me = this;\n      if (me._request) {\n        return;\n      }\n      me._running = true;\n      me._request = requestAnimFrame.call(window, () => {\n        me._update();\n        me._request = null;\n        if (me._running) {\n          me._refresh();\n        }\n      });\n    }\n    _update(date = Date.now()) {\n      const me = this;\n      let remaining = 0;\n      me._charts.forEach((anims, chart) => {\n        if (!anims.running || !anims.items.length) {\n          return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        let draw = false;\n        let item;\n        for (; i >= 0; --i) {\n          item = items[i];\n          if (item._active) {\n            if (item._total > anims.duration) {\n              anims.duration = item._total;\n            }\n            item.tick(date);\n            draw = true;\n          } else {\n            items[i] = items[items.length - 1];\n            items.pop();\n          }\n        }\n        if (draw) {\n          chart.draw();\n          me._notify(chart, anims, date, 'progress');\n        }\n        if (!items.length) {\n          anims.running = false;\n          me._notify(chart, anims, date, 'complete');\n          anims.initial = false;\n        }\n        remaining += items.length;\n      });\n      me._lastDate = date;\n      if (remaining === 0) {\n        me._running = false;\n      }\n    }\n    _getAnims(chart) {\n      const charts = this._charts;\n      let anims = charts.get(chart);\n      if (!anims) {\n        anims = {\n          running: false,\n          initial: true,\n          items: [],\n          listeners: {\n            complete: [],\n            progress: []\n          }\n        };\n        charts.set(chart, anims);\n      }\n      return anims;\n    }\n    listen(chart, event, cb) {\n      this._getAnims(chart).listeners[event].push(cb);\n    }\n    add(chart, items) {\n      if (!items || !items.length) {\n        return;\n      }\n      this._getAnims(chart).items.push(...items);\n    }\n    has(chart) {\n      return this._getAnims(chart).items.length > 0;\n    }\n    start(chart) {\n      const anims = this._charts.get(chart);\n      if (!anims) {\n        return;\n      }\n      anims.running = true;\n      anims.start = Date.now();\n      anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n      this._refresh();\n    }\n    running(chart) {\n      if (!this._running) {\n        return false;\n      }\n      const anims = this._charts.get(chart);\n      if (!anims || !anims.running || !anims.items.length) {\n        return false;\n      }\n      return true;\n    }\n    stop(chart) {\n      const anims = this._charts.get(chart);\n      if (!anims || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      for (; i >= 0; --i) {\n        items[i].cancel();\n      }\n      anims.items = [];\n      this._notify(chart, anims, Date.now(), 'complete');\n    }\n    remove(chart) {\n      return this._charts.delete(chart);\n    }\n  }\n  var animator = new Animator();\n\n  /*!\n   * @kurkle/color v0.1.9\n   * https://github.com/kurkle/color#readme\n   * (c) 2020 Jukka Kurkela\n   * Released under the MIT License\n   */\n  const map = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 };\n  const hex = '0123456789ABCDEF';\n  const h1 = (b) => hex[b & 0xF];\n  const h2 = (b) => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\n  const eq = (b) => (((b & 0xF0) >> 4) === (b & 0xF));\n  function isShort(v) {\n    return eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\n  }\n  function hexParse(str) {\n    var len = str.length;\n    var ret;\n    if (str[0] === '#') {\n      if (len === 4 || len === 5) {\n        ret = {\n          r: 255 & map[str[1]] * 17,\n          g: 255 & map[str[2]] * 17,\n          b: 255 & map[str[3]] * 17,\n          a: len === 5 ? map[str[4]] * 17 : 255\n        };\n      } else if (len === 7 || len === 9) {\n        ret = {\n          r: map[str[1]] << 4 | map[str[2]],\n          g: map[str[3]] << 4 | map[str[4]],\n          b: map[str[5]] << 4 | map[str[6]],\n          a: len === 9 ? (map[str[7]] << 4 | map[str[8]]) : 255\n        };\n      }\n    }\n    return ret;\n  }\n  function hexString(v) {\n    var f = isShort(v) ? h1 : h2;\n    return v\n      ? '#' + f(v.r) + f(v.g) + f(v.b) + (v.a < 255 ? f(v.a) : '')\n      : v;\n  }\n  function round(v) {\n    return v + 0.5 | 0;\n  }\n  const lim = (v, l, h) => Math.max(Math.min(v, h), l);\n  function p2b(v) {\n    return lim(round(v * 2.55), 0, 255);\n  }\n  function n2b(v) {\n    return lim(round(v * 255), 0, 255);\n  }\n  function b2n(v) {\n    return lim(round(v / 2.55) / 100, 0, 1);\n  }\n  function n2p(v) {\n    return lim(round(v * 100), 0, 100);\n  }\n  const RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\n  function rgbParse(str) {\n    const m = RGB_RE.exec(str);\n    let a = 255;\n    let r, g, b;\n    if (!m) {\n      return;\n    }\n    if (m[7] !== r) {\n      const v = +m[7];\n      a = 255 & (m[8] ? p2b(v) : v * 255);\n    }\n    r = +m[1];\n    g = +m[3];\n    b = +m[5];\n    r = 255 & (m[2] ? p2b(r) : r);\n    g = 255 & (m[4] ? p2b(g) : g);\n    b = 255 & (m[6] ? p2b(b) : b);\n    return {\n      r: r,\n      g: g,\n      b: b,\n      a: a\n    };\n  }\n  function rgbString(v) {\n    return v && (\n      v.a < 255\n        ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n        : `rgb(${v.r}, ${v.g}, ${v.b})`\n    );\n  }\n  const HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\n  function hsl2rgbn(h, s, l) {\n    const a = s * Math.min(l, 1 - l);\n    const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return [f(0), f(8), f(4)];\n  }\n  function hsv2rgbn(h, s, v) {\n    const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n    return [f(5), f(3), f(1)];\n  }\n  function hwb2rgbn(h, w, b) {\n    const rgb = hsl2rgbn(h, 1, 0.5);\n    let i;\n    if (w + b > 1) {\n      i = 1 / (w + b);\n      w *= i;\n      b *= i;\n    }\n    for (i = 0; i < 3; i++) {\n      rgb[i] *= 1 - w - b;\n      rgb[i] += w;\n    }\n    return rgb;\n  }\n  function rgb2hsl(v) {\n    const range = 255;\n    const r = v.r / range;\n    const g = v.g / range;\n    const b = v.b / range;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const l = (max + min) / 2;\n    let h, s, d;\n    if (max !== min) {\n      d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      h = max === r\n        ? ((g - b) / d) + (g < b ? 6 : 0)\n        : max === g\n          ? (b - r) / d + 2\n          : (r - g) / d + 4;\n      h = h * 60 + 0.5;\n    }\n    return [h | 0, s || 0, l];\n  }\n  function calln(f, a, b, c) {\n    return (\n      Array.isArray(a)\n        ? f(a[0], a[1], a[2])\n        : f(a, b, c)\n    ).map(n2b);\n  }\n  function hsl2rgb(h, s, l) {\n    return calln(hsl2rgbn, h, s, l);\n  }\n  function hwb2rgb(h, w, b) {\n    return calln(hwb2rgbn, h, w, b);\n  }\n  function hsv2rgb(h, s, v) {\n    return calln(hsv2rgbn, h, s, v);\n  }\n  function hue(h) {\n    return (h % 360 + 360) % 360;\n  }\n  function hueParse(str) {\n    const m = HUE_RE.exec(str);\n    let a = 255;\n    let v;\n    if (!m) {\n      return;\n    }\n    if (m[5] !== v) {\n      a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n    }\n    const h = hue(+m[2]);\n    const p1 = +m[3] / 100;\n    const p2 = +m[4] / 100;\n    if (m[1] === 'hwb') {\n      v = hwb2rgb(h, p1, p2);\n    } else if (m[1] === 'hsv') {\n      v = hsv2rgb(h, p1, p2);\n    } else {\n      v = hsl2rgb(h, p1, p2);\n    }\n    return {\n      r: v[0],\n      g: v[1],\n      b: v[2],\n      a: a\n    };\n  }\n  function rotate(v, deg) {\n    var h = rgb2hsl(v);\n    h[0] = hue(h[0] + deg);\n    h = hsl2rgb(h);\n    v.r = h[0];\n    v.g = h[1];\n    v.b = h[2];\n  }\n  function hslString(v) {\n    if (!v) {\n      return;\n    }\n    const a = rgb2hsl(v);\n    const h = a[0];\n    const s = n2p(a[1]);\n    const l = n2p(a[2]);\n    return v.a < 255\n      ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n      : `hsl(${h}, ${s}%, ${l}%)`;\n  }\n  const map$1 = {\n    x: 'dark',\n    Z: 'light',\n    Y: 're',\n    X: 'blu',\n    W: 'gr',\n    V: 'medium',\n    U: 'slate',\n    A: 'ee',\n    T: 'ol',\n    S: 'or',\n    B: 'ra',\n    C: 'lateg',\n    D: 'ights',\n    R: 'in',\n    Q: 'turquois',\n    E: 'hi',\n    P: 'ro',\n    O: 'al',\n    N: 'le',\n    M: 'de',\n    L: 'yello',\n    F: 'en',\n    K: 'ch',\n    G: 'arks',\n    H: 'ea',\n    I: 'ightg',\n    J: 'wh'\n  };\n  const names = {\n    OiceXe: 'f0f8ff',\n    antiquewEte: 'faebd7',\n    aqua: 'ffff',\n    aquamarRe: '7fffd4',\n    azuY: 'f0ffff',\n    beige: 'f5f5dc',\n    bisque: 'ffe4c4',\n    black: '0',\n    blanKedOmond: 'ffebcd',\n    Xe: 'ff',\n    XeviTet: '8a2be2',\n    bPwn: 'a52a2a',\n    burlywood: 'deb887',\n    caMtXe: '5f9ea0',\n    KartYuse: '7fff00',\n    KocTate: 'd2691e',\n    cSO: 'ff7f50',\n    cSnflowerXe: '6495ed',\n    cSnsilk: 'fff8dc',\n    crimson: 'dc143c',\n    cyan: 'ffff',\n    xXe: '8b',\n    xcyan: '8b8b',\n    xgTMnPd: 'b8860b',\n    xWay: 'a9a9a9',\n    xgYF: '6400',\n    xgYy: 'a9a9a9',\n    xkhaki: 'bdb76b',\n    xmagFta: '8b008b',\n    xTivegYF: '556b2f',\n    xSange: 'ff8c00',\n    xScEd: '9932cc',\n    xYd: '8b0000',\n    xsOmon: 'e9967a',\n    xsHgYF: '8fbc8f',\n    xUXe: '483d8b',\n    xUWay: '2f4f4f',\n    xUgYy: '2f4f4f',\n    xQe: 'ced1',\n    xviTet: '9400d3',\n    dAppRk: 'ff1493',\n    dApskyXe: 'bfff',\n    dimWay: '696969',\n    dimgYy: '696969',\n    dodgerXe: '1e90ff',\n    fiYbrick: 'b22222',\n    flSOwEte: 'fffaf0',\n    foYstWAn: '228b22',\n    fuKsia: 'ff00ff',\n    gaRsbSo: 'dcdcdc',\n    ghostwEte: 'f8f8ff',\n    gTd: 'ffd700',\n    gTMnPd: 'daa520',\n    Way: '808080',\n    gYF: '8000',\n    gYFLw: 'adff2f',\n    gYy: '808080',\n    honeyMw: 'f0fff0',\n    hotpRk: 'ff69b4',\n    RdianYd: 'cd5c5c',\n    Rdigo: '4b0082',\n    ivSy: 'fffff0',\n    khaki: 'f0e68c',\n    lavFMr: 'e6e6fa',\n    lavFMrXsh: 'fff0f5',\n    lawngYF: '7cfc00',\n    NmoncEffon: 'fffacd',\n    ZXe: 'add8e6',\n    ZcSO: 'f08080',\n    Zcyan: 'e0ffff',\n    ZgTMnPdLw: 'fafad2',\n    ZWay: 'd3d3d3',\n    ZgYF: '90ee90',\n    ZgYy: 'd3d3d3',\n    ZpRk: 'ffb6c1',\n    ZsOmon: 'ffa07a',\n    ZsHgYF: '20b2aa',\n    ZskyXe: '87cefa',\n    ZUWay: '778899',\n    ZUgYy: '778899',\n    ZstAlXe: 'b0c4de',\n    ZLw: 'ffffe0',\n    lime: 'ff00',\n    limegYF: '32cd32',\n    lRF: 'faf0e6',\n    magFta: 'ff00ff',\n    maPon: '800000',\n    VaquamarRe: '66cdaa',\n    VXe: 'cd',\n    VScEd: 'ba55d3',\n    VpurpN: '9370db',\n    VsHgYF: '3cb371',\n    VUXe: '7b68ee',\n    VsprRggYF: 'fa9a',\n    VQe: '48d1cc',\n    VviTetYd: 'c71585',\n    midnightXe: '191970',\n    mRtcYam: 'f5fffa',\n    mistyPse: 'ffe4e1',\n    moccasR: 'ffe4b5',\n    navajowEte: 'ffdead',\n    navy: '80',\n    Tdlace: 'fdf5e6',\n    Tive: '808000',\n    TivedBb: '6b8e23',\n    Sange: 'ffa500',\n    SangeYd: 'ff4500',\n    ScEd: 'da70d6',\n    pOegTMnPd: 'eee8aa',\n    pOegYF: '98fb98',\n    pOeQe: 'afeeee',\n    pOeviTetYd: 'db7093',\n    papayawEp: 'ffefd5',\n    pHKpuff: 'ffdab9',\n    peru: 'cd853f',\n    pRk: 'ffc0cb',\n    plum: 'dda0dd',\n    powMrXe: 'b0e0e6',\n    purpN: '800080',\n    YbeccapurpN: '663399',\n    Yd: 'ff0000',\n    Psybrown: 'bc8f8f',\n    PyOXe: '4169e1',\n    saddNbPwn: '8b4513',\n    sOmon: 'fa8072',\n    sandybPwn: 'f4a460',\n    sHgYF: '2e8b57',\n    sHshell: 'fff5ee',\n    siFna: 'a0522d',\n    silver: 'c0c0c0',\n    skyXe: '87ceeb',\n    UXe: '6a5acd',\n    UWay: '708090',\n    UgYy: '708090',\n    snow: 'fffafa',\n    sprRggYF: 'ff7f',\n    stAlXe: '4682b4',\n    tan: 'd2b48c',\n    teO: '8080',\n    tEstN: 'd8bfd8',\n    tomato: 'ff6347',\n    Qe: '40e0d0',\n    viTet: 'ee82ee',\n    JHt: 'f5deb3',\n    wEte: 'ffffff',\n    wEtesmoke: 'f5f5f5',\n    Lw: 'ffff00',\n    LwgYF: '9acd32'\n  };\n  function unpack() {\n    const unpacked = {};\n    const keys = Object.keys(names);\n    const tkeys = Object.keys(map$1);\n    let i, j, k, ok, nk;\n    for (i = 0; i < keys.length; i++) {\n      ok = nk = keys[i];\n      for (j = 0; j < tkeys.length; j++) {\n        k = tkeys[j];\n        nk = nk.replace(k, map$1[k]);\n      }\n      k = parseInt(names[ok], 16);\n      unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n    }\n    return unpacked;\n  }\n  let names$1;\n  function nameParse(str) {\n    if (!names$1) {\n      names$1 = unpack();\n      names$1.transparent = [0, 0, 0, 0];\n    }\n    const a = names$1[str.toLowerCase()];\n    return a && {\n      r: a[0],\n      g: a[1],\n      b: a[2],\n      a: a.length === 4 ? a[3] : 255\n    };\n  }\n  function modHSL(v, i, ratio) {\n    if (v) {\n      let tmp = rgb2hsl(v);\n      tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n      tmp = hsl2rgb(tmp);\n      v.r = tmp[0];\n      v.g = tmp[1];\n      v.b = tmp[2];\n    }\n  }\n  function clone$1(v, proto) {\n    return v ? Object.assign(proto || {}, v) : v;\n  }\n  function fromObject(input) {\n    var v = { r: 0, g: 0, b: 0, a: 255 };\n    if (Array.isArray(input)) {\n      if (input.length >= 3) {\n        v = { r: input[0], g: input[1], b: input[2], a: 255 };\n        if (input.length > 3) {\n          v.a = n2b(input[3]);\n        }\n      }\n    } else {\n      v = clone$1(input, { r: 0, g: 0, b: 0, a: 1 });\n      v.a = n2b(v.a);\n    }\n    return v;\n  }\n  function functionParse(str) {\n    if (str.charAt(0) === 'r') {\n      return rgbParse(str);\n    }\n    return hueParse(str);\n  }\n  class Color {\n    constructor(input) {\n      if (input instanceof Color) {\n        return input;\n      }\n      const type = typeof input;\n      let v;\n      if (type === 'object') {\n        v = fromObject(input);\n      } else if (type === 'string') {\n        v = hexParse(input) || nameParse(input) || functionParse(input);\n      }\n      this._rgb = v;\n      this._valid = !!v;\n    }\n    get valid() {\n      return this._valid;\n    }\n    get rgb() {\n      var v = clone$1(this._rgb);\n      if (v) {\n        v.a = b2n(v.a);\n      }\n      return v;\n    }\n    set rgb(obj) {\n      this._rgb = fromObject(obj);\n    }\n    rgbString() {\n      return this._valid ? rgbString(this._rgb) : this._rgb;\n    }\n    hexString() {\n      return this._valid ? hexString(this._rgb) : this._rgb;\n    }\n    hslString() {\n      return this._valid ? hslString(this._rgb) : this._rgb;\n    }\n    mix(color, weight) {\n      const me = this;\n      if (color) {\n        const c1 = me.rgb;\n        const c2 = color.rgb;\n        let w2;\n        const p = weight === w2 ? 0.5 : weight;\n        const w = 2 * p - 1;\n        const a = c1.a - c2.a;\n        const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        w2 = 1 - w1;\n        c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n        c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n        c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n        c1.a = p * c1.a + (1 - p) * c2.a;\n        me.rgb = c1;\n      }\n      return me;\n    }\n    clone() {\n      return new Color(this.rgb);\n    }\n    alpha(a) {\n      this._rgb.a = n2b(a);\n      return this;\n    }\n    clearer(ratio) {\n      const rgb = this._rgb;\n      rgb.a *= 1 - ratio;\n      return this;\n    }\n    greyscale() {\n      const rgb = this._rgb;\n      const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n      rgb.r = rgb.g = rgb.b = val;\n      return this;\n    }\n    opaquer(ratio) {\n      const rgb = this._rgb;\n      rgb.a *= 1 + ratio;\n      return this;\n    }\n    negate() {\n      const v = this._rgb;\n      v.r = 255 - v.r;\n      v.g = 255 - v.g;\n      v.b = 255 - v.b;\n      return this;\n    }\n    lighten(ratio) {\n      modHSL(this._rgb, 2, ratio);\n      return this;\n    }\n    darken(ratio) {\n      modHSL(this._rgb, 2, -ratio);\n      return this;\n    }\n    saturate(ratio) {\n      modHSL(this._rgb, 1, ratio);\n      return this;\n    }\n    desaturate(ratio) {\n      modHSL(this._rgb, 1, -ratio);\n      return this;\n    }\n    rotate(deg) {\n      rotate(this._rgb, deg);\n      return this;\n    }\n  }\n  function index_esm(input) {\n    return new Color(input);\n  }\n\n  const isPatternOrGradient = (value) => value instanceof CanvasGradient || value instanceof CanvasPattern;\n  function color(value) {\n    return isPatternOrGradient(value) ? value : index_esm(value);\n  }\n  function getHoverColor(value) {\n    return isPatternOrGradient(value)\n      ? value\n      : index_esm(value).saturate(0.5).darken(0.1).hexString();\n  }\n\n  function noop() { }\n  const uid = (function () {\n    let id = 0;\n    return function () {\n      return id++;\n    };\n  }());\n  function isNullOrUndef(value) {\n    return value === null || typeof value === 'undefined';\n  }\n  function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n      return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {\n      return true;\n    }\n    return false;\n  }\n  function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n  }\n  const isNumberFinite = (value) => (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n  function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n  }\n  function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n  }\n  const toPercentage = (value, dimension) =>\n    typeof value === 'string' && value.endsWith('%') ?\n      parseFloat(value) / 100\n      : value / dimension;\n  const toDimension = (value, dimension) =>\n    typeof value === 'string' && value.endsWith('%') ?\n      parseFloat(value) / 100 * dimension\n      : +value;\n  function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n      return fn.apply(thisArg, args);\n    }\n  }\n  function each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n      len = loopable.length;\n      if (reverse) {\n        for (i = len - 1; i >= 0; i--) {\n          fn.call(thisArg, loopable[i], i);\n        }\n      } else {\n        for (i = 0; i < len; i++) {\n          fn.call(thisArg, loopable[i], i);\n        }\n      }\n    } else if (isObject(loopable)) {\n      keys = Object.keys(loopable);\n      len = keys.length;\n      for (i = 0; i < len; i++) {\n        fn.call(thisArg, loopable[keys[i]], keys[i]);\n      }\n    }\n  }\n  function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n      return false;\n    }\n    for (i = 0, ilen = a0.length; i < ilen; ++i) {\n      v0 = a0[i];\n      v1 = a1[i];\n      if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function clone(source) {\n    if (isArray(source)) {\n      return source.map(clone);\n    }\n    if (isObject(source)) {\n      const target = Object.create(null);\n      const keys = Object.keys(source);\n      const klen = keys.length;\n      let k = 0;\n      for (; k < klen; ++k) {\n        target[keys[k]] = clone(source[keys[k]]);\n      }\n      return target;\n    }\n    return source;\n  }\n  function isValidKey(key) {\n    return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;\n  }\n  function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n      return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n      merge(tval, sval, options);\n    } else {\n      target[key] = clone(sval);\n    }\n  }\n  function merge(target, source, options) {\n    const sources = isArray(source) ? source : [source];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n      return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    for (let i = 0; i < ilen; ++i) {\n      source = sources[i];\n      if (!isObject(source)) {\n        continue;\n      }\n      const keys = Object.keys(source);\n      for (let k = 0, klen = keys.length; k < klen; ++k) {\n        merger(keys[k], target, source, options);\n      }\n    }\n    return target;\n  }\n  function mergeIf(target, source) {\n    return merge(target, source, { merger: _mergerIf });\n  }\n  function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n      return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n      mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n      target[key] = clone(sval);\n    }\n  }\n  function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n      console.warn(scope + ': \"' + previous +\n        '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n  }\n  const emptyString = '';\n  const dot = '.';\n  function indexOfDotOrLength(key, start) {\n    const idx = key.indexOf(dot, start);\n    return idx === -1 ? key.length : idx;\n  }\n  function resolveObjectKey(obj, key) {\n    if (key === emptyString) {\n      return obj;\n    }\n    let pos = 0;\n    let idx = indexOfDotOrLength(key, pos);\n    while (obj && idx > pos) {\n      obj = obj[key.substr(pos, idx - pos)];\n      pos = idx + 1;\n      idx = indexOfDotOrLength(key, pos);\n    }\n    return obj;\n  }\n  function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  const defined = (value) => typeof value !== 'undefined';\n  const isFunction = (value) => typeof value === 'function';\n  const setsEqual = (a, b) => {\n    if (a.size !== b.size) {\n      return false;\n    }\n    for (const item of a) {\n      if (!b.has(item)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const overrides = Object.create(null);\n  const descriptors = Object.create(null);\n  function getScope$1(node, key) {\n    if (!key) {\n      return node;\n    }\n    const keys = key.split('.');\n    for (let i = 0, n = keys.length; i < n; ++i) {\n      const k = keys[i];\n      node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n  }\n  function set(root, scope, values) {\n    if (typeof scope === 'string') {\n      return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n  }\n  class Defaults {\n    constructor(_descriptors) {\n      this.animation = undefined;\n      this.backgroundColor = 'rgba(0,0,0,0.1)';\n      this.borderColor = 'rgba(0,0,0,0.1)';\n      this.color = '#666';\n      this.datasets = {};\n      this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();\n      this.elements = {};\n      this.events = [\n        'mousemove',\n        'mouseout',\n        'click',\n        'touchstart',\n        'touchmove'\n      ];\n      this.font = {\n        family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n        size: 12,\n        style: 'normal',\n        lineHeight: 1.2,\n        weight: null\n      };\n      this.hover = {};\n      this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);\n      this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);\n      this.hoverColor = (ctx, options) => getHoverColor(options.color);\n      this.indexAxis = 'x';\n      this.interaction = {\n        mode: 'nearest',\n        intersect: true\n      };\n      this.maintainAspectRatio = true;\n      this.onHover = null;\n      this.onClick = null;\n      this.parsing = true;\n      this.plugins = {};\n      this.responsive = true;\n      this.scale = undefined;\n      this.scales = {};\n      this.showLine = true;\n      this.describe(_descriptors);\n    }\n    set(scope, values) {\n      return set(this, scope, values);\n    }\n    get(scope) {\n      return getScope$1(this, scope);\n    }\n    describe(scope, values) {\n      return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n      return set(overrides, scope, values);\n    }\n    route(scope, name, targetScope, targetName) {\n      const scopeObject = getScope$1(this, scope);\n      const targetScopeObject = getScope$1(this, targetScope);\n      const privateName = '_' + name;\n      Object.defineProperties(scopeObject, {\n        [privateName]: {\n          value: scopeObject[name],\n          writable: true\n        },\n        [name]: {\n          enumerable: true,\n          get() {\n            const local = this[privateName];\n            const target = targetScopeObject[targetName];\n            if (isObject(local)) {\n              return Object.assign({}, target, local);\n            }\n            return valueOrDefault(local, target);\n          },\n          set(value) {\n            this[privateName] = value;\n          }\n        }\n      });\n    }\n  }\n  var defaults = new Defaults({\n    _scriptable: (name) => !name.startsWith('on'),\n    _indexable: (name) => name !== 'events',\n    hover: {\n      _fallback: 'interaction'\n    },\n    interaction: {\n      _scriptable: false,\n      _indexable: false,\n    }\n  });\n\n  const PI = Math.PI;\n  const TAU = 2 * PI;\n  const PITAU = TAU + PI;\n  const INFINITY = Number.POSITIVE_INFINITY;\n  const RAD_PER_DEG = PI / 180;\n  const HALF_PI = PI / 2;\n  const QUARTER_PI = PI / 4;\n  const TWO_THIRDS_PI = PI * 2 / 3;\n  const log10 = Math.log10;\n  const sign = Math.sign;\n  function niceNum(range) {\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n  }\n  function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for (i = 1; i < sqrt; i++) {\n      if (value % i === 0) {\n        result.push(i);\n        result.push(value / i);\n      }\n    }\n    if (sqrt === (sqrt | 0)) {\n      result.push(sqrt);\n    }\n    result.sort((a, b) => a - b).pop();\n    return result;\n  }\n  function isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n  function almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n  }\n  function almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);\n  }\n  function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for (i = 0, ilen = array.length; i < ilen; i++) {\n      value = array[i][property];\n      if (!isNaN(value)) {\n        target.min = Math.min(target.min, value);\n        target.max = Math.max(target.max, value);\n      }\n    }\n  }\n  function toRadians(degrees) {\n    return degrees * (PI / 180);\n  }\n  function toDegrees(radians) {\n    return radians * (180 / PI);\n  }\n  function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n      return;\n    }\n    let e = 1;\n    let p = 0;\n    while (Math.round(x * e) / e !== x) {\n      e *= 10;\n      p++;\n    }\n    return p;\n  }\n  function getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < (-0.5 * PI)) {\n      angle += TAU;\n    }\n    return {\n      angle,\n      distance: radialDistanceFromCenter\n    };\n  }\n  function distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n  }\n  function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n  }\n  function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n  }\n  function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || (sameAngleIsFullCircle && s === e)\n      || (angleToStart > angleToEnd && startToAngle < endToAngle);\n  }\n  function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n  }\n  function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n  }\n\n  function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n      return null;\n    }\n    return (font.style ? font.style + ' ' : '')\n      + (font.weight ? font.weight + ' ' : '')\n      + font.size + 'px '\n      + font.family;\n  }\n  function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n      textWidth = data[string] = ctx.measureText(string).width;\n      gc.push(string);\n    }\n    if (textWidth > longest) {\n      longest = textWidth;\n    }\n    return longest;\n  }\n  function _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n      data = cache.data = {};\n      gc = cache.garbageCollect = [];\n      cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for (i = 0; i < ilen; i++) {\n      thing = arrayOfThings[i];\n      if (thing !== undefined && thing !== null && isArray(thing) !== true) {\n        longest = _measureText(ctx, data, gc, longest, thing);\n      } else if (isArray(thing)) {\n        for (j = 0, jlen = thing.length; j < jlen; j++) {\n          nestedThing = thing[j];\n          if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n            longest = _measureText(ctx, data, gc, longest, nestedThing);\n          }\n        }\n      }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n      for (i = 0; i < gcLen; i++) {\n        delete data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n    return longest;\n  }\n  function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n  }\n  function clearCanvas(canvas, ctx) {\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n  }\n  function drawPoint(ctx, options, x, y) {\n    let type, xOffset, yOffset, size, cornerRadius;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n      type = style.toString();\n      if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n        ctx.save();\n        ctx.translate(x, y);\n        ctx.rotate(rad);\n        ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n        ctx.restore();\n        return;\n      }\n    }\n    if (isNaN(radius) || radius <= 0) {\n      return;\n    }\n    ctx.beginPath();\n    switch (style) {\n      default:\n        ctx.arc(x, y, radius, 0, TAU);\n        ctx.closePath();\n        break;\n      case 'triangle':\n        ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n        rad += TWO_THIRDS_PI;\n        ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n        rad += TWO_THIRDS_PI;\n        ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n        ctx.closePath();\n        break;\n      case 'rectRounded':\n        cornerRadius = radius * 0.516;\n        size = radius - cornerRadius;\n        xOffset = Math.cos(rad + QUARTER_PI) * size;\n        yOffset = Math.sin(rad + QUARTER_PI) * size;\n        ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n        ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n        ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n        ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n        ctx.closePath();\n        break;\n      case 'rect':\n        if (!rotation) {\n          size = Math.SQRT1_2 * radius;\n          ctx.rect(x - size, y - size, 2 * size, 2 * size);\n          break;\n        }\n        rad += QUARTER_PI;\n      case 'rectRot':\n        xOffset = Math.cos(rad) * radius;\n        yOffset = Math.sin(rad) * radius;\n        ctx.moveTo(x - xOffset, y - yOffset);\n        ctx.lineTo(x + yOffset, y - xOffset);\n        ctx.lineTo(x + xOffset, y + yOffset);\n        ctx.lineTo(x - yOffset, y + xOffset);\n        ctx.closePath();\n        break;\n      case 'crossRot':\n        rad += QUARTER_PI;\n      case 'cross':\n        xOffset = Math.cos(rad) * radius;\n        yOffset = Math.sin(rad) * radius;\n        ctx.moveTo(x - xOffset, y - yOffset);\n        ctx.lineTo(x + xOffset, y + yOffset);\n        ctx.moveTo(x + yOffset, y - xOffset);\n        ctx.lineTo(x - yOffset, y + xOffset);\n        break;\n      case 'star':\n        xOffset = Math.cos(rad) * radius;\n        yOffset = Math.sin(rad) * radius;\n        ctx.moveTo(x - xOffset, y - yOffset);\n        ctx.lineTo(x + xOffset, y + yOffset);\n        ctx.moveTo(x + yOffset, y - xOffset);\n        ctx.lineTo(x - yOffset, y + xOffset);\n        rad += QUARTER_PI;\n        xOffset = Math.cos(rad) * radius;\n        yOffset = Math.sin(rad) * radius;\n        ctx.moveTo(x - xOffset, y - yOffset);\n        ctx.lineTo(x + xOffset, y + yOffset);\n        ctx.moveTo(x + yOffset, y - xOffset);\n        ctx.lineTo(x - yOffset, y + xOffset);\n        break;\n      case 'line':\n        xOffset = Math.cos(rad) * radius;\n        yOffset = Math.sin(rad) * radius;\n        ctx.moveTo(x - xOffset, y - yOffset);\n        ctx.lineTo(x + xOffset, y + yOffset);\n        break;\n      case 'dash':\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n        break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5;\n    return point && point.x > area.left - margin && point.x < area.right + margin &&\n      point.y > area.top - margin && point.y < area.bottom + margin;\n  }\n  function clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n  }\n  function unclipArea(ctx) {\n    ctx.restore();\n  }\n  function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n      return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n      const midpoint = (previous.x + target.x) / 2.0;\n      ctx.lineTo(midpoint, previous.y);\n      ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n      ctx.lineTo(previous.x, target.y);\n    } else {\n      ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n  }\n  function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n      return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(\n      flip ? previous.cp1x : previous.cp2x,\n      flip ? previous.cp1y : previous.cp2y,\n      flip ? target.cp2x : target.cp1x,\n      flip ? target.cp2y : target.cp1y,\n      target.x,\n      target.y);\n  }\n  function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [text];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    if (opts.translation) {\n      ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n      ctx.rotate(opts.rotation);\n    }\n    ctx.font = font.string;\n    if (opts.color) {\n      ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n      ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n      ctx.textBaseline = opts.textBaseline;\n    }\n    for (i = 0; i < lines.length; ++i) {\n      line = lines[i];\n      if (stroke) {\n        if (opts.strokeColor) {\n          ctx.strokeStyle = opts.strokeColor;\n        }\n        if (!isNullOrUndef(opts.strokeWidth)) {\n          ctx.lineWidth = opts.strokeWidth;\n        }\n        ctx.strokeText(line, x, y, opts.maxWidth);\n      }\n      ctx.fillText(line, x, y, opts.maxWidth);\n      if (opts.strikethrough || opts.underline) {\n        const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n      }\n      y += font.lineHeight;\n    }\n    ctx.restore();\n  }\n  function addRoundedRectPath(ctx, rect) {\n    const { x, y, w, h, radius } = rect;\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    ctx.lineTo(x + w, y + radius.topRight);\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    ctx.lineTo(x + radius.topLeft, y);\n  }\n\n  function _lookup(table, value, cmp) {\n    cmp = cmp || ((index) => table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while (hi - lo > 1) {\n      mid = (lo + hi) >> 1;\n      if (cmp(mid)) {\n        lo = mid;\n      } else {\n        hi = mid;\n      }\n    }\n    return { lo, hi };\n  }\n  const _lookupByKey = (table, key, value) =>\n    _lookup(table, value, index => table[index][key] < value);\n  const _rlookupByKey = (table, key, value) =>\n    _lookup(table, value, index => table[index][key] >= value);\n  function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while (start < end && values[start] < min) {\n      start++;\n    }\n    while (end > start && values[end - 1] > max) {\n      end--;\n    }\n    return start > 0 || end < values.length\n      ? values.slice(start, end)\n      : values;\n  }\n  const arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\n  function listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n      array._chartjs.listeners.push(listener);\n      return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n      configurable: true,\n      enumerable: false,\n      value: {\n        listeners: [listener]\n      }\n    });\n    arrayEvents.forEach((key) => {\n      const method = '_onData' + _capitalize(key);\n      const base = array[key];\n      Object.defineProperty(array, key, {\n        configurable: true,\n        enumerable: false,\n        value(...args) {\n          const res = base.apply(this, args);\n          array._chartjs.listeners.forEach((object) => {\n            if (typeof object[method] === 'function') {\n              object[method](...args);\n            }\n          });\n          return res;\n        }\n      });\n    });\n  }\n  function unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n      return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n      return;\n    }\n    arrayEvents.forEach((key) => {\n      delete array[key];\n    });\n    delete array._chartjs;\n  }\n  function _arrayUnique(items) {\n    const set = new Set();\n    let i, ilen;\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      set.add(items[i]);\n    }\n    if (set.size === ilen) {\n      return items;\n    }\n    const result = [];\n    set.forEach(item => {\n      result.push(item);\n    });\n    return result;\n  }\n\n  function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n      parent = parent.host;\n    }\n    return parent;\n  }\n  function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n      valueInPixels = parseInt(styleValue, 10);\n      if (styleValue.indexOf('%') !== -1) {\n        valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n      }\n    } else {\n      valueInPixels = styleValue;\n    }\n    return valueInPixels;\n  }\n  const getComputedStyle = (element) => window.getComputedStyle(element, null);\n  function getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n  }\n  const positions = ['top', 'right', 'bottom', 'left'];\n  function getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for (let i = 0; i < 4; i++) {\n      const pos = positions[i];\n      result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n  }\n  const useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);\n  function getCanvasPosition(evt, canvas) {\n    const e = evt.native || evt;\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX, offsetY } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n      x = offsetX;\n      y = offsetY;\n    } else {\n      const rect = canvas.getBoundingClientRect();\n      x = source.clientX - rect.left;\n      y = source.clientY - rect.top;\n      box = true;\n    }\n    return { x, y, box };\n  }\n  function getRelativePosition$1(evt, chart) {\n    const { canvas, currentDevicePixelRatio } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x, y, box } = getCanvasPosition(evt, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width, height } = chart;\n    if (borderBox) {\n      width -= paddings.width + borders.width;\n      height -= paddings.height + borders.height;\n    }\n    return {\n      x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n      y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n  }\n  function getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n      const container = _getParentNode(canvas);\n      if (!container) {\n        width = canvas.clientWidth;\n        height = canvas.clientHeight;\n      } else {\n        const rect = container.getBoundingClientRect();\n        const containerStyle = getComputedStyle(container);\n        const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n        const containerPadding = getPositionedStyle(containerStyle, 'padding');\n        width = rect.width - containerPadding.width - containerBorder.width;\n        height = rect.height - containerPadding.height - containerBorder.height;\n        maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n        maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n      }\n    }\n    return {\n      width,\n      height,\n      maxWidth: maxWidth || INFINITY,\n      maxHeight: maxHeight || INFINITY\n    };\n  }\n  const round1 = v => Math.round(v * 10) / 10;\n  function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width, height } = containerSize;\n    if (style.boxSizing === 'content-box') {\n      const borders = getPositionedStyle(style, 'border', 'width');\n      const paddings = getPositionedStyle(style, 'padding');\n      width -= paddings.width + borders.width;\n      height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n      height = round1(width / 2);\n    }\n    return {\n      width,\n      height\n    };\n  }\n  function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = deviceHeight / pixelRatio;\n    chart.width = deviceWidth / pixelRatio;\n    const canvas = chart.canvas;\n    if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {\n      canvas.style.height = `${chart.height}px`;\n      canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio\n      || canvas.height !== deviceHeight\n      || canvas.width !== deviceWidth) {\n      chart.currentDevicePixelRatio = pixelRatio;\n      canvas.height = deviceHeight;\n      canvas.width = deviceWidth;\n      chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n      return true;\n    }\n    return false;\n  }\n  const supportsEventListenerOptions = (function () {\n    let passiveSupported = false;\n    try {\n      const options = {\n        get passive() {\n          passiveSupported = true;\n          return false;\n        }\n      };\n      window.addEventListener('test', null, options);\n      window.removeEventListener('test', null, options);\n    } catch (e) {\n    }\n    return passiveSupported;\n  }());\n  function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n  }\n\n  function getRelativePosition(e, chart) {\n    if ('native' in e) {\n      return {\n        x: e.x,\n        y: e.y\n      };\n    }\n    return getRelativePosition$1(e, chart);\n  }\n  function evaluateAllVisibleItems(chart, handler) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    let index, data, element;\n    for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n      ({ index, data } = metasets[i]);\n      for (let j = 0, jlen = data.length; j < jlen; ++j) {\n        element = data[j];\n        if (!element.skip) {\n          handler(element, index, j);\n        }\n      }\n    }\n  }\n  function binarySearch(metaset, axis, value, intersect) {\n    const { controller, data, _sorted } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && _sorted && data.length) {\n      const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n      if (!intersect) {\n        return lookupMethod(data, axis, value);\n      } else if (controller._sharedOptions) {\n        const el = data[0];\n        const range = typeof el.getRange === 'function' && el.getRange(axis);\n        if (range) {\n          const start = lookupMethod(data, axis, value - range);\n          const end = lookupMethod(data, axis, value + range);\n          return { lo: start.lo, hi: end.hi };\n        }\n      }\n    }\n    return { lo: 0, hi: data.length - 1 };\n  }\n  function optimizedEvaluateItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const { index, data } = metasets[i];\n      const { lo, hi } = binarySearch(metasets[i], axis, value, intersect);\n      for (let j = lo; j <= hi; ++j) {\n        const element = data[j];\n        if (!element.skip) {\n          handler(element, index, j);\n        }\n      }\n    }\n  }\n  function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function (pt1, pt2) {\n      const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n      const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n      return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n  }\n  function getIntersectItems(chart, position, axis, useFinalPosition) {\n    const items = [];\n    if (!_isPointInArea(position, chart.chartArea, chart._minPadding)) {\n      return items;\n    }\n    const evaluationFunc = function (element, datasetIndex, index) {\n      if (element.inRange(position.x, position.y, useFinalPosition)) {\n        items.push({ element, datasetIndex, index });\n      }\n    };\n    optimizedEvaluateItems(chart, axis, position, evaluationFunc, true);\n    return items;\n  }\n  function getNearestItems(chart, position, axis, intersect, useFinalPosition) {\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    let items = [];\n    if (!_isPointInArea(position, chart.chartArea, chart._minPadding)) {\n      return items;\n    }\n    const evaluationFunc = function (element, datasetIndex, index) {\n      if (intersect && !element.inRange(position.x, position.y, useFinalPosition)) {\n        return;\n      }\n      const center = element.getCenterPoint(useFinalPosition);\n      if (!_isPointInArea(center, chart.chartArea, chart._minPadding)) {\n        return;\n      }\n      const distance = distanceMetric(position, center);\n      if (distance < minDistance) {\n        items = [{ element, datasetIndex, index }];\n        minDistance = distance;\n      } else if (distance === minDistance) {\n        items.push({ element, datasetIndex, index });\n      }\n    };\n    optimizedEvaluateItems(chart, axis, position, evaluationFunc);\n    return items;\n  }\n  function getAxisItems(chart, e, options, useFinalPosition) {\n    const position = getRelativePosition(e, chart);\n    const items = [];\n    const axis = options.axis;\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateAllVisibleItems(chart, (element, datasetIndex, index) => {\n      if (element[rangeMethod](position[axis], useFinalPosition)) {\n        items.push({ element, datasetIndex, index });\n      }\n      if (element.inRange(position.x, position.y, useFinalPosition)) {\n        intersectsItem = true;\n      }\n    });\n    if (options.intersect && !intersectsItem) {\n      return [];\n    }\n    return items;\n  }\n  var Interaction = {\n    modes: {\n      index(chart, e, options, useFinalPosition) {\n        const position = getRelativePosition(e, chart);\n        const axis = options.axis || 'x';\n        const items = options.intersect\n          ? getIntersectItems(chart, position, axis, useFinalPosition)\n          : getNearestItems(chart, position, axis, false, useFinalPosition);\n        const elements = [];\n        if (!items.length) {\n          return [];\n        }\n        chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n          const index = items[0].index;\n          const element = meta.data[index];\n          if (element && !element.skip) {\n            elements.push({ element, datasetIndex: meta.index, index });\n          }\n        });\n        return elements;\n      },\n      dataset(chart, e, options, useFinalPosition) {\n        const position = getRelativePosition(e, chart);\n        const axis = options.axis || 'xy';\n        let items = options.intersect\n          ? getIntersectItems(chart, position, axis, useFinalPosition) :\n          getNearestItems(chart, position, axis, false, useFinalPosition);\n        if (items.length > 0) {\n          const datasetIndex = items[0].datasetIndex;\n          const data = chart.getDatasetMeta(datasetIndex).data;\n          items = [];\n          for (let i = 0; i < data.length; ++i) {\n            items.push({ element: data[i], datasetIndex, index: i });\n          }\n        }\n        return items;\n      },\n      point(chart, e, options, useFinalPosition) {\n        const position = getRelativePosition(e, chart);\n        const axis = options.axis || 'xy';\n        return getIntersectItems(chart, position, axis, useFinalPosition);\n      },\n      nearest(chart, e, options, useFinalPosition) {\n        const position = getRelativePosition(e, chart);\n        const axis = options.axis || 'xy';\n        return getNearestItems(chart, position, axis, options.intersect, useFinalPosition);\n      },\n      x(chart, e, options, useFinalPosition) {\n        options.axis = 'x';\n        return getAxisItems(chart, e, options, useFinalPosition);\n      },\n      y(chart, e, options, useFinalPosition) {\n        options.axis = 'y';\n        return getAxisItems(chart, e, options, useFinalPosition);\n      }\n    }\n  };\n\n  const LINE_HEIGHT = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\n  const FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\n  function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n      return size * 1.2;\n    }\n    value = +matches[2];\n    switch (matches[3]) {\n      case 'px':\n        return value;\n      case '%':\n        value /= 100;\n        break;\n    }\n    return size * value;\n  }\n  const numberOrZero$1 = v => +v || 0;\n  function _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value)\n      ? objProps\n        ? prop => valueOrDefault(value[prop], value[props[prop]])\n        : prop => value[prop]\n      : () => value;\n    for (const prop of keys) {\n      ret[prop] = numberOrZero$1(read(prop));\n    }\n    return ret;\n  }\n  function toTRBL(value) {\n    return _readValueToProps(value, { top: 'y', right: 'x', bottom: 'y', left: 'x' });\n  }\n  function toTRBLCorners(value) {\n    return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);\n  }\n  function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n  }\n  function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n      size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n      console.warn('Invalid font style specified: \"' + style + '\"');\n      style = '';\n    }\n    const font = {\n      family: valueOrDefault(options.family, fallback.family),\n      lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n      size,\n      style,\n      weight: valueOrDefault(options.weight, fallback.weight),\n      string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n  }\n  function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n      value = inputs[i];\n      if (value === undefined) {\n        continue;\n      }\n      if (context !== undefined && typeof value === 'function') {\n        value = value(context);\n        cacheable = false;\n      }\n      if (index !== undefined && isArray(value)) {\n        value = value[index % value.length];\n        cacheable = false;\n      }\n      if (value !== undefined) {\n        if (info && !cacheable) {\n          info.cacheable = false;\n        }\n        return value;\n      }\n    }\n  }\n  function _addGrace(minmax, grace) {\n    const { min, max } = minmax;\n    return {\n      min: min - Math.abs(toDimension(grace, min)),\n      max: max + toDimension(grace, max)\n    };\n  }\n\n  const STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n  function filterByPosition(array, position) {\n    return array.filter(v => v.pos === position);\n  }\n  function filterDynamicPositionByAxis(array, axis) {\n    return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n  }\n  function sortByWeight(array, reverse) {\n    return array.sort((a, b) => {\n      const v0 = reverse ? b : a;\n      const v1 = reverse ? a : b;\n      return v0.weight === v1.weight ?\n        v0.index - v1.index :\n        v0.weight - v1.weight;\n    });\n  }\n  function wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box;\n    for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n      box = boxes[i];\n      layoutBoxes.push({\n        index: i,\n        box,\n        pos: box.position,\n        horizontal: box.isHorizontal(),\n        weight: box.weight\n      });\n    }\n    return layoutBoxes;\n  }\n  function setLayoutDims(layouts, params) {\n    let i, ilen, layout;\n    for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n      layout = layouts[i];\n      if (layout.horizontal) {\n        layout.width = layout.box.fullSize && params.availableWidth;\n        layout.height = params.hBoxMaxHeight;\n      } else {\n        layout.width = params.vBoxMaxWidth;\n        layout.height = layout.box.fullSize && params.availableHeight;\n      }\n    }\n  }\n  function buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n      fullSize,\n      leftAndTop: left.concat(top),\n      rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n      chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n      vertical: left.concat(right).concat(centerVertical),\n      horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n  }\n  function getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n  }\n  function updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n  }\n  function updateDims(chartArea, params, layout) {\n    const box = layout.box;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(layout.pos)) {\n      if (layout.size) {\n        chartArea[layout.pos] -= layout.size;\n      }\n      layout.size = layout.horizontal ? box.height : box.width;\n      chartArea[layout.pos] += layout.size;\n    }\n    if (box.getPadding) {\n      updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal\n      ? { same: widthChanged, other: heightChanged }\n      : { same: heightChanged, other: widthChanged };\n  }\n  function handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n      const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n      chartArea[pos] += change;\n      return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n  }\n  function getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n      const margin = { left: 0, top: 0, right: 0, bottom: 0 };\n      positions.forEach((pos) => {\n        margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n      });\n      return margin;\n    }\n    return horizontal\n      ? marginForPositions(['left', 'right'])\n      : marginForPositions(['top', 'bottom']);\n  }\n  function fitBoxes(boxes, chartArea, params) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n      layout = boxes[i];\n      box = layout.box;\n      box.update(\n        layout.width || chartArea.w,\n        layout.height || chartArea.h,\n        getMargins(layout.horizontal, chartArea)\n      );\n      const { same, other } = updateDims(chartArea, params, layout);\n      refit |= same && refitBoxes.length;\n      changed = changed || other;\n      if (!box.fullSize) {\n        refitBoxes.push(layout);\n      }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params) || changed;\n  }\n  function placeBoxes(boxes, chartArea, params) {\n    const userPadding = params.padding;\n    let x = chartArea.x;\n    let y = chartArea.y;\n    let i, ilen, layout, box;\n    for (i = 0, ilen = boxes.length; i < ilen; ++i) {\n      layout = boxes[i];\n      box = layout.box;\n      if (layout.horizontal) {\n        box.left = box.fullSize ? userPadding.left : chartArea.left;\n        box.right = box.fullSize ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;\n        box.top = y;\n        box.bottom = y + box.height;\n        box.width = box.right - box.left;\n        y = box.bottom;\n      } else {\n        box.left = x;\n        box.right = x + box.width;\n        box.top = box.fullSize ? userPadding.top : chartArea.top;\n        box.bottom = box.fullSize ? params.outerHeight - userPadding.right : chartArea.top + chartArea.h;\n        box.height = box.bottom - box.top;\n        x = box.right;\n      }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n  }\n  defaults.set('layout', {\n    padding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  });\n  var layouts = {\n    addBox(chart, item) {\n      if (!chart.boxes) {\n        chart.boxes = [];\n      }\n      item.fullSize = item.fullSize || false;\n      item.position = item.position || 'top';\n      item.weight = item.weight || 0;\n      item._layers = item._layers || function () {\n        return [{\n          z: 0,\n          draw(chartArea) {\n            item.draw(chartArea);\n          }\n        }];\n      };\n      chart.boxes.push(item);\n    },\n    removeBox(chart, layoutItem) {\n      const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n      if (index !== -1) {\n        chart.boxes.splice(index, 1);\n      }\n    },\n    configure(chart, item, options) {\n      item.fullSize = options.fullSize;\n      item.position = options.position;\n      item.weight = options.weight;\n    },\n    update(chart, width, height, minPadding) {\n      if (!chart) {\n        return;\n      }\n      const padding = toPadding(chart.options.layout.padding);\n      const availableWidth = Math.max(width - padding.width, 0);\n      const availableHeight = Math.max(height - padding.height, 0);\n      const boxes = buildLayoutBoxes(chart.boxes);\n      const verticalBoxes = boxes.vertical;\n      const horizontalBoxes = boxes.horizontal;\n      each(chart.boxes, box => {\n        if (typeof box.beforeLayout === 'function') {\n          box.beforeLayout();\n        }\n      });\n      const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n        wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n      const params = Object.freeze({\n        outerWidth: width,\n        outerHeight: height,\n        padding,\n        availableWidth,\n        availableHeight,\n        vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n        hBoxMaxHeight: availableHeight / 2\n      });\n      const maxPadding = Object.assign({}, padding);\n      updateMaxPadding(maxPadding, toPadding(minPadding));\n      const chartArea = Object.assign({\n        maxPadding,\n        w: availableWidth,\n        h: availableHeight,\n        x: padding.left,\n        y: padding.top\n      }, padding);\n      setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n      fitBoxes(boxes.fullSize, chartArea, params);\n      fitBoxes(verticalBoxes, chartArea, params);\n      if (fitBoxes(horizontalBoxes, chartArea, params)) {\n        fitBoxes(verticalBoxes, chartArea, params);\n      }\n      handleMaxPadding(chartArea);\n      placeBoxes(boxes.leftAndTop, chartArea, params);\n      chartArea.x += chartArea.w;\n      chartArea.y += chartArea.h;\n      placeBoxes(boxes.rightAndBottom, chartArea, params);\n      chart.chartArea = {\n        left: chartArea.left,\n        top: chartArea.top,\n        right: chartArea.left + chartArea.w,\n        bottom: chartArea.top + chartArea.h,\n        height: chartArea.h,\n        width: chartArea.w,\n      };\n      each(boxes.chartArea, (layout) => {\n        const box = layout.box;\n        Object.assign(box, chart.chartArea);\n        box.update(chartArea.w, chartArea.h);\n      });\n    }\n  };\n\n  class BasePlatform {\n    acquireContext(canvas, aspectRatio) { }\n    releaseContext(context) {\n      return false;\n    }\n    addEventListener(chart, type, listener) { }\n    removeEventListener(chart, type, listener) { }\n    getDevicePixelRatio() {\n      return 1;\n    }\n    getMaximumSize(element, width, height, aspectRatio) {\n      width = Math.max(0, width || element.width);\n      height = height || element.height;\n      return {\n        width,\n        height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n      };\n    }\n    isAttached(canvas) {\n      return true;\n    }\n  }\n\n  class BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n      return item && item.getContext && item.getContext('2d') || null;\n    }\n  }\n\n  const EXPANDO_KEY = '$chartjs';\n  const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n  };\n  const isNullOrEmpty = value => value === null || value === '';\n  function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n      initial: {\n        height: renderHeight,\n        width: renderWidth,\n        style: {\n          display: style.display,\n          height: style.height,\n          width: style.width\n        }\n      }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n      const displayWidth = readUsedSize(canvas, 'width');\n      if (displayWidth !== undefined) {\n        canvas.width = displayWidth;\n      }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n      if (canvas.style.height === '') {\n        canvas.height = canvas.width / (aspectRatio || 2);\n      } else {\n        const displayHeight = readUsedSize(canvas, 'height');\n        if (displayHeight !== undefined) {\n          canvas.height = displayHeight;\n        }\n      }\n    }\n    return canvas;\n  }\n  const eventListenerOptions = supportsEventListenerOptions ? { passive: true } : false;\n  function addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n  function removeListener(chart, type, listener) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n  function fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x, y } = getRelativePosition$1(event, chart);\n    return {\n      type,\n      chart,\n      native: event,\n      x: x !== undefined ? x : null,\n      y: y !== undefined ? y : null,\n    };\n  }\n  function createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    const element = container || canvas;\n    const observer = new MutationObserver(entries => {\n      const parent = _getParentNode(element);\n      entries.forEach(entry => {\n        for (let i = 0; i < entry.addedNodes.length; i++) {\n          const added = entry.addedNodes[i];\n          if (added === element || added === parent) {\n            listener(entry.target);\n          }\n        }\n      });\n    });\n    observer.observe(document, { childList: true, subtree: true });\n    return observer;\n  }\n  function createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n      return;\n    }\n    const observer = new MutationObserver(entries => {\n      entries.forEach(entry => {\n        for (let i = 0; i < entry.removedNodes.length; i++) {\n          if (entry.removedNodes[i] === canvas) {\n            listener();\n            break;\n          }\n        }\n      });\n    });\n    observer.observe(container, { childList: true });\n    return observer;\n  }\n  const drpListeningCharts = new Map();\n  let oldDevicePixelRatio = 0;\n  function onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n      return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart) => {\n      if (chart.currentDevicePixelRatio !== dpr) {\n        resize();\n      }\n    });\n  }\n  function listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n      window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n  }\n  function unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n      window.removeEventListener('resize', onWindowResize);\n    }\n  }\n  function createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n      return;\n    }\n    const resize = throttled((width, height) => {\n      const w = container.clientWidth;\n      listener(width, height);\n      if (w < container.clientWidth) {\n        listener();\n      }\n    }, window);\n    const observer = new ResizeObserver(entries => {\n      const entry = entries[0];\n      const width = entry.contentRect.width;\n      const height = entry.contentRect.height;\n      if (width === 0 && height === 0) {\n        return;\n      }\n      resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n  }\n  function releaseObserver(chart, type, observer) {\n    if (observer) {\n      observer.disconnect();\n    }\n    if (type === 'resize') {\n      unlistenDevicePixelRatioChanges(chart);\n    }\n  }\n  function createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event) => {\n      if (chart.ctx !== null) {\n        listener(fromNativeEvent(event, chart));\n      }\n    }, chart, (args) => {\n      const event = args[0];\n      return [event, event.offsetX, event.offsetY];\n    });\n    addListener(canvas, type, proxy);\n    return proxy;\n  }\n  class DomPlatform extends BasePlatform {\n    acquireContext(canvas, aspectRatio) {\n      const context = canvas && canvas.getContext && canvas.getContext('2d');\n      if (context && context.canvas === canvas) {\n        initCanvas(canvas, aspectRatio);\n        return context;\n      }\n      return null;\n    }\n    releaseContext(context) {\n      const canvas = context.canvas;\n      if (!canvas[EXPANDO_KEY]) {\n        return false;\n      }\n      const initial = canvas[EXPANDO_KEY].initial;\n      ['height', 'width'].forEach((prop) => {\n        const value = initial[prop];\n        if (isNullOrUndef(value)) {\n          canvas.removeAttribute(prop);\n        } else {\n          canvas.setAttribute(prop, value);\n        }\n      });\n      const style = initial.style || {};\n      Object.keys(style).forEach((key) => {\n        canvas.style[key] = style[key];\n      });\n      canvas.width = canvas.width;\n      delete canvas[EXPANDO_KEY];\n      return true;\n    }\n    addEventListener(chart, type, listener) {\n      this.removeEventListener(chart, type);\n      const proxies = chart.$proxies || (chart.$proxies = {});\n      const handlers = {\n        attach: createAttachObserver,\n        detach: createDetachObserver,\n        resize: createResizeObserver\n      };\n      const handler = handlers[type] || createProxyAndListen;\n      proxies[type] = handler(chart, type, listener);\n    }\n    removeEventListener(chart, type) {\n      const proxies = chart.$proxies || (chart.$proxies = {});\n      const proxy = proxies[type];\n      if (!proxy) {\n        return;\n      }\n      const handlers = {\n        attach: releaseObserver,\n        detach: releaseObserver,\n        resize: releaseObserver\n      };\n      const handler = handlers[type] || removeListener;\n      handler(chart, type, proxy);\n      proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n      return window.devicePixelRatio;\n    }\n    getMaximumSize(canvas, width, height, aspectRatio) {\n      return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n    isAttached(canvas) {\n      const container = _getParentNode(canvas);\n      return !!(container && _getParentNode(container));\n    }\n  }\n\n  var platforms = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    BasePlatform: BasePlatform,\n    BasicPlatform: BasicPlatform,\n    DomPlatform: DomPlatform\n  });\n\n  const atEdge = (t) => t === 0 || t === 1;\n  const elasticIn = (t, s, p) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\n  const elasticOut = (t, s, p) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n  const effects = {\n    linear: t => t,\n    easeInQuad: t => t * t,\n    easeOutQuad: t => -t * (t - 2),\n    easeInOutQuad: t => ((t /= 0.5) < 1)\n      ? 0.5 * t * t\n      : -0.5 * ((--t) * (t - 2) - 1),\n    easeInCubic: t => t * t * t,\n    easeOutCubic: t => (t -= 1) * t * t + 1,\n    easeInOutCubic: t => ((t /= 0.5) < 1)\n      ? 0.5 * t * t * t\n      : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: t => t * t * t * t,\n    easeOutQuart: t => -((t -= 1) * t * t * t - 1),\n    easeInOutQuart: t => ((t /= 0.5) < 1)\n      ? 0.5 * t * t * t * t\n      : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: t => t * t * t * t * t,\n    easeOutQuint: t => (t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: t => ((t /= 0.5) < 1)\n      ? 0.5 * t * t * t * t * t\n      : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: t => -Math.cos(t * HALF_PI) + 1,\n    easeOutSine: t => Math.sin(t * HALF_PI),\n    easeInOutSine: t => -0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: t => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: t => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: t => atEdge(t) ? t : t < 0.5\n      ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))\n      : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: t => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: t => ((t /= 0.5) < 1)\n      ? -0.5 * (Math.sqrt(1 - t * t) - 1)\n      : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: t => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: t => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic(t) {\n      const s = 0.1125;\n      const p = 0.45;\n      return atEdge(t) ? t :\n        t < 0.5\n          ? 0.5 * elasticIn(t * 2, s, p)\n          : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack(t) {\n      const s = 1.70158;\n      return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack(t) {\n      const s = 1.70158;\n      return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack(t) {\n      let s = 1.70158;\n      if ((t /= 0.5) < 1) {\n        return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\n      }\n      return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n    },\n    easeInBounce: t => 1 - effects.easeOutBounce(1 - t),\n    easeOutBounce(t) {\n      const m = 7.5625;\n      const d = 2.75;\n      if (t < (1 / d)) {\n        return m * t * t;\n      }\n      if (t < (2 / d)) {\n        return m * (t -= (1.5 / d)) * t + 0.75;\n      }\n      if (t < (2.5 / d)) {\n        return m * (t -= (2.25 / d)) * t + 0.9375;\n      }\n      return m * (t -= (2.625 / d)) * t + 0.984375;\n    },\n    easeInOutBounce: t => (t < 0.5)\n      ? effects.easeInBounce(t * 2) * 0.5\n      : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,\n  };\n\n  const transparent = 'transparent';\n  const interpolators = {\n    boolean(from, to, factor) {\n      return factor > 0.5 ? to : from;\n    },\n    color(from, to, factor) {\n      const c0 = color(from || transparent);\n      const c1 = c0.valid && color(to || transparent);\n      return c1 && c1.valid\n        ? c1.mix(c0, factor).hexString()\n        : to;\n    },\n    number(from, to, factor) {\n      return from + (to - from) * factor;\n    }\n  };\n  class Animation {\n    constructor(cfg, target, prop, to) {\n      const currentValue = target[prop];\n      to = resolve([cfg.to, to, currentValue, cfg.from]);\n      const from = resolve([cfg.from, currentValue, to]);\n      this._active = true;\n      this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n      this._easing = effects[cfg.easing] || effects.linear;\n      this._start = Math.floor(Date.now() + (cfg.delay || 0));\n      this._duration = this._total = Math.floor(cfg.duration);\n      this._loop = !!cfg.loop;\n      this._target = target;\n      this._prop = prop;\n      this._from = from;\n      this._to = to;\n      this._promises = undefined;\n    }\n    active() {\n      return this._active;\n    }\n    update(cfg, to, date) {\n      const me = this;\n      if (me._active) {\n        me._notify(false);\n        const currentValue = me._target[me._prop];\n        const elapsed = date - me._start;\n        const remain = me._duration - elapsed;\n        me._start = date;\n        me._duration = Math.floor(Math.max(remain, cfg.duration));\n        me._total += elapsed;\n        me._loop = !!cfg.loop;\n        me._to = resolve([cfg.to, to, currentValue, cfg.from]);\n        me._from = resolve([cfg.from, currentValue, to]);\n      }\n    }\n    cancel() {\n      const me = this;\n      if (me._active) {\n        me.tick(Date.now());\n        me._active = false;\n        me._notify(false);\n      }\n    }\n    tick(date) {\n      const me = this;\n      const elapsed = date - me._start;\n      const duration = me._duration;\n      const prop = me._prop;\n      const from = me._from;\n      const loop = me._loop;\n      const to = me._to;\n      let factor;\n      me._active = from !== to && (loop || (elapsed < duration));\n      if (!me._active) {\n        me._target[prop] = to;\n        me._notify(true);\n        return;\n      }\n      if (elapsed < 0) {\n        me._target[prop] = from;\n        return;\n      }\n      factor = (elapsed / duration) % 2;\n      factor = loop && factor > 1 ? 2 - factor : factor;\n      factor = me._easing(Math.min(1, Math.max(0, factor)));\n      me._target[prop] = me._fn(from, to, factor);\n    }\n    wait() {\n      const promises = this._promises || (this._promises = []);\n      return new Promise((res, rej) => {\n        promises.push({ res, rej });\n      });\n    }\n    _notify(resolved) {\n      const method = resolved ? 'res' : 'rej';\n      const promises = this._promises || [];\n      for (let i = 0; i < promises.length; i++) {\n        promises[i][method]();\n      }\n    }\n  }\n\n  const numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\n  const colors = ['color', 'borderColor', 'backgroundColor'];\n  defaults.set('animation', {\n    delay: undefined,\n    duration: 1000,\n    easing: 'easeOutQuart',\n    fn: undefined,\n    from: undefined,\n    loop: undefined,\n    to: undefined,\n    type: undefined,\n  });\n  const animationOptions = Object.keys(defaults.animation);\n  defaults.describe('animation', {\n    _fallback: false,\n    _indexable: false,\n    _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',\n  });\n  defaults.set('animations', {\n    colors: {\n      type: 'color',\n      properties: colors\n    },\n    numbers: {\n      type: 'number',\n      properties: numbers\n    },\n  });\n  defaults.describe('animations', {\n    _fallback: 'animation',\n  });\n  defaults.set('transitions', {\n    active: {\n      animation: {\n        duration: 400\n      }\n    },\n    resize: {\n      animation: {\n        duration: 0\n      }\n    },\n    show: {\n      animations: {\n        colors: {\n          from: 'transparent'\n        },\n        visible: {\n          type: 'boolean',\n          duration: 0\n        },\n      }\n    },\n    hide: {\n      animations: {\n        colors: {\n          to: 'transparent'\n        },\n        visible: {\n          type: 'boolean',\n          easing: 'linear',\n          fn: v => v | 0\n        },\n      }\n    }\n  });\n  class Animations {\n    constructor(chart, config) {\n      this._chart = chart;\n      this._properties = new Map();\n      this.configure(config);\n    }\n    configure(config) {\n      if (!isObject(config)) {\n        return;\n      }\n      const animatedProps = this._properties;\n      Object.getOwnPropertyNames(config).forEach(key => {\n        const cfg = config[key];\n        if (!isObject(cfg)) {\n          return;\n        }\n        const resolved = {};\n        for (const option of animationOptions) {\n          resolved[option] = cfg[option];\n        }\n        (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n          if (prop === key || !animatedProps.has(prop)) {\n            animatedProps.set(prop, resolved);\n          }\n        });\n      });\n    }\n    _animateOptions(target, values) {\n      const newOptions = values.options;\n      const options = resolveTargetOptions(target, newOptions);\n      if (!options) {\n        return [];\n      }\n      const animations = this._createAnimations(options, newOptions);\n      if (newOptions.$shared) {\n        awaitAll(target.options.$animations, newOptions).then(() => {\n          target.options = newOptions;\n        }, () => {\n        });\n      }\n      return animations;\n    }\n    _createAnimations(target, values) {\n      const animatedProps = this._properties;\n      const animations = [];\n      const running = target.$animations || (target.$animations = {});\n      const props = Object.keys(values);\n      const date = Date.now();\n      let i;\n      for (i = props.length - 1; i >= 0; --i) {\n        const prop = props[i];\n        if (prop.charAt(0) === '$') {\n          continue;\n        }\n        if (prop === 'options') {\n          animations.push(...this._animateOptions(target, values));\n          continue;\n        }\n        const value = values[prop];\n        let animation = running[prop];\n        const cfg = animatedProps.get(prop);\n        if (animation) {\n          if (cfg && animation.active()) {\n            animation.update(cfg, value, date);\n            continue;\n          } else {\n            animation.cancel();\n          }\n        }\n        if (!cfg || !cfg.duration) {\n          target[prop] = value;\n          continue;\n        }\n        running[prop] = animation = new Animation(cfg, target, prop, value);\n        animations.push(animation);\n      }\n      return animations;\n    }\n    update(target, values) {\n      if (this._properties.size === 0) {\n        Object.assign(target, values);\n        return;\n      }\n      const animations = this._createAnimations(target, values);\n      if (animations.length) {\n        animator.add(this._chart, animations);\n        return true;\n      }\n    }\n  }\n  function awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for (let i = 0; i < keys.length; i++) {\n      const anim = animations[keys[i]];\n      if (anim && anim.active()) {\n        running.push(anim.wait());\n      }\n    }\n    return Promise.all(running);\n  }\n  function resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n      return;\n    }\n    let options = target.options;\n    if (!options) {\n      target.options = newOptions;\n      return;\n    }\n    if (options.$shared) {\n      target.options = options = Object.assign({}, options, { $shared: false, $animations: {} });\n    }\n    return options;\n  }\n\n  function scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n      start: reverse ? max : min,\n      end: reverse ? min : max\n    };\n  }\n  function defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n      return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n      top: y.end,\n      right: x.end,\n      bottom: y.start,\n      left: x.start\n    };\n  }\n  function toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n      t = value.top;\n      r = value.right;\n      b = value.bottom;\n      l = value.left;\n    } else {\n      t = r = b = l = value;\n    }\n    return {\n      top: t,\n      right: r,\n      bottom: b,\n      left: l\n    };\n  }\n  function getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      keys.push(metasets[i].index);\n    }\n    return keys;\n  }\n  function applyStack(stack, value, dsIndex, options) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n      return;\n    }\n    for (i = 0, ilen = keys.length; i < ilen; ++i) {\n      datasetIndex = +keys[i];\n      if (datasetIndex === dsIndex) {\n        if (options.all) {\n          continue;\n        }\n        break;\n      }\n      otherValue = stack.values[datasetIndex];\n      if (isNumberFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n        value += otherValue;\n      }\n    }\n    return value;\n  }\n  function convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for (i = 0, ilen = keys.length; i < ilen; ++i) {\n      key = keys[i];\n      adata[i] = {\n        x: key,\n        y: data[key]\n      };\n    }\n    return adata;\n  }\n  function isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || (stacked === undefined && meta.stack !== undefined);\n  }\n  function getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n  }\n  function getUserBounds(scale) {\n    const { min, max, minDefined, maxDefined } = scale.getUserBounds();\n    return {\n      min: minDefined ? min : Number.NEGATIVE_INFINITY,\n      max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n  }\n  function getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n  }\n  function getLastIndexInStack(stack, vScale, positive) {\n    for (const meta of vScale.getMatchingVisibleMetas('bar').reverse()) {\n      const value = stack[meta.index];\n      if ((positive && value > 0) || (!positive && value < 0)) {\n        return meta.index;\n      }\n    }\n    return null;\n  }\n  function updateStacks(controller, parsed) {\n    const { chart, _cachedMeta: meta } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale, vScale, index: datasetIndex } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for (let i = 0; i < ilen; ++i) {\n      const item = parsed[i];\n      const { [iAxis]: index, [vAxis]: value } = item;\n      const itemStacks = item._stacks || (item._stacks = {});\n      stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n      stack[datasetIndex] = value;\n      stack._top = getLastIndexInStack(stack, vScale, true);\n      stack._bottom = getLastIndexInStack(stack, vScale, false);\n    }\n  }\n  function getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n  }\n  function createDatasetContext(parent, index) {\n    return Object.assign(Object.create(parent),\n      {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n      }\n    );\n  }\n  function createDataContext(parent, index, element) {\n    return Object.assign(Object.create(parent), {\n      active: false,\n      dataIndex: index,\n      parsed: undefined,\n      raw: undefined,\n      element,\n      index,\n      mode: 'default',\n      type: 'data'\n    });\n  }\n  function clearStacks(meta, items) {\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n      return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items) {\n      const stacks = parsed._stacks;\n      if (!stacks || stacks[axis] === undefined || stacks[axis][meta.index] === undefined) {\n        return;\n      }\n      delete stacks[axis][meta.index];\n    }\n  }\n  const isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\n  const cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\n  class DatasetController {\n    constructor(chart, datasetIndex) {\n      this.chart = chart;\n      this._ctx = chart.ctx;\n      this.index = datasetIndex;\n      this._cachedDataOpts = {};\n      this._cachedMeta = this.getMeta();\n      this._type = this._cachedMeta.type;\n      this.options = undefined;\n      this._parsing = false;\n      this._data = undefined;\n      this._objectData = undefined;\n      this._sharedOptions = undefined;\n      this._drawStart = undefined;\n      this._drawCount = undefined;\n      this.enableOptionSharing = false;\n      this.$context = undefined;\n      this._syncList = [];\n      this.initialize();\n    }\n    initialize() {\n      const me = this;\n      const meta = me._cachedMeta;\n      me.configure();\n      me.linkScales();\n      meta._stacked = isStacked(meta.vScale, meta);\n      me.addElements();\n    }\n    updateIndex(datasetIndex) {\n      if (this.index !== datasetIndex) {\n        clearStacks(this._cachedMeta);\n      }\n      this.index = datasetIndex;\n    }\n    linkScales() {\n      const me = this;\n      const chart = me.chart;\n      const meta = me._cachedMeta;\n      const dataset = me.getDataset();\n      const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n      const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n      const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n      const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n      const indexAxis = meta.indexAxis;\n      const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n      const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n      meta.xScale = me.getScaleForId(xid);\n      meta.yScale = me.getScaleForId(yid);\n      meta.rScale = me.getScaleForId(rid);\n      meta.iScale = me.getScaleForId(iid);\n      meta.vScale = me.getScaleForId(vid);\n    }\n    getDataset() {\n      return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n      return this.chart.getDatasetMeta(this.index);\n    }\n    getScaleForId(scaleID) {\n      return this.chart.scales[scaleID];\n    }\n    _getOtherScale(scale) {\n      const meta = this._cachedMeta;\n      return scale === meta.iScale\n        ? meta.vScale\n        : meta.iScale;\n    }\n    reset() {\n      this._update('reset');\n    }\n    _destroy() {\n      const meta = this._cachedMeta;\n      if (this._data) {\n        unlistenArrayEvents(this._data, this);\n      }\n      if (meta._stacked) {\n        clearStacks(meta);\n      }\n    }\n    _dataCheck() {\n      const me = this;\n      const dataset = me.getDataset();\n      const data = dataset.data || (dataset.data = []);\n      const _data = me._data;\n      if (isObject(data)) {\n        me._data = convertObjectDataToArray(data);\n      } else if (_data !== data) {\n        if (_data) {\n          unlistenArrayEvents(_data, me);\n          const meta = me._cachedMeta;\n          clearStacks(meta);\n          meta._parsed = [];\n        }\n        if (data && Object.isExtensible(data)) {\n          listenArrayEvents(data, me);\n        }\n        me._syncList = [];\n        me._data = data;\n      }\n    }\n    addElements() {\n      const me = this;\n      const meta = me._cachedMeta;\n      me._dataCheck();\n      if (me.datasetElementType) {\n        meta.dataset = new me.datasetElementType();\n      }\n    }\n    buildOrUpdateElements(resetNewElements) {\n      const me = this;\n      const meta = me._cachedMeta;\n      const dataset = me.getDataset();\n      let stackChanged = false;\n      me._dataCheck();\n      const oldStacked = meta._stacked;\n      meta._stacked = isStacked(meta.vScale, meta);\n      if (meta.stack !== dataset.stack) {\n        stackChanged = true;\n        clearStacks(meta);\n        meta.stack = dataset.stack;\n      }\n      me._resyncElements(resetNewElements);\n      if (stackChanged || oldStacked !== meta._stacked) {\n        updateStacks(me, meta._parsed);\n      }\n    }\n    configure() {\n      const me = this;\n      const config = me.chart.config;\n      const scopeKeys = config.datasetScopeKeys(me._type);\n      const scopes = config.getOptionScopes(me.getDataset(), scopeKeys, true);\n      me.options = config.createResolver(scopes, me.getContext());\n      me._parsing = me.options.parsing;\n    }\n    parse(start, count) {\n      const me = this;\n      const { _cachedMeta: meta, _data: data } = me;\n      const { iScale, _stacked } = meta;\n      const iAxis = iScale.axis;\n      let sorted = start === 0 && count === data.length ? true : meta._sorted;\n      let prev = start > 0 && meta._parsed[start - 1];\n      let i, cur, parsed;\n      if (me._parsing === false) {\n        meta._parsed = data;\n        meta._sorted = true;\n        parsed = data;\n      } else {\n        if (isArray(data[start])) {\n          parsed = me.parseArrayData(meta, data, start, count);\n        } else if (isObject(data[start])) {\n          parsed = me.parseObjectData(meta, data, start, count);\n        } else {\n          parsed = me.parsePrimitiveData(meta, data, start, count);\n        }\n        const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n        for (i = 0; i < count; ++i) {\n          meta._parsed[i + start] = cur = parsed[i];\n          if (sorted) {\n            if (isNotInOrderComparedToPrev()) {\n              sorted = false;\n            }\n            prev = cur;\n          }\n        }\n        meta._sorted = sorted;\n      }\n      if (_stacked) {\n        updateStacks(me, parsed);\n      }\n    }\n    parsePrimitiveData(meta, data, start, count) {\n      const { iScale, vScale } = meta;\n      const iAxis = iScale.axis;\n      const vAxis = vScale.axis;\n      const labels = iScale.getLabels();\n      const singleScale = iScale === vScale;\n      const parsed = new Array(count);\n      let i, ilen, index;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        index = i + start;\n        parsed[i] = {\n          [iAxis]: singleScale || iScale.parse(labels[index], index),\n          [vAxis]: vScale.parse(data[index], index)\n        };\n      }\n      return parsed;\n    }\n    parseArrayData(meta, data, start, count) {\n      const { xScale, yScale } = meta;\n      const parsed = new Array(count);\n      let i, ilen, index, item;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n          x: xScale.parse(item[0], index),\n          y: yScale.parse(item[1], index)\n        };\n      }\n      return parsed;\n    }\n    parseObjectData(meta, data, start, count) {\n      const { xScale, yScale } = meta;\n      const { xAxisKey = 'x', yAxisKey = 'y' } = this._parsing;\n      const parsed = new Array(count);\n      let i, ilen, index, item;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n          x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n          y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n        };\n      }\n      return parsed;\n    }\n    getParsed(index) {\n      return this._cachedMeta._parsed[index];\n    }\n    getDataElement(index) {\n      return this._cachedMeta.data[index];\n    }\n    applyStack(scale, parsed, mode) {\n      const chart = this.chart;\n      const meta = this._cachedMeta;\n      const value = parsed[scale.axis];\n      const stack = {\n        keys: getSortedDatasetIndices(chart, true),\n        values: parsed._stacks[scale.axis]\n      };\n      return applyStack(stack, value, meta.index, { mode });\n    }\n    updateRangeFromParsed(range, scale, parsed, stack) {\n      const parsedValue = parsed[scale.axis];\n      let value = parsedValue === null ? NaN : parsedValue;\n      const values = stack && parsed._stacks[scale.axis];\n      if (stack && values) {\n        stack.values = values;\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n        value = applyStack(stack, parsedValue, this._cachedMeta.index, { all: true });\n      }\n      range.min = Math.min(range.min, value);\n      range.max = Math.max(range.max, value);\n    }\n    getMinMax(scale, canStack) {\n      const me = this;\n      const meta = me._cachedMeta;\n      const _parsed = meta._parsed;\n      const sorted = meta._sorted && scale === meta.iScale;\n      const ilen = _parsed.length;\n      const otherScale = me._getOtherScale(scale);\n      const stack = canStack && meta._stacked && { keys: getSortedDatasetIndices(me.chart, true), values: null };\n      const range = { min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY };\n      const { min: otherMin, max: otherMax } = getUserBounds(otherScale);\n      let i, value, parsed, otherValue;\n      function _skip() {\n        parsed = _parsed[i];\n        value = parsed[scale.axis];\n        otherValue = parsed[otherScale.axis];\n        return !isNumberFinite(value) || otherMin > otherValue || otherMax < otherValue;\n      }\n      for (i = 0; i < ilen; ++i) {\n        if (_skip()) {\n          continue;\n        }\n        me.updateRangeFromParsed(range, scale, parsed, stack);\n        if (sorted) {\n          break;\n        }\n      }\n      if (sorted) {\n        for (i = ilen - 1; i >= 0; --i) {\n          if (_skip()) {\n            continue;\n          }\n          me.updateRangeFromParsed(range, scale, parsed, stack);\n          break;\n        }\n      }\n      return range;\n    }\n    getAllParsedValues(scale) {\n      const parsed = this._cachedMeta._parsed;\n      const values = [];\n      let i, ilen, value;\n      for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n        value = parsed[i][scale.axis];\n        if (isNumberFinite(value)) {\n          values.push(value);\n        }\n      }\n      return values;\n    }\n    getMaxOverflow() {\n      return false;\n    }\n    getLabelAndValue(index) {\n      const me = this;\n      const meta = me._cachedMeta;\n      const iScale = meta.iScale;\n      const vScale = meta.vScale;\n      const parsed = me.getParsed(index);\n      return {\n        label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n        value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n      };\n    }\n    _update(mode) {\n      const me = this;\n      const meta = me._cachedMeta;\n      me.configure();\n      me._cachedDataOpts = {};\n      me.update(mode || 'default');\n      meta._clip = toClip(valueOrDefault(me.options.clip, defaultClip(meta.xScale, meta.yScale, me.getMaxOverflow())));\n    }\n    update(mode) { }\n    draw() {\n      const me = this;\n      const ctx = me._ctx;\n      const chart = me.chart;\n      const meta = me._cachedMeta;\n      const elements = meta.data || [];\n      const area = chart.chartArea;\n      const active = [];\n      const start = me._drawStart || 0;\n      const count = me._drawCount || (elements.length - start);\n      let i;\n      if (meta.dataset) {\n        meta.dataset.draw(ctx, area, start, count);\n      }\n      for (i = start; i < start + count; ++i) {\n        const element = elements[i];\n        if (element.active) {\n          active.push(element);\n        } else {\n          element.draw(ctx, area);\n        }\n      }\n      for (i = 0; i < active.length; ++i) {\n        active[i].draw(ctx, area);\n      }\n    }\n    getStyle(index, active) {\n      const mode = active ? 'active' : 'default';\n      return index === undefined && this._cachedMeta.dataset\n        ? this.resolveDatasetElementOptions(mode)\n        : this.resolveDataElementOptions(index || 0, mode);\n    }\n    getContext(index, active, mode) {\n      const me = this;\n      const dataset = me.getDataset();\n      let context;\n      if (index >= 0 && index < me._cachedMeta.data.length) {\n        const element = me._cachedMeta.data[index];\n        context = element.$context ||\n          (element.$context = createDataContext(me.getContext(), index, element));\n        context.parsed = me.getParsed(index);\n        context.raw = dataset.data[index];\n        context.index = context.dataIndex = index;\n      } else {\n        context = me.$context ||\n          (me.$context = createDatasetContext(me.chart.getContext(), me.index));\n        context.dataset = dataset;\n        context.index = context.datasetIndex = me.index;\n      }\n      context.active = !!active;\n      context.mode = mode;\n      return context;\n    }\n    resolveDatasetElementOptions(mode) {\n      return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n    resolveDataElementOptions(index, mode) {\n      return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n    _resolveElementOptions(elementType, mode = 'default', index) {\n      const me = this;\n      const active = mode === 'active';\n      const cache = me._cachedDataOpts;\n      const cacheKey = elementType + '-' + mode;\n      const cached = cache[cacheKey];\n      const sharing = me.enableOptionSharing && defined(index);\n      if (cached) {\n        return cloneIfNotShared(cached, sharing);\n      }\n      const config = me.chart.config;\n      const scopeKeys = config.datasetElementScopeKeys(me._type, elementType);\n      const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n      const scopes = config.getOptionScopes(me.getDataset(), scopeKeys);\n      const names = Object.keys(defaults.elements[elementType]);\n      const context = () => me.getContext(index, active);\n      const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n      if (values.$shared) {\n        values.$shared = sharing;\n        cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n      }\n      return values;\n    }\n    _resolveAnimations(index, transition, active) {\n      const me = this;\n      const chart = me.chart;\n      const cache = me._cachedDataOpts;\n      const cacheKey = `animation-${transition}`;\n      const cached = cache[cacheKey];\n      if (cached) {\n        return cached;\n      }\n      let options;\n      if (chart.options.animation !== false) {\n        const config = me.chart.config;\n        const scopeKeys = config.datasetAnimationScopeKeys(me._type, transition);\n        const scopes = config.getOptionScopes(me.getDataset(), scopeKeys);\n        options = config.createResolver(scopes, me.getContext(index, active, transition));\n      }\n      const animations = new Animations(chart, options && options.animations);\n      if (options && options._cacheable) {\n        cache[cacheKey] = Object.freeze(animations);\n      }\n      return animations;\n    }\n    getSharedOptions(options) {\n      if (!options.$shared) {\n        return;\n      }\n      return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n    includeOptions(mode, sharedOptions) {\n      return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n    updateElement(element, index, properties, mode) {\n      if (isDirectUpdateMode(mode)) {\n        Object.assign(element, properties);\n      } else {\n        this._resolveAnimations(index, mode).update(element, properties);\n      }\n    }\n    updateSharedOptions(sharedOptions, mode, newOptions) {\n      if (sharedOptions && !isDirectUpdateMode(mode)) {\n        this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n      }\n    }\n    _setStyle(element, index, mode, active) {\n      element.active = active;\n      const options = this.getStyle(index, active);\n      this._resolveAnimations(index, mode, active).update(element, {\n        options: (!active && this.getSharedOptions(options)) || options\n      });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n      this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n      this._setStyle(element, index, 'active', true);\n    }\n    _removeDatasetHoverStyle() {\n      const element = this._cachedMeta.dataset;\n      if (element) {\n        this._setStyle(element, undefined, 'active', false);\n      }\n    }\n    _setDatasetHoverStyle() {\n      const element = this._cachedMeta.dataset;\n      if (element) {\n        this._setStyle(element, undefined, 'active', true);\n      }\n    }\n    _resyncElements(resetNewElements) {\n      const me = this;\n      const data = me._data;\n      const elements = me._cachedMeta.data;\n      for (const [method, arg1, arg2] of me._syncList) {\n        me[method](arg1, arg2);\n      }\n      me._syncList = [];\n      const numMeta = elements.length;\n      const numData = data.length;\n      const count = Math.min(numData, numMeta);\n      if (count) {\n        me.parse(0, count);\n      }\n      if (numData > numMeta) {\n        me._insertElements(numMeta, numData - numMeta, resetNewElements);\n      } else if (numData < numMeta) {\n        me._removeElements(numData, numMeta - numData);\n      }\n    }\n    _insertElements(start, count, resetNewElements = true) {\n      const me = this;\n      const meta = me._cachedMeta;\n      const data = meta.data;\n      const end = start + count;\n      let i;\n      const move = (arr) => {\n        arr.length += count;\n        for (i = arr.length - 1; i >= end; i--) {\n          arr[i] = arr[i - count];\n        }\n      };\n      move(data);\n      for (i = start; i < end; ++i) {\n        data[i] = new me.dataElementType();\n      }\n      if (me._parsing) {\n        move(meta._parsed);\n      }\n      me.parse(start, count);\n      if (resetNewElements) {\n        me.updateElements(data, start, count, 'reset');\n      }\n    }\n    updateElements(element, start, count, mode) { }\n    _removeElements(start, count) {\n      const me = this;\n      const meta = me._cachedMeta;\n      if (me._parsing) {\n        const removed = meta._parsed.splice(start, count);\n        if (meta._stacked) {\n          clearStacks(meta, removed);\n        }\n      }\n      meta.data.splice(start, count);\n    }\n    _onDataPush() {\n      const count = arguments.length;\n      this._syncList.push(['_insertElements', this.getDataset().data.length - count, count]);\n    }\n    _onDataPop() {\n      this._syncList.push(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n    }\n    _onDataShift() {\n      this._syncList.push(['_removeElements', 0, 1]);\n    }\n    _onDataSplice(start, count) {\n      this._syncList.push(['_removeElements', start, count]);\n      this._syncList.push(['_insertElements', start, arguments.length - 2]);\n    }\n    _onDataUnshift() {\n      this._syncList.push(['_insertElements', 0, arguments.length]);\n    }\n  }\n  DatasetController.defaults = {};\n  DatasetController.prototype.datasetElementType = null;\n  DatasetController.prototype.dataElementType = null;\n\n  class Element {\n    constructor() {\n      this.x = undefined;\n      this.y = undefined;\n      this.active = false;\n      this.options = undefined;\n      this.$animations = undefined;\n    }\n    tooltipPosition(useFinalPosition) {\n      const { x, y } = this.getProps(['x', 'y'], useFinalPosition);\n      return { x, y };\n    }\n    hasValue() {\n      return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n      const me = this;\n      const anims = this.$animations;\n      if (!final || !anims) {\n        return me;\n      }\n      const ret = {};\n      props.forEach(prop => {\n        ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : me[prop];\n      });\n      return ret;\n    }\n  }\n  Element.defaults = {};\n  Element.defaultRoutes = undefined;\n\n  const intlCache = new Map();\n  function getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n      formatter = new Intl.NumberFormat(locale, options);\n      intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n  }\n  function formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n  }\n\n  const formatters = {\n    values(value) {\n      return isArray(value) ? value : '' + value;\n    },\n    numeric(tickValue, index, ticks) {\n      if (tickValue === 0) {\n        return '0';\n      }\n      const locale = this.chart.options.locale;\n      let notation;\n      let delta = tickValue;\n      if (ticks.length > 1) {\n        const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n        if (maxTick < 1e-4 || maxTick > 1e+15) {\n          notation = 'scientific';\n        }\n        delta = calculateDelta(tickValue, ticks);\n      }\n      const logDelta = log10(Math.abs(delta));\n      const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n      const options = { notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal };\n      Object.assign(options, this.options.ticks.format);\n      return formatNumber(tickValue, locale, options);\n    },\n    logarithmic(tickValue, index, ticks) {\n      if (tickValue === 0) {\n        return '0';\n      }\n      const remain = tickValue / (Math.pow(10, Math.floor(log10(tickValue))));\n      if (remain === 1 || remain === 2 || remain === 5) {\n        return formatters.numeric.call(this, tickValue, index, ticks);\n      }\n      return '';\n    }\n  };\n  function calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n      delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n  }\n  var Ticks = { formatters };\n\n  defaults.set('scale', {\n    display: true,\n    offset: false,\n    reverse: false,\n    beginAtZero: false,\n    bounds: 'ticks',\n    grace: 0,\n    grid: {\n      display: true,\n      lineWidth: 1,\n      drawBorder: true,\n      drawOnChartArea: true,\n      drawTicks: true,\n      tickLength: 8,\n      tickWidth: (_ctx, options) => options.lineWidth,\n      tickColor: (_ctx, options) => options.color,\n      offset: false,\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderWidth: 1\n    },\n    title: {\n      display: false,\n      text: '',\n      padding: {\n        top: 4,\n        bottom: 4\n      }\n    },\n    ticks: {\n      minRotation: 0,\n      maxRotation: 50,\n      mirror: false,\n      textStrokeWidth: 0,\n      textStrokeColor: '',\n      padding: 3,\n      display: true,\n      autoSkip: true,\n      autoSkipPadding: 3,\n      labelOffset: 0,\n      callback: Ticks.formatters.values,\n      minor: {},\n      major: {},\n      align: 'center',\n      crossAlign: 'near',\n      showLabelBackdrop: false,\n      backdropColor: 'rgba(255, 255, 255, 0.75)',\n      backdropPadding: 2,\n    }\n  });\n  defaults.route('scale.ticks', 'color', '', 'color');\n  defaults.route('scale.grid', 'color', '', 'borderColor');\n  defaults.route('scale.grid', 'borderColor', '', 'borderColor');\n  defaults.route('scale.title', 'color', '', 'color');\n  defaults.describe('scale', {\n    _fallback: false,\n    _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n    _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash',\n  });\n  defaults.describe('scales', {\n    _fallback: 'scale',\n  });\n\n  function autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n      skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n      return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n      let i, ilen;\n      const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n      skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n      for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n        skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n      }\n      skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n      return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n  }\n  function determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n  }\n  function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n      return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n      const factor = factors[i];\n      if (factor > spacing) {\n        return factor;\n      }\n    }\n    return Math.max(spacing, 1);\n  }\n  function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (ticks[i].major) {\n        result.push(i);\n      }\n    }\n    return result;\n  }\n  function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for (i = 0; i < ticks.length; i++) {\n      if (i === next) {\n        newTicks.push(ticks[i]);\n        count++;\n        next = majorIndices[count * spacing];\n      }\n    }\n  }\n  function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n      length = majorEnd - majorStart;\n      spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while (next < 0) {\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n    for (i = Math.max(start, 0); i < end; i++) {\n      if (i === next) {\n        newTicks.push(ticks[i]);\n        count++;\n        next = Math.round(start + count * spacing);\n      }\n    }\n  }\n  function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n      return false;\n    }\n    for (diff = arr[0], i = 1; i < len; ++i) {\n      if (arr[i] - arr[i - 1] !== diff) {\n        return false;\n      }\n    }\n    return diff;\n  }\n\n  const reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\n  const offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n  function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for (; i < len; i += increment) {\n      result.push(arr[Math.floor(i)]);\n    }\n    return result;\n  }\n  function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n      if (length === 1) {\n        offset = Math.max(lineValue - start, end - lineValue);\n      } else if (index === 0) {\n        offset = (scale.getPixelForTick(1) - lineValue) / 2;\n      } else {\n        offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n      }\n      lineValue += validIndex < index ? offset : -offset;\n      if (lineValue < start - epsilon || lineValue > end + epsilon) {\n        return;\n      }\n    }\n    return lineValue;\n  }\n  function garbageCollect(caches, length) {\n    each(caches, (cache) => {\n      const gc = cache.gc;\n      const gcLen = gc.length / 2;\n      let i;\n      if (gcLen > length) {\n        for (i = 0; i < gcLen; ++i) {\n          delete cache.data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n      }\n    });\n  }\n  function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n  }\n  function getTitleHeight(options, fallback) {\n    if (!options.display) {\n      return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return (lines * font.lineHeight) + padding.height;\n  }\n  function createScaleContext(parent, scale) {\n    return Object.assign(Object.create(parent), {\n      scale,\n      type: 'scale'\n    });\n  }\n  function createTickContext(parent, index, tick) {\n    return Object.assign(Object.create(parent), {\n      tick,\n      index,\n      type: 'tick'\n    });\n  }\n  function titleAlign(align, position, reverse) {\n    let ret = _toLeftRightCenter(align);\n    if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n      ret = reverseAlign(ret);\n    }\n    return ret;\n  }\n  function titleArgs(scale, offset, position, align) {\n    const { top, left, bottom, right } = scale;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (scale.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = offsetFromEdge(scale, position, offset);\n      maxWidth = right - left;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n      titleY = _alignStartEnd(align, bottom, top);\n      rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return { titleX, titleY, maxWidth, rotation };\n  }\n  class Scale extends Element {\n    constructor(cfg) {\n      super();\n      this.id = cfg.id;\n      this.type = cfg.type;\n      this.options = undefined;\n      this.ctx = cfg.ctx;\n      this.chart = cfg.chart;\n      this.top = undefined;\n      this.bottom = undefined;\n      this.left = undefined;\n      this.right = undefined;\n      this.width = undefined;\n      this.height = undefined;\n      this._margins = {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      };\n      this.maxWidth = undefined;\n      this.maxHeight = undefined;\n      this.paddingTop = undefined;\n      this.paddingBottom = undefined;\n      this.paddingLeft = undefined;\n      this.paddingRight = undefined;\n      this.axis = undefined;\n      this.labelRotation = undefined;\n      this.min = undefined;\n      this.max = undefined;\n      this._range = undefined;\n      this.ticks = [];\n      this._gridLineItems = null;\n      this._labelItems = null;\n      this._labelSizes = null;\n      this._length = 0;\n      this._maxLength = 0;\n      this._longestTextCache = {};\n      this._startPixel = undefined;\n      this._endPixel = undefined;\n      this._reversePixels = false;\n      this._userMax = undefined;\n      this._userMin = undefined;\n      this._suggestedMax = undefined;\n      this._suggestedMin = undefined;\n      this._ticksLength = 0;\n      this._borderValue = 0;\n      this._cache = {};\n      this._dataLimitsCached = false;\n      this.$context = undefined;\n    }\n    init(options) {\n      const me = this;\n      me.options = options.setContext(me.getContext());\n      me.axis = options.axis;\n      me._userMin = me.parse(options.min);\n      me._userMax = me.parse(options.max);\n      me._suggestedMin = me.parse(options.suggestedMin);\n      me._suggestedMax = me.parse(options.suggestedMax);\n    }\n    parse(raw, index) {\n      return raw;\n    }\n    getUserBounds() {\n      let { _userMin, _userMax, _suggestedMin, _suggestedMax } = this;\n      _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n      _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n      _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n      _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n      return {\n        min: finiteOrDefault(_userMin, _suggestedMin),\n        max: finiteOrDefault(_userMax, _suggestedMax),\n        minDefined: isNumberFinite(_userMin),\n        maxDefined: isNumberFinite(_userMax)\n      };\n    }\n    getMinMax(canStack) {\n      const me = this;\n      let { min, max, minDefined, maxDefined } = me.getUserBounds();\n      let range;\n      if (minDefined && maxDefined) {\n        return { min, max };\n      }\n      const metas = me.getMatchingVisibleMetas();\n      for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n        range = metas[i].controller.getMinMax(me, canStack);\n        if (!minDefined) {\n          min = Math.min(min, range.min);\n        }\n        if (!maxDefined) {\n          max = Math.max(max, range.max);\n        }\n      }\n      return {\n        min: finiteOrDefault(min, finiteOrDefault(max, min)),\n        max: finiteOrDefault(max, finiteOrDefault(min, max))\n      };\n    }\n    getPadding() {\n      const me = this;\n      return {\n        left: me.paddingLeft || 0,\n        top: me.paddingTop || 0,\n        right: me.paddingRight || 0,\n        bottom: me.paddingBottom || 0\n      };\n    }\n    getTicks() {\n      return this.ticks;\n    }\n    getLabels() {\n      const data = this.chart.data;\n      return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n    beforeLayout() {\n      this._cache = {};\n      this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n      callback(this.options.beforeUpdate, [this]);\n    }\n    update(maxWidth, maxHeight, margins) {\n      const me = this;\n      const tickOpts = me.options.ticks;\n      const sampleSize = tickOpts.sampleSize;\n      me.beforeUpdate();\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me._margins = margins = Object.assign({\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, margins);\n      me.ticks = null;\n      me._labelSizes = null;\n      me._gridLineItems = null;\n      me._labelItems = null;\n      me.beforeSetDimensions();\n      me.setDimensions();\n      me.afterSetDimensions();\n      me._maxLength = me.isHorizontal()\n        ? me.width + margins.left + margins.right\n        : me.height + margins.top + margins.bottom;\n      if (!me._dataLimitsCached) {\n        me.beforeDataLimits();\n        me.determineDataLimits();\n        me.afterDataLimits();\n        me._range = _addGrace(me, me.options.grace);\n        me._dataLimitsCached = true;\n      }\n      me.beforeBuildTicks();\n      me.ticks = me.buildTicks() || [];\n      me.afterBuildTicks();\n      const samplingEnabled = sampleSize < me.ticks.length;\n      me._convertTicksToLabels(samplingEnabled ? sample(me.ticks, sampleSize) : me.ticks);\n      me.configure();\n      me.beforeCalculateLabelRotation();\n      me.calculateLabelRotation();\n      me.afterCalculateLabelRotation();\n      if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n        me.ticks = autoSkip(me, me.ticks);\n        me._labelSizes = null;\n      }\n      if (samplingEnabled) {\n        me._convertTicksToLabels(me.ticks);\n      }\n      me.beforeFit();\n      me.fit();\n      me.afterFit();\n      me.afterUpdate();\n    }\n    configure() {\n      const me = this;\n      let reversePixels = me.options.reverse;\n      let startPixel, endPixel;\n      if (me.isHorizontal()) {\n        startPixel = me.left;\n        endPixel = me.right;\n      } else {\n        startPixel = me.top;\n        endPixel = me.bottom;\n        reversePixels = !reversePixels;\n      }\n      me._startPixel = startPixel;\n      me._endPixel = endPixel;\n      me._reversePixels = reversePixels;\n      me._length = endPixel - startPixel;\n      me._alignToPixels = me.options.alignToPixels;\n    }\n    afterUpdate() {\n      callback(this.options.afterUpdate, [this]);\n    }\n    beforeSetDimensions() {\n      callback(this.options.beforeSetDimensions, [this]);\n    }\n    setDimensions() {\n      const me = this;\n      if (me.isHorizontal()) {\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight;\n        me.top = 0;\n        me.bottom = me.height;\n      }\n      me.paddingLeft = 0;\n      me.paddingTop = 0;\n      me.paddingRight = 0;\n      me.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n      callback(this.options.afterSetDimensions, [this]);\n    }\n    _callHooks(name) {\n      const me = this;\n      me.chart.notifyPlugins(name, me.getContext());\n      callback(me.options[name], [me]);\n    }\n    beforeDataLimits() {\n      this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() { }\n    afterDataLimits() {\n      this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n      this._callHooks('beforeBuildTicks');\n    }\n    buildTicks() {\n      return [];\n    }\n    afterBuildTicks() {\n      this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n      callback(this.options.beforeTickToLabelConversion, [this]);\n    }\n    generateTickLabels(ticks) {\n      const me = this;\n      const tickOpts = me.options.ticks;\n      let i, ilen, tick;\n      for (i = 0, ilen = ticks.length; i < ilen; i++) {\n        tick = ticks[i];\n        tick.label = callback(tickOpts.callback, [tick.value, i, ticks], me);\n      }\n      for (i = 0; i < ilen; i++) {\n        if (isNullOrUndef(ticks[i].label)) {\n          ticks.splice(i, 1);\n          ilen--;\n          i--;\n        }\n      }\n    }\n    afterTickToLabelConversion() {\n      callback(this.options.afterTickToLabelConversion, [this]);\n    }\n    beforeCalculateLabelRotation() {\n      callback(this.options.beforeCalculateLabelRotation, [this]);\n    }\n    calculateLabelRotation() {\n      const me = this;\n      const options = me.options;\n      const tickOpts = options.ticks;\n      const numTicks = me.ticks.length;\n      const minRotation = tickOpts.minRotation || 0;\n      const maxRotation = tickOpts.maxRotation;\n      let labelRotation = minRotation;\n      let tickWidth, maxHeight, maxLabelDiagonal;\n      if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {\n        me.labelRotation = minRotation;\n        return;\n      }\n      const labelSizes = me._getLabelSizes();\n      const maxLabelWidth = labelSizes.widest.width;\n      const maxLabelHeight = labelSizes.highest.height;\n      const maxWidth = _limitValue(me.chart.width - maxLabelWidth, 0, me.maxWidth);\n      tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);\n      if (maxLabelWidth + 6 > tickWidth) {\n        tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n        maxHeight = me.maxHeight - getTickMarkLength(options.grid)\n          - tickOpts.padding - getTitleHeight(options.title, me.chart.options.font);\n        maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n        labelRotation = toDegrees(Math.min(\n          Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),\n          Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)\n        ));\n        labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n      }\n      me.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n      callback(this.options.afterCalculateLabelRotation, [this]);\n    }\n    beforeFit() {\n      callback(this.options.beforeFit, [this]);\n    }\n    fit() {\n      const me = this;\n      const minSize = {\n        width: 0,\n        height: 0\n      };\n      const { chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = me;\n      const display = me._isVisible();\n      const isHorizontal = me.isHorizontal();\n      if (display) {\n        const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n        if (isHorizontal) {\n          minSize.width = me.maxWidth;\n          minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n        } else {\n          minSize.height = me.maxHeight;\n          minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n        }\n        if (tickOpts.display && me.ticks.length) {\n          const { first, last, widest, highest } = me._getLabelSizes();\n          const tickPadding = tickOpts.padding * 2;\n          const angleRadians = toRadians(me.labelRotation);\n          const cos = Math.cos(angleRadians);\n          const sin = Math.sin(angleRadians);\n          if (isHorizontal) {\n            const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n            minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);\n          } else {\n            const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n            minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth + tickPadding);\n          }\n          me._calculatePadding(first, last, sin, cos);\n        }\n      }\n      me._handleMargins();\n      if (isHorizontal) {\n        me.width = me._length = chart.width - me._margins.left - me._margins.right;\n        me.height = minSize.height;\n      } else {\n        me.width = minSize.width;\n        me.height = me._length = chart.height - me._margins.top - me._margins.bottom;\n      }\n    }\n    _calculatePadding(first, last, sin, cos) {\n      const me = this;\n      const { ticks: { align, padding }, position } = me.options;\n      const isRotated = me.labelRotation !== 0;\n      const labelsBelowTicks = position !== 'top' && me.axis === 'x';\n      if (me.isHorizontal()) {\n        const offsetLeft = me.getPixelForTick(0) - me.left;\n        const offsetRight = me.right - me.getPixelForTick(me.ticks.length - 1);\n        let paddingLeft = 0;\n        let paddingRight = 0;\n        if (isRotated) {\n          if (labelsBelowTicks) {\n            paddingLeft = cos * first.width;\n            paddingRight = sin * last.height;\n          } else {\n            paddingLeft = sin * first.height;\n            paddingRight = cos * last.width;\n          }\n        } else if (align === 'start') {\n          paddingRight = last.width;\n        } else if (align === 'end') {\n          paddingLeft = first.width;\n        } else {\n          paddingLeft = first.width / 2;\n          paddingRight = last.width / 2;\n        }\n        me.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * me.width / (me.width - offsetLeft), 0);\n        me.paddingRight = Math.max((paddingRight - offsetRight + padding) * me.width / (me.width - offsetRight), 0);\n      } else {\n        let paddingTop = last.height / 2;\n        let paddingBottom = first.height / 2;\n        if (align === 'start') {\n          paddingTop = 0;\n          paddingBottom = first.height;\n        } else if (align === 'end') {\n          paddingTop = last.height;\n          paddingBottom = 0;\n        }\n        me.paddingTop = paddingTop + padding;\n        me.paddingBottom = paddingBottom + padding;\n      }\n    }\n    _handleMargins() {\n      const me = this;\n      if (me._margins) {\n        me._margins.left = Math.max(me.paddingLeft, me._margins.left);\n        me._margins.top = Math.max(me.paddingTop, me._margins.top);\n        me._margins.right = Math.max(me.paddingRight, me._margins.right);\n        me._margins.bottom = Math.max(me.paddingBottom, me._margins.bottom);\n      }\n    }\n    afterFit() {\n      callback(this.options.afterFit, [this]);\n    }\n    isHorizontal() {\n      const { axis, position } = this.options;\n      return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n    isFullSize() {\n      return this.options.fullSize;\n    }\n    _convertTicksToLabels(ticks) {\n      const me = this;\n      me.beforeTickToLabelConversion();\n      me.generateTickLabels(ticks);\n      me.afterTickToLabelConversion();\n    }\n    _getLabelSizes() {\n      const me = this;\n      let labelSizes = me._labelSizes;\n      if (!labelSizes) {\n        const sampleSize = me.options.ticks.sampleSize;\n        let ticks = me.ticks;\n        if (sampleSize < ticks.length) {\n          ticks = sample(ticks, sampleSize);\n        }\n        me._labelSizes = labelSizes = me._computeLabelSizes(ticks, ticks.length);\n      }\n      return labelSizes;\n    }\n    _computeLabelSizes(ticks, length) {\n      const { ctx, _longestTextCache: caches } = this;\n      const widths = [];\n      const heights = [];\n      let widestLabelSize = 0;\n      let highestLabelSize = 0;\n      let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n      for (i = 0; i < length; ++i) {\n        label = ticks[i].label;\n        tickFont = this._resolveTickFontOptions(i);\n        ctx.font = fontString = tickFont.string;\n        cache = caches[fontString] = caches[fontString] || { data: {}, gc: [] };\n        lineHeight = tickFont.lineHeight;\n        width = height = 0;\n        if (!isNullOrUndef(label) && !isArray(label)) {\n          width = _measureText(ctx, cache.data, cache.gc, width, label);\n          height = lineHeight;\n        } else if (isArray(label)) {\n          for (j = 0, jlen = label.length; j < jlen; ++j) {\n            nestedLabel = label[j];\n            if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n              width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n              height += lineHeight;\n            }\n          }\n        }\n        widths.push(width);\n        heights.push(height);\n        widestLabelSize = Math.max(width, widestLabelSize);\n        highestLabelSize = Math.max(height, highestLabelSize);\n      }\n      garbageCollect(caches, length);\n      const widest = widths.indexOf(widestLabelSize);\n      const highest = heights.indexOf(highestLabelSize);\n      const valueAt = (idx) => ({ width: widths[idx] || 0, height: heights[idx] || 0 });\n      return {\n        first: valueAt(0),\n        last: valueAt(length - 1),\n        widest: valueAt(widest),\n        highest: valueAt(highest),\n        widths,\n        heights,\n      };\n    }\n    getLabelForValue(value) {\n      return value;\n    }\n    getPixelForValue(value, index) {\n      return NaN;\n    }\n    getValueForPixel(pixel) { }\n    getPixelForTick(index) {\n      const ticks = this.ticks;\n      if (index < 0 || index > ticks.length - 1) {\n        return null;\n      }\n      return this.getPixelForValue(ticks[index].value);\n    }\n    getPixelForDecimal(decimal) {\n      const me = this;\n      if (me._reversePixels) {\n        decimal = 1 - decimal;\n      }\n      const pixel = me._startPixel + decimal * me._length;\n      return _int16Range(me._alignToPixels ? _alignPixel(me.chart, pixel, 0) : pixel);\n    }\n    getDecimalForPixel(pixel) {\n      const decimal = (pixel - this._startPixel) / this._length;\n      return this._reversePixels ? 1 - decimal : decimal;\n    }\n    getBasePixel() {\n      return this.getPixelForValue(this.getBaseValue());\n    }\n    getBaseValue() {\n      const { min, max } = this;\n      return min < 0 && max < 0 ? max :\n        min > 0 && max > 0 ? min :\n          0;\n    }\n    getContext(index) {\n      const me = this;\n      const ticks = me.ticks || [];\n      if (index >= 0 && index < ticks.length) {\n        const tick = ticks[index];\n        return tick.$context ||\n          (tick.$context = createTickContext(me.getContext(), index, tick));\n      }\n      return me.$context ||\n        (me.$context = createScaleContext(me.chart.getContext(), me));\n    }\n    _tickSize() {\n      const me = this;\n      const optionTicks = me.options.ticks;\n      const rot = toRadians(me.labelRotation);\n      const cos = Math.abs(Math.cos(rot));\n      const sin = Math.abs(Math.sin(rot));\n      const labelSizes = me._getLabelSizes();\n      const padding = optionTicks.autoSkipPadding || 0;\n      const w = labelSizes ? labelSizes.widest.width + padding : 0;\n      const h = labelSizes ? labelSizes.highest.height + padding : 0;\n      return me.isHorizontal()\n        ? h * cos > w * sin ? w / cos : h / sin\n        : h * sin < w * cos ? h / cos : w / sin;\n    }\n    _isVisible() {\n      const display = this.options.display;\n      if (display !== 'auto') {\n        return !!display;\n      }\n      return this.getMatchingVisibleMetas().length > 0;\n    }\n    _computeGridLineItems(chartArea) {\n      const me = this;\n      const axis = me.axis;\n      const chart = me.chart;\n      const options = me.options;\n      const { grid, position } = options;\n      const offset = grid.offset;\n      const isHorizontal = me.isHorizontal();\n      const ticks = me.ticks;\n      const ticksLength = ticks.length + (offset ? 1 : 0);\n      const tl = getTickMarkLength(grid);\n      const items = [];\n      const borderOpts = grid.setContext(me.getContext());\n      const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;\n      const axisHalfWidth = axisWidth / 2;\n      const alignBorderValue = function (pixel) {\n        return _alignPixel(chart, pixel, axisWidth);\n      };\n      let borderValue, i, lineValue, alignedLineValue;\n      let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n      if (position === 'top') {\n        borderValue = alignBorderValue(me.bottom);\n        ty1 = me.bottom - tl;\n        ty2 = borderValue - axisHalfWidth;\n        y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n        y2 = chartArea.bottom;\n      } else if (position === 'bottom') {\n        borderValue = alignBorderValue(me.top);\n        y1 = chartArea.top;\n        y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n        ty1 = borderValue + axisHalfWidth;\n        ty2 = me.top + tl;\n      } else if (position === 'left') {\n        borderValue = alignBorderValue(me.right);\n        tx1 = me.right - tl;\n        tx2 = borderValue - axisHalfWidth;\n        x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n        x2 = chartArea.right;\n      } else if (position === 'right') {\n        borderValue = alignBorderValue(me.left);\n        x1 = chartArea.left;\n        x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n        tx1 = borderValue + axisHalfWidth;\n        tx2 = me.left + tl;\n      } else if (axis === 'x') {\n        if (position === 'center') {\n          borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n        } else if (isObject(position)) {\n          const positionAxisID = Object.keys(position)[0];\n          const value = position[positionAxisID];\n          borderValue = alignBorderValue(me.chart.scales[positionAxisID].getPixelForValue(value));\n        }\n        y1 = chartArea.top;\n        y2 = chartArea.bottom;\n        ty1 = borderValue + axisHalfWidth;\n        ty2 = ty1 + tl;\n      } else if (axis === 'y') {\n        if (position === 'center') {\n          borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n        } else if (isObject(position)) {\n          const positionAxisID = Object.keys(position)[0];\n          const value = position[positionAxisID];\n          borderValue = alignBorderValue(me.chart.scales[positionAxisID].getPixelForValue(value));\n        }\n        tx1 = borderValue - axisHalfWidth;\n        tx2 = tx1 - tl;\n        x1 = chartArea.left;\n        x2 = chartArea.right;\n      }\n      for (i = 0; i < ticksLength; ++i) {\n        const optsAtIndex = grid.setContext(me.getContext(i));\n        const lineWidth = optsAtIndex.lineWidth;\n        const lineColor = optsAtIndex.color;\n        const borderDash = grid.borderDash || [];\n        const borderDashOffset = optsAtIndex.borderDashOffset;\n        const tickWidth = optsAtIndex.tickWidth;\n        const tickColor = optsAtIndex.tickColor;\n        const tickBorderDash = optsAtIndex.tickBorderDash || [];\n        const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n        lineValue = getPixelForGridLine(me, i, offset);\n        if (lineValue === undefined) {\n          continue;\n        }\n        alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n        if (isHorizontal) {\n          tx1 = tx2 = x1 = x2 = alignedLineValue;\n        } else {\n          ty1 = ty2 = y1 = y2 = alignedLineValue;\n        }\n        items.push({\n          tx1,\n          ty1,\n          tx2,\n          ty2,\n          x1,\n          y1,\n          x2,\n          y2,\n          width: lineWidth,\n          color: lineColor,\n          borderDash,\n          borderDashOffset,\n          tickWidth,\n          tickColor,\n          tickBorderDash,\n          tickBorderDashOffset,\n        });\n      }\n      me._ticksLength = ticksLength;\n      me._borderValue = borderValue;\n      return items;\n    }\n    _computeLabelItems(chartArea) {\n      const me = this;\n      const axis = me.axis;\n      const options = me.options;\n      const { position, ticks: optionTicks } = options;\n      const isHorizontal = me.isHorizontal();\n      const ticks = me.ticks;\n      const { align, crossAlign, padding, mirror } = optionTicks;\n      const tl = getTickMarkLength(options.grid);\n      const tickAndPadding = tl + padding;\n      const hTickAndPadding = mirror ? -padding : tickAndPadding;\n      const rotation = -toRadians(me.labelRotation);\n      const items = [];\n      let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n      let textBaseline = 'middle';\n      if (position === 'top') {\n        y = me.bottom - hTickAndPadding;\n        textAlign = me._getXAxisLabelAlignment();\n      } else if (position === 'bottom') {\n        y = me.top + hTickAndPadding;\n        textAlign = me._getXAxisLabelAlignment();\n      } else if (position === 'left') {\n        const ret = me._getYAxisLabelAlignment(tl);\n        textAlign = ret.textAlign;\n        x = ret.x;\n      } else if (position === 'right') {\n        const ret = me._getYAxisLabelAlignment(tl);\n        textAlign = ret.textAlign;\n        x = ret.x;\n      } else if (axis === 'x') {\n        if (position === 'center') {\n          y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n        } else if (isObject(position)) {\n          const positionAxisID = Object.keys(position)[0];\n          const value = position[positionAxisID];\n          y = me.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n        }\n        textAlign = me._getXAxisLabelAlignment();\n      } else if (axis === 'y') {\n        if (position === 'center') {\n          x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n        } else if (isObject(position)) {\n          const positionAxisID = Object.keys(position)[0];\n          const value = position[positionAxisID];\n          x = me.chart.scales[positionAxisID].getPixelForValue(value);\n        }\n        textAlign = me._getYAxisLabelAlignment(tl).textAlign;\n      }\n      if (axis === 'y') {\n        if (align === 'start') {\n          textBaseline = 'top';\n        } else if (align === 'end') {\n          textBaseline = 'bottom';\n        }\n      }\n      const labelSizes = me._getLabelSizes();\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        tick = ticks[i];\n        label = tick.label;\n        const optsAtIndex = optionTicks.setContext(me.getContext(i));\n        pixel = me.getPixelForTick(i) + optionTicks.labelOffset;\n        font = me._resolveTickFontOptions(i);\n        lineHeight = font.lineHeight;\n        lineCount = isArray(label) ? label.length : 1;\n        const halfCount = lineCount / 2;\n        const color = optsAtIndex.color;\n        const strokeColor = optsAtIndex.textStrokeColor;\n        const strokeWidth = optsAtIndex.textStrokeWidth;\n        if (isHorizontal) {\n          x = pixel;\n          if (position === 'top') {\n            if (crossAlign === 'near' || rotation !== 0) {\n              textOffset = -lineCount * lineHeight + lineHeight / 2;\n            } else if (crossAlign === 'center') {\n              textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n            } else {\n              textOffset = -labelSizes.highest.height + lineHeight / 2;\n            }\n          } else {\n            if (crossAlign === 'near' || rotation !== 0) {\n              textOffset = lineHeight / 2;\n            } else if (crossAlign === 'center') {\n              textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n            } else {\n              textOffset = labelSizes.highest.height - lineCount * lineHeight;\n            }\n          }\n          if (mirror) {\n            textOffset *= -1;\n          }\n        } else {\n          y = pixel;\n          textOffset = (1 - lineCount) * lineHeight / 2;\n        }\n        let backdrop;\n        if (optsAtIndex.showLabelBackdrop) {\n          const labelPadding = toPadding(optsAtIndex.backdropPadding);\n          const height = labelSizes.heights[i];\n          const width = labelSizes.widths[i];\n          let top = y + textOffset - labelPadding.top;\n          let left = x - labelPadding.left;\n          switch (textBaseline) {\n            case 'middle':\n              top -= height / 2;\n              break;\n            case 'bottom':\n              top -= height;\n              break;\n          }\n          switch (textAlign) {\n            case 'center':\n              left -= width / 2;\n              break;\n            case 'right':\n              left -= width;\n              break;\n          }\n          backdrop = {\n            left,\n            top,\n            width: width + labelPadding.width,\n            height: height + labelPadding.height,\n            color: optsAtIndex.backdropColor,\n          };\n        }\n        items.push({\n          rotation,\n          label,\n          font,\n          color,\n          strokeColor,\n          strokeWidth,\n          textOffset,\n          textAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        });\n      }\n      return items;\n    }\n    _getXAxisLabelAlignment() {\n      const me = this;\n      const { position, ticks } = me.options;\n      const rotation = -toRadians(me.labelRotation);\n      if (rotation) {\n        return position === 'top' ? 'left' : 'right';\n      }\n      let align = 'center';\n      if (ticks.align === 'start') {\n        align = 'left';\n      } else if (ticks.align === 'end') {\n        align = 'right';\n      }\n      return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n      const me = this;\n      const { position, ticks: { crossAlign, mirror, padding } } = me.options;\n      const labelSizes = me._getLabelSizes();\n      const tickAndPadding = tl + padding;\n      const widest = labelSizes.widest.width;\n      let textAlign;\n      let x;\n      if (position === 'left') {\n        if (mirror) {\n          textAlign = 'left';\n          x = me.right + padding;\n        } else {\n          x = me.right - tickAndPadding;\n          if (crossAlign === 'near') {\n            textAlign = 'right';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x -= (widest / 2);\n          } else {\n            textAlign = 'left';\n            x = me.left;\n          }\n        }\n      } else if (position === 'right') {\n        if (mirror) {\n          textAlign = 'right';\n          x = me.left + padding;\n        } else {\n          x = me.left + tickAndPadding;\n          if (crossAlign === 'near') {\n            textAlign = 'left';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x += widest / 2;\n          } else {\n            textAlign = 'right';\n            x = me.right;\n          }\n        }\n      } else {\n        textAlign = 'right';\n      }\n      return { textAlign, x };\n    }\n    _computeLabelArea() {\n      const me = this;\n      if (me.options.ticks.mirror) {\n        return;\n      }\n      const chart = me.chart;\n      const position = me.options.position;\n      if (position === 'left' || position === 'right') {\n        return { top: 0, left: me.left, bottom: chart.height, right: me.right };\n      } if (position === 'top' || position === 'bottom') {\n        return { top: me.top, left: 0, bottom: me.bottom, right: chart.width };\n      }\n    }\n    drawBackground() {\n      const { ctx, options: { backgroundColor }, left, top, width, height } = this;\n      if (backgroundColor) {\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(left, top, width, height);\n        ctx.restore();\n      }\n    }\n    getLineWidthForValue(value) {\n      const me = this;\n      const grid = me.options.grid;\n      if (!me._isVisible() || !grid.display) {\n        return 0;\n      }\n      const ticks = me.ticks;\n      const index = ticks.findIndex(t => t.value === value);\n      if (index >= 0) {\n        const opts = grid.setContext(me.getContext(index));\n        return opts.lineWidth;\n      }\n      return 0;\n    }\n    drawGrid(chartArea) {\n      const me = this;\n      const grid = me.options.grid;\n      const ctx = me.ctx;\n      const items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));\n      let i, ilen;\n      const drawLine = (p1, p2, style) => {\n        if (!style.width || !style.color) {\n          return;\n        }\n        ctx.save();\n        ctx.lineWidth = style.width;\n        ctx.strokeStyle = style.color;\n        ctx.setLineDash(style.borderDash || []);\n        ctx.lineDashOffset = style.borderDashOffset;\n        ctx.beginPath();\n        ctx.moveTo(p1.x, p1.y);\n        ctx.lineTo(p2.x, p2.y);\n        ctx.stroke();\n        ctx.restore();\n      };\n      if (grid.display) {\n        for (i = 0, ilen = items.length; i < ilen; ++i) {\n          const item = items[i];\n          if (grid.drawOnChartArea) {\n            drawLine(\n              { x: item.x1, y: item.y1 },\n              { x: item.x2, y: item.y2 },\n              item\n            );\n          }\n          if (grid.drawTicks) {\n            drawLine(\n              { x: item.tx1, y: item.ty1 },\n              { x: item.tx2, y: item.ty2 },\n              {\n                color: item.tickColor,\n                width: item.tickWidth,\n                borderDash: item.tickBorderDash,\n                borderDashOffset: item.tickBorderDashOffset\n              }\n            );\n          }\n        }\n      }\n    }\n    drawBorder() {\n      const me = this;\n      const { chart, ctx, options: { grid } } = me;\n      const borderOpts = grid.setContext(me.getContext());\n      const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;\n      if (!axisWidth) {\n        return;\n      }\n      const lastLineWidth = grid.setContext(me.getContext(0)).lineWidth;\n      const borderValue = me._borderValue;\n      let x1, x2, y1, y2;\n      if (me.isHorizontal()) {\n        x1 = _alignPixel(chart, me.left, axisWidth) - axisWidth / 2;\n        x2 = _alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;\n        y1 = y2 = borderValue;\n      } else {\n        y1 = _alignPixel(chart, me.top, axisWidth) - axisWidth / 2;\n        y2 = _alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;\n        x1 = x2 = borderValue;\n      }\n      ctx.save();\n      ctx.lineWidth = borderOpts.borderWidth;\n      ctx.strokeStyle = borderOpts.borderColor;\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n      ctx.restore();\n    }\n    drawLabels(chartArea) {\n      const me = this;\n      const optionTicks = me.options.ticks;\n      if (!optionTicks.display) {\n        return;\n      }\n      const ctx = me.ctx;\n      const area = me._computeLabelArea();\n      if (area) {\n        clipArea(ctx, area);\n      }\n      const items = me._labelItems || (me._labelItems = me._computeLabelItems(chartArea));\n      let i, ilen;\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        const tickFont = item.font;\n        const label = item.label;\n        if (item.backdrop) {\n          ctx.fillStyle = item.backdrop.color;\n          ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);\n        }\n        let y = item.textOffset;\n        renderText(ctx, label, 0, y, tickFont, item);\n      }\n      if (area) {\n        unclipArea(ctx);\n      }\n    }\n    drawTitle() {\n      const { ctx, options: { position, title, reverse } } = this;\n      if (!title.display) {\n        return;\n      }\n      const font = toFont(title.font);\n      const padding = toPadding(title.padding);\n      const align = title.align;\n      let offset = font.lineHeight / 2;\n      if (position === 'bottom') {\n        offset += padding.bottom;\n        if (isArray(title.text)) {\n          offset += font.lineHeight * (title.text.length - 1);\n        }\n      } else {\n        offset += padding.top;\n      }\n      const { titleX, titleY, maxWidth, rotation } = titleArgs(this, offset, position, align);\n      renderText(ctx, title.text, 0, 0, font, {\n        color: title.color,\n        maxWidth,\n        rotation,\n        textAlign: titleAlign(align, position, reverse),\n        textBaseline: 'middle',\n        translation: [titleX, titleY],\n      });\n    }\n    draw(chartArea) {\n      const me = this;\n      if (!me._isVisible()) {\n        return;\n      }\n      me.drawBackground();\n      me.drawGrid(chartArea);\n      me.drawBorder();\n      me.drawTitle();\n      me.drawLabels(chartArea);\n    }\n    _layers() {\n      const me = this;\n      const opts = me.options;\n      const tz = opts.ticks && opts.ticks.z || 0;\n      const gz = opts.grid && opts.grid.z || 0;\n      if (!me._isVisible() || me.draw !== Scale.prototype.draw) {\n        return [{\n          z: tz,\n          draw(chartArea) {\n            me.draw(chartArea);\n          }\n        }];\n      }\n      return [{\n        z: gz,\n        draw(chartArea) {\n          me.drawBackground();\n          me.drawGrid(chartArea);\n          me.drawTitle();\n        }\n      }, {\n        z: gz + 1,\n        draw() {\n          me.drawBorder();\n        }\n      }, {\n        z: tz,\n        draw(chartArea) {\n          me.drawLabels(chartArea);\n        }\n      }];\n    }\n    getMatchingVisibleMetas(type) {\n      const me = this;\n      const metas = me.chart.getSortedVisibleDatasetMetas();\n      const axisID = me.axis + 'AxisID';\n      const result = [];\n      let i, ilen;\n      for (i = 0, ilen = metas.length; i < ilen; ++i) {\n        const meta = metas[i];\n        if (meta[axisID] === me.id && (!type || meta.type === type)) {\n          result.push(meta);\n        }\n      }\n      return result;\n    }\n    _resolveTickFontOptions(index) {\n      const opts = this.options.ticks.setContext(this.getContext(index));\n      return toFont(opts.font);\n    }\n    _maxDigits() {\n      const me = this;\n      const fontSize = me._resolveTickFontOptions(0).lineHeight;\n      return (me.isHorizontal() ? me.width : me.height) / fontSize;\n    }\n  }\n\n  function _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {\n    if (!defined(fallback)) {\n      fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n      [Symbol.toStringTag]: 'Object',\n      _cacheable: true,\n      _scopes: scopes,\n      _rootScopes: rootScopes,\n      _fallback: fallback,\n      _getTarget: getTarget,\n      override: (scope) => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback),\n    };\n    return new Proxy(cache, {\n      deleteProperty(target, prop) {\n        delete target[prop];\n        delete target._keys;\n        delete scopes[0][prop];\n        return true;\n      },\n      get(target, prop) {\n        return _cached(target, prop,\n          () => _resolveWithPrefixes(prop, prefixes, scopes, target));\n      },\n      getOwnPropertyDescriptor(target, prop) {\n        return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n      },\n      getPrototypeOf() {\n        return Reflect.getPrototypeOf(scopes[0]);\n      },\n      has(target, prop) {\n        return getKeysFromAllScopes(target).includes(prop);\n      },\n      ownKeys(target) {\n        return getKeysFromAllScopes(target);\n      },\n      set(target, prop, value) {\n        const storage = target._storage || (target._storage = getTarget());\n        storage[prop] = value;\n        delete target[prop];\n        delete target._keys;\n        return true;\n      }\n    });\n  }\n  function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n      _cacheable: false,\n      _proxy: proxy,\n      _context: context,\n      _subProxy: subProxy,\n      _stack: new Set(),\n      _descriptors: _descriptors(proxy, descriptorDefaults),\n      setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),\n      override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n      deleteProperty(target, prop) {\n        delete target[prop];\n        delete proxy[prop];\n        return true;\n      },\n      get(target, prop, receiver) {\n        return _cached(target, prop,\n          () => _resolveWithContext(target, prop, receiver));\n      },\n      getOwnPropertyDescriptor(target, prop) {\n        return target._descriptors.allKeys\n          ? Reflect.has(proxy, prop) ? { enumerable: true, configurable: true } : undefined\n          : Reflect.getOwnPropertyDescriptor(proxy, prop);\n      },\n      getPrototypeOf() {\n        return Reflect.getPrototypeOf(proxy);\n      },\n      has(target, prop) {\n        return Reflect.has(proxy, prop);\n      },\n      ownKeys() {\n        return Reflect.ownKeys(proxy);\n      },\n      set(target, prop, value) {\n        proxy[prop] = value;\n        delete target[prop];\n        return true;\n      }\n    });\n  }\n  function _descriptors(proxy, defaults = { scriptable: true, indexable: true }) {\n    const { _scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys } = proxy;\n    return {\n      allKeys: _allKeys,\n      scriptable: _scriptable,\n      indexable: _indexable,\n      isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,\n      isIndexable: isFunction(_indexable) ? _indexable : () => _indexable\n    };\n  }\n  const readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;\n  const needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters';\n  function _cached(target, prop, resolve) {\n    let value = target[prop];\n    if (defined(value)) {\n      return value;\n    }\n    value = resolve();\n    if (defined(value)) {\n      target[prop] = value;\n    }\n    return value;\n  }\n  function _resolveWithContext(target, prop, receiver) {\n    const { _proxy, _context, _subProxy, _descriptors: descriptors } = target;\n    let value = _proxy[prop];\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n      value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n      value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n      value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n  }\n  function _resolveScriptable(prop, value, target, receiver) {\n    const { _proxy, _context, _subProxy, _stack } = target;\n    if (_stack.has(prop)) {\n      throw new Error('Recursion detected: ' + [..._stack].join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    value = value(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (isObject(value)) {\n      value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n  }\n  function _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy, _context, _subProxy, _descriptors: descriptors } = target;\n    if (defined(_context.index) && isIndexable(prop)) {\n      value = value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n      const arr = value;\n      const scopes = _proxy._scopes.filter(s => s !== arr);\n      value = [];\n      for (const item of arr) {\n        const resolver = createSubResolver(scopes, _proxy, prop, item);\n        value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n      }\n    }\n    return value;\n  }\n  function resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n  }\n  const getScope = (key, parent) => key === true ? parent\n    : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\n  function addScopes(set, parentScopes, key, parentFallback) {\n    for (const parent of parentScopes) {\n      const scope = getScope(key, parent);\n      if (scope) {\n        set.add(scope);\n        const fallback = resolveFallback(scope._fallback, key, scope);\n        if (defined(fallback) && fallback !== key && fallback !== parentFallback) {\n          return fallback;\n        }\n      } else if (scope === false && defined(parentFallback) && key !== parentFallback) {\n        return null;\n      }\n    }\n    return false;\n  }\n  function createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [...parentScopes, ...rootScopes];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop);\n    if (key === null) {\n      return false;\n    }\n    if (defined(fallback) && fallback !== prop) {\n      key = addScopesFromKey(set, allScopes, fallback, key);\n      if (key === null) {\n        return false;\n      }\n    }\n    return _createResolver([...set], [''], rootScopes, fallback,\n      () => subGetTarget(resolver, prop, value));\n  }\n  function addScopesFromKey(set, allScopes, key, fallback) {\n    while (key) {\n      key = addScopes(set, allScopes, key, fallback);\n    }\n    return key;\n  }\n  function subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n      parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n      return value;\n    }\n    return target;\n  }\n  function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes) {\n      value = _resolve(readKey(prefix, prop), scopes);\n      if (defined(value)) {\n        return needsSubResolver(prop, value)\n          ? createSubResolver(scopes, proxy, prop, value)\n          : value;\n      }\n    }\n  }\n  function _resolve(key, scopes) {\n    for (const scope of scopes) {\n      if (!scope) {\n        continue;\n      }\n      const value = scope[key];\n      if (defined(value)) {\n        return value;\n      }\n    }\n  }\n  function getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n      keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n  }\n  function resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes) {\n      for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {\n        set.add(key);\n      }\n    }\n    return [...set];\n  }\n\n  const EPSILON = Number.EPSILON || 1e-14;\n  const getPoint = (points, i) => i < points.length && !points[i].skip && points[i];\n  const getValueAxis = (indexAxis) => indexAxis === 'x' ? 'y' : 'x';\n  function splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01;\n    const fb = t * s12;\n    return {\n      previous: {\n        x: current.x - fa * (next.x - previous.x),\n        y: current.y - fa * (next.y - previous.y)\n      },\n      next: {\n        x: current.x + fb * (next.x - previous.x),\n        y: current.y + fb * (next.y - previous.y)\n      }\n    };\n  }\n  function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for (let i = 0; i < pointsLen - 1; ++i) {\n      pointCurrent = pointAfter;\n      pointAfter = getPoint(points, i + 1);\n      if (!pointCurrent || !pointAfter) {\n        continue;\n      }\n      if (almostEquals(deltaK[i], 0, EPSILON)) {\n        mK[i] = mK[i + 1] = 0;\n        continue;\n      }\n      alphaK = mK[i] / deltaK[i];\n      betaK = mK[i + 1] / deltaK[i];\n      squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n      if (squaredMagnitude <= 9) {\n        continue;\n      }\n      tauK = 3 / Math.sqrt(squaredMagnitude);\n      mK[i] = alphaK * tauK * deltaK[i];\n      mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n  }\n  function monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for (let i = 0; i < pointsLen; ++i) {\n      pointBefore = pointCurrent;\n      pointCurrent = pointAfter;\n      pointAfter = getPoint(points, i + 1);\n      if (!pointCurrent) {\n        continue;\n      }\n      const iPixel = pointCurrent[indexAxis];\n      const vPixel = pointCurrent[valueAxis];\n      if (pointBefore) {\n        delta = (iPixel - pointBefore[indexAxis]) / 3;\n        pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n        pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n      }\n      if (pointAfter) {\n        delta = (pointAfter[indexAxis] - iPixel) / 3;\n        pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n        pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n      }\n    }\n  }\n  function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for (i = 0; i < pointsLen; ++i) {\n      pointBefore = pointCurrent;\n      pointCurrent = pointAfter;\n      pointAfter = getPoint(points, i + 1);\n      if (!pointCurrent) {\n        continue;\n      }\n      if (pointAfter) {\n        const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n        deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n      }\n      mK[i] = !pointBefore ? deltaK[i]\n        : !pointAfter ? deltaK[i - 1]\n          : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0\n            : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n  }\n  function capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n  }\n  function capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for (i = 0, ilen = points.length; i < ilen; ++i) {\n      inAreaPrev = inArea;\n      inArea = inAreaNext;\n      inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n      if (!inArea) {\n        continue;\n      }\n      point = points[i];\n      if (inAreaPrev) {\n        point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n        point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n      }\n      if (inAreaNext) {\n        point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n        point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n      }\n    }\n  }\n  function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    if (options.spanGaps) {\n      points = points.filter((pt) => !pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n      splineCurveMonotone(points, indexAxis);\n    } else {\n      let prev = loop ? points[points.length - 1] : points[0];\n      for (i = 0, ilen = points.length; i < ilen; ++i) {\n        point = points[i];\n        controlPoints = splineCurve(\n          prev,\n          point,\n          points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],\n          options.tension\n        );\n        point.cp1x = controlPoints.previous.x;\n        point.cp1y = controlPoints.previous.y;\n        point.cp2x = controlPoints.next.x;\n        point.cp2y = controlPoints.next.y;\n        prev = point;\n      }\n    }\n    if (options.capBezierPoints) {\n      capBezierPoints(points, area);\n    }\n  }\n\n  function _pointInLine(p1, p2, t, mode) {\n    return {\n      x: p1.x + t * (p2.x - p1.x),\n      y: p1.y + t * (p2.y - p1.y)\n    };\n  }\n  function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n      x: p1.x + t * (p2.x - p1.x),\n      y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y\n        : mode === 'after' ? t < 1 ? p1.y : p2.y\n          : t > 0 ? p2.y : p1.y\n    };\n  }\n  function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = { x: p1.cp2x, y: p1.cp2y };\n    const cp2 = { x: p2.cp1x, y: p2.cp1y };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n  }\n\n  const getRightToLeftAdapter = function (rectX, width) {\n    return {\n      x(x) {\n        return rectX + rectX + width - x;\n      },\n      setWidth(w) {\n        width = w;\n      },\n      textAlign(align) {\n        if (align === 'center') {\n          return align;\n        }\n        return align === 'right' ? 'left' : 'right';\n      },\n      xPlus(x, value) {\n        return x - value;\n      },\n      leftForLtr(x, itemWidth) {\n        return x - itemWidth;\n      },\n    };\n  };\n  const getLeftToRightAdapter = function () {\n    return {\n      x(x) {\n        return x;\n      },\n      setWidth(w) {\n      },\n      textAlign(align) {\n        return align;\n      },\n      xPlus(x, value) {\n        return x + value;\n      },\n      leftForLtr(x, _itemWidth) {\n        return x;\n      },\n    };\n  };\n  function getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n  }\n  function overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n      style = ctx.canvas.style;\n      original = [\n        style.getPropertyValue('direction'),\n        style.getPropertyPriority('direction'),\n      ];\n      style.setProperty('direction', direction, 'important');\n      ctx.prevTextDirection = original;\n    }\n  }\n  function restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n      delete ctx.prevTextDirection;\n      ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n  }\n\n  function propertyFn(property) {\n    if (property === 'angle') {\n      return {\n        between: _angleBetween,\n        compare: _angleDiff,\n        normalize: _normalizeAngle,\n      };\n    }\n    return {\n      between: (n, s, e) => n >= Math.min(s, e) && n <= Math.max(e, s),\n      compare: (a, b) => a - b,\n      normalize: x => x\n    };\n  }\n  function normalizeSegment({ start, end, count, loop, style }) {\n    return {\n      start: start % count,\n      end: end % count,\n      loop: loop && (end - start + 1) % count === 0,\n      style\n    };\n  }\n  function getSegment(segment, points, bounds) {\n    const { property, start: startBound, end: endBound } = bounds;\n    const { between, normalize } = propertyFn(property);\n    const count = points.length;\n    let { start, end, loop } = segment;\n    let i, ilen;\n    if (loop) {\n      start += count;\n      end += count;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n          break;\n        }\n        start--;\n        end--;\n      }\n      start %= count;\n      end %= count;\n    }\n    if (end < start) {\n      end += count;\n    }\n    return { start, end, loop, style: segment.style };\n  }\n  function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n      return [segment];\n    }\n    const { property, start: startBound, end: endBound } = bounds;\n    const count = points.length;\n    const { compare, between, normalize } = propertyFn(property);\n    const { start, end, loop, style } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = () => inside || startIsBefore();\n    const shouldStop = () => !inside || endIsBefore();\n    for (let i = start, prev = start; i <= end; ++i) {\n      point = points[i % count];\n      if (point.skip) {\n        continue;\n      }\n      value = normalize(point[property]);\n      if (value === prevValue) {\n        continue;\n      }\n      inside = between(value, startBound, endBound);\n      if (subStart === null && shouldStart()) {\n        subStart = compare(value, startBound) === 0 ? i : prev;\n      }\n      if (subStart !== null && shouldStop()) {\n        result.push(normalizeSegment({ start: subStart, end: i, loop, count, style }));\n        subStart = null;\n      }\n      prev = i;\n      prevValue = value;\n    }\n    if (subStart !== null) {\n      result.push(normalizeSegment({ start: subStart, end, loop, count, style }));\n    }\n    return result;\n  }\n  function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for (let i = 0; i < segments.length; i++) {\n      const sub = _boundSegment(segments[i], line.points, bounds);\n      if (sub.length) {\n        result.push(...sub);\n      }\n    }\n    return result;\n  }\n  function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n      while (start < count && !points[start].skip) {\n        start++;\n      }\n    }\n    while (start < count && points[start].skip) {\n      start++;\n    }\n    start %= count;\n    if (loop) {\n      end += start;\n    }\n    while (end > start && points[end % count].skip) {\n      end--;\n    }\n    end %= count;\n    return { start, end };\n  }\n  function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for (end = start + 1; end <= max; ++end) {\n      const cur = points[end % count];\n      if (cur.skip || cur.stop) {\n        if (!prev.skip) {\n          loop = false;\n          result.push({ start: start % count, end: (end - 1) % count, loop });\n          start = last = cur.stop ? end : null;\n        }\n      } else {\n        last = end;\n        if (prev.skip) {\n          start = end;\n        }\n      }\n      prev = cur;\n    }\n    if (last !== null) {\n      result.push({ start: start % count, end: last % count, loop });\n    }\n    return result;\n  }\n  function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n      return [];\n    }\n    const loop = !!line._loop;\n    const { start, end } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n      return splitByStyles([{ start, end, loop }], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(solidSegments(points, start, max, completeLoop), points, segmentOptions);\n  }\n  function splitByStyles(segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n      return segments;\n    }\n    return doSplitByStyles(segments, points, segmentOptions);\n  }\n  function doSplitByStyles(segments, points, segmentOptions) {\n    const count = points.length;\n    const result = [];\n    let start = segments[0].start;\n    let i = start;\n    for (const segment of segments) {\n      let prevStyle, style;\n      let prev = points[start % count];\n      for (i = start + 1; i <= segment.end; i++) {\n        const pt = points[i % count];\n        style = readStyle(segmentOptions.setContext({ type: 'segment', p0: prev, p1: pt }));\n        if (styleChanged(style, prevStyle)) {\n          result.push({ start: start, end: i - 1, loop: segment.loop, style: prevStyle });\n          prevStyle = style;\n          start = i - 1;\n        }\n        prev = pt;\n        prevStyle = style;\n      }\n      if (start < i - 1) {\n        result.push({ start, end: i - 1, loop: segment.loop, style });\n        start = i - 1;\n      }\n    }\n    return result;\n  }\n  function readStyle(options) {\n    return {\n      backgroundColor: options.backgroundColor,\n      borderCapStyle: options.borderCapStyle,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderJoinStyle: options.borderJoinStyle,\n      borderWidth: options.borderWidth,\n      borderColor: options.borderColor\n    };\n  }\n  function styleChanged(style, prevStyle) {\n    return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);\n  }\n\n  var helpers = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    easingEffects: effects,\n    color: color,\n    getHoverColor: getHoverColor,\n    noop: noop,\n    uid: uid,\n    isNullOrUndef: isNullOrUndef,\n    isArray: isArray,\n    isObject: isObject,\n    isFinite: isNumberFinite,\n    finiteOrDefault: finiteOrDefault,\n    valueOrDefault: valueOrDefault,\n    toPercentage: toPercentage,\n    toDimension: toDimension,\n    callback: callback,\n    each: each,\n    _elementsEqual: _elementsEqual,\n    clone: clone,\n    _merger: _merger,\n    merge: merge,\n    mergeIf: mergeIf,\n    _mergerIf: _mergerIf,\n    _deprecated: _deprecated,\n    resolveObjectKey: resolveObjectKey,\n    _capitalize: _capitalize,\n    defined: defined,\n    isFunction: isFunction,\n    setsEqual: setsEqual,\n    toFontString: toFontString,\n    _measureText: _measureText,\n    _longestText: _longestText,\n    _alignPixel: _alignPixel,\n    clearCanvas: clearCanvas,\n    drawPoint: drawPoint,\n    _isPointInArea: _isPointInArea,\n    clipArea: clipArea,\n    unclipArea: unclipArea,\n    _steppedLineTo: _steppedLineTo,\n    _bezierCurveTo: _bezierCurveTo,\n    renderText: renderText,\n    addRoundedRectPath: addRoundedRectPath,\n    _lookup: _lookup,\n    _lookupByKey: _lookupByKey,\n    _rlookupByKey: _rlookupByKey,\n    _filterBetween: _filterBetween,\n    listenArrayEvents: listenArrayEvents,\n    unlistenArrayEvents: unlistenArrayEvents,\n    _arrayUnique: _arrayUnique,\n    _createResolver: _createResolver,\n    _attachContext: _attachContext,\n    _descriptors: _descriptors,\n    splineCurve: splineCurve,\n    splineCurveMonotone: splineCurveMonotone,\n    _updateBezierControlPoints: _updateBezierControlPoints,\n    _getParentNode: _getParentNode,\n    getStyle: getStyle,\n    getRelativePosition: getRelativePosition$1,\n    getMaximumSize: getMaximumSize,\n    retinaScale: retinaScale,\n    supportsEventListenerOptions: supportsEventListenerOptions,\n    readUsedSize: readUsedSize,\n    fontString: fontString,\n    requestAnimFrame: requestAnimFrame,\n    throttled: throttled,\n    debounce: debounce,\n    _toLeftRightCenter: _toLeftRightCenter,\n    _alignStartEnd: _alignStartEnd,\n    _textX: _textX,\n    _pointInLine: _pointInLine,\n    _steppedInterpolation: _steppedInterpolation,\n    _bezierInterpolation: _bezierInterpolation,\n    formatNumber: formatNumber,\n    toLineHeight: toLineHeight,\n    _readValueToProps: _readValueToProps,\n    toTRBL: toTRBL,\n    toTRBLCorners: toTRBLCorners,\n    toPadding: toPadding,\n    toFont: toFont,\n    resolve: resolve,\n    _addGrace: _addGrace,\n    PI: PI,\n    TAU: TAU,\n    PITAU: PITAU,\n    INFINITY: INFINITY,\n    RAD_PER_DEG: RAD_PER_DEG,\n    HALF_PI: HALF_PI,\n    QUARTER_PI: QUARTER_PI,\n    TWO_THIRDS_PI: TWO_THIRDS_PI,\n    log10: log10,\n    sign: sign,\n    niceNum: niceNum,\n    _factorize: _factorize,\n    isNumber: isNumber,\n    almostEquals: almostEquals,\n    almostWhole: almostWhole,\n    _setMinAndMaxByKey: _setMinAndMaxByKey,\n    toRadians: toRadians,\n    toDegrees: toDegrees,\n    _decimalPlaces: _decimalPlaces,\n    getAngleFromPoint: getAngleFromPoint,\n    distanceBetweenPoints: distanceBetweenPoints,\n    _angleDiff: _angleDiff,\n    _normalizeAngle: _normalizeAngle,\n    _angleBetween: _angleBetween,\n    _limitValue: _limitValue,\n    _int16Range: _int16Range,\n    getRtlAdapter: getRtlAdapter,\n    overrideTextDirection: overrideTextDirection,\n    restoreTextDirection: restoreTextDirection,\n    _boundSegment: _boundSegment,\n    _boundSegments: _boundSegments,\n    _computeSegments: _computeSegments\n  });\n\n  class TypedRegistry {\n    constructor(type, scope, override) {\n      this.type = type;\n      this.scope = scope;\n      this.override = override;\n      this.items = Object.create(null);\n    }\n    isForType(type) {\n      return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n    register(item) {\n      const me = this;\n      const proto = Object.getPrototypeOf(item);\n      let parentScope;\n      if (isIChartComponent(proto)) {\n        parentScope = me.register(proto);\n      }\n      const items = me.items;\n      const id = item.id;\n      const scope = me.scope + '.' + id;\n      if (!id) {\n        throw new Error('class does not have id: ' + item);\n      }\n      if (id in items) {\n        return scope;\n      }\n      items[id] = item;\n      registerDefaults(item, scope, parentScope);\n      if (me.override) {\n        defaults.override(item.id, item.overrides);\n      }\n      return scope;\n    }\n    get(id) {\n      return this.items[id];\n    }\n    unregister(item) {\n      const items = this.items;\n      const id = item.id;\n      const scope = this.scope;\n      if (id in items) {\n        delete items[id];\n      }\n      if (scope && id in defaults[scope]) {\n        delete defaults[scope][id];\n        if (this.override) {\n          delete overrides[id];\n        }\n      }\n    }\n  }\n  function registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n      parentScope ? defaults.get(parentScope) : {},\n      defaults.get(scope),\n      item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n      routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n      defaults.describe(scope, item.descriptors);\n    }\n  }\n  function routeDefaults(scope, routes) {\n    Object.keys(routes).forEach(property => {\n      const propertyParts = property.split('.');\n      const sourceName = propertyParts.pop();\n      const sourceScope = [scope].concat(propertyParts).join('.');\n      const parts = routes[property].split('.');\n      const targetName = parts.pop();\n      const targetScope = parts.join('.');\n      defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n  }\n  function isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n  }\n\n  class Registry {\n    constructor() {\n      this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n      this.elements = new TypedRegistry(Element, 'elements');\n      this.plugins = new TypedRegistry(Object, 'plugins');\n      this.scales = new TypedRegistry(Scale, 'scales');\n      this._typedRegistries = [this.controllers, this.scales, this.elements];\n    }\n    add(...args) {\n      this._each('register', args);\n    }\n    remove(...args) {\n      this._each('unregister', args);\n    }\n    addControllers(...args) {\n      this._each('register', args, this.controllers);\n    }\n    addElements(...args) {\n      this._each('register', args, this.elements);\n    }\n    addPlugins(...args) {\n      this._each('register', args, this.plugins);\n    }\n    addScales(...args) {\n      this._each('register', args, this.scales);\n    }\n    getController(id) {\n      return this._get(id, this.controllers, 'controller');\n    }\n    getElement(id) {\n      return this._get(id, this.elements, 'element');\n    }\n    getPlugin(id) {\n      return this._get(id, this.plugins, 'plugin');\n    }\n    getScale(id) {\n      return this._get(id, this.scales, 'scale');\n    }\n    removeControllers(...args) {\n      this._each('unregister', args, this.controllers);\n    }\n    removeElements(...args) {\n      this._each('unregister', args, this.elements);\n    }\n    removePlugins(...args) {\n      this._each('unregister', args, this.plugins);\n    }\n    removeScales(...args) {\n      this._each('unregister', args, this.scales);\n    }\n    _each(method, args, typedRegistry) {\n      const me = this;\n      [...args].forEach(arg => {\n        const reg = typedRegistry || me._getRegistryForType(arg);\n        if (typedRegistry || reg.isForType(arg) || (reg === me.plugins && arg.id)) {\n          me._exec(method, reg, arg);\n        } else {\n          each(arg, item => {\n            const itemReg = typedRegistry || me._getRegistryForType(item);\n            me._exec(method, itemReg, item);\n          });\n        }\n      });\n    }\n    _exec(method, registry, component) {\n      const camelMethod = _capitalize(method);\n      callback(component['before' + camelMethod], [], component);\n      registry[method](component);\n      callback(component['after' + camelMethod], [], component);\n    }\n    _getRegistryForType(type) {\n      for (let i = 0; i < this._typedRegistries.length; i++) {\n        const reg = this._typedRegistries[i];\n        if (reg.isForType(type)) {\n          return reg;\n        }\n      }\n      return this.plugins;\n    }\n    _get(id, typedRegistry, type) {\n      const item = typedRegistry.get(id);\n      if (item === undefined) {\n        throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n      }\n      return item;\n    }\n  }\n  var registry = new Registry();\n\n  class PluginService {\n    constructor() {\n      this._init = [];\n    }\n    notify(chart, hook, args, filter) {\n      const me = this;\n      if (hook === 'beforeInit') {\n        me._init = me._createDescriptors(chart, true);\n        me._notify(me._init, chart, 'install');\n      }\n      const descriptors = filter ? me._descriptors(chart).filter(filter) : me._descriptors(chart);\n      const result = me._notify(descriptors, chart, hook, args);\n      if (hook === 'destroy') {\n        me._notify(descriptors, chart, 'stop');\n        me._notify(me._init, chart, 'uninstall');\n      }\n      return result;\n    }\n    _notify(descriptors, chart, hook, args) {\n      args = args || {};\n      for (const descriptor of descriptors) {\n        const plugin = descriptor.plugin;\n        const method = plugin[hook];\n        const params = [chart, args, descriptor.options];\n        if (callback(method, params, plugin) === false && args.cancelable) {\n          return false;\n        }\n      }\n      return true;\n    }\n    invalidate() {\n      if (!isNullOrUndef(this._cache)) {\n        this._oldCache = this._cache;\n        this._cache = undefined;\n      }\n    }\n    _descriptors(chart) {\n      if (this._cache) {\n        return this._cache;\n      }\n      const descriptors = this._cache = this._createDescriptors(chart);\n      this._notifyStateChanges(chart);\n      return descriptors;\n    }\n    _createDescriptors(chart, all) {\n      const config = chart && chart.config;\n      const options = valueOrDefault(config.options && config.options.plugins, {});\n      const plugins = allPlugins(config);\n      return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n    _notifyStateChanges(chart) {\n      const previousDescriptors = this._oldCache || [];\n      const descriptors = this._cache;\n      const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n      this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n      this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n  }\n  function allPlugins(config) {\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for (let i = 0; i < keys.length; i++) {\n      plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for (let i = 0; i < local.length; i++) {\n      const plugin = local[i];\n      if (plugins.indexOf(plugin) === -1) {\n        plugins.push(plugin);\n      }\n    }\n    return plugins;\n  }\n  function getOpts(options, all) {\n    if (!all && options === false) {\n      return null;\n    }\n    if (options === true) {\n      return {};\n    }\n    return options;\n  }\n  function createDescriptors(chart, plugins, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (let i = 0; i < plugins.length; i++) {\n      const plugin = plugins[i];\n      const id = plugin.id;\n      const opts = getOpts(options[id], all);\n      if (opts === null) {\n        continue;\n      }\n      result.push({\n        plugin,\n        options: pluginOpts(chart.config, plugin, opts, context)\n      });\n    }\n    return result;\n  }\n  function pluginOpts(config, plugin, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    return config.createResolver(scopes, context, [''], { scriptable: false, indexable: false, allKeys: true });\n  }\n\n  function getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n  }\n  function getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n      axis = indexAxis;\n    } else if (id === '_value_') {\n      axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n  }\n  function getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n  }\n  function axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n      return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n      return 'y';\n    }\n  }\n  function determineAxis(id, scaleOptions) {\n    if (id === 'x' || id === 'y') {\n      return id;\n    }\n    return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();\n  }\n  function mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || { scales: {} };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const firstIDs = Object.create(null);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach(id => {\n      const scaleConf = configScales[id];\n      const axis = determineAxis(id, scaleConf);\n      const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n      const defaultScaleOptions = chartDefaults.scales || {};\n      firstIDs[axis] = firstIDs[axis] || id;\n      scales[id] = mergeIf(Object.create(null), [{ axis }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n    });\n    config.data.datasets.forEach(dataset => {\n      const type = dataset.type || config.type;\n      const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n      const datasetDefaults = overrides[type] || {};\n      const defaultScaleOptions = datasetDefaults.scales || {};\n      Object.keys(defaultScaleOptions).forEach(defaultID => {\n        const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n        const id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;\n        scales[id] = scales[id] || Object.create(null);\n        mergeIf(scales[id], [{ axis }, configScales[id], defaultScaleOptions[defaultID]]);\n      });\n    });\n    Object.keys(scales).forEach(key => {\n      const scale = scales[key];\n      mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n    });\n    return scales;\n  }\n  function initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n  }\n  function initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n  }\n  function initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n  }\n  const keyCache = new Map();\n  const keysCached = new Set();\n  function cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n      keys = generate();\n      keyCache.set(cacheKey, keys);\n      keysCached.add(keys);\n    }\n    return keys;\n  }\n  const addIfFound = (set, obj, key) => {\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n      set.add(opts);\n    }\n  };\n  class Config {\n    constructor(config) {\n      this._config = initConfig(config);\n      this._scopeCache = new Map();\n      this._resolverCache = new Map();\n    }\n    get type() {\n      return this._config.type;\n    }\n    set type(type) {\n      this._config.type = type;\n    }\n    get data() {\n      return this._config.data;\n    }\n    set data(data) {\n      this._config.data = initData(data);\n    }\n    get options() {\n      return this._config.options;\n    }\n    set options(options) {\n      this._config.options = options;\n    }\n    get plugins() {\n      return this._config.plugins;\n    }\n    update() {\n      const config = this._config;\n      this.clearCache();\n      initOptions(config);\n    }\n    clearCache() {\n      this._scopeCache.clear();\n      this._resolverCache.clear();\n    }\n    datasetScopeKeys(datasetType) {\n      return cachedKeys(datasetType,\n        () => [[\n          `datasets.${datasetType}`,\n          ''\n        ]]);\n    }\n    datasetAnimationScopeKeys(datasetType, transition) {\n      return cachedKeys(`${datasetType}.transition.${transition}`,\n        () => [\n          [\n            `datasets.${datasetType}.transitions.${transition}`,\n            `transitions.${transition}`,\n          ],\n          [\n            `datasets.${datasetType}`,\n            ''\n          ]\n        ]);\n    }\n    datasetElementScopeKeys(datasetType, elementType) {\n      return cachedKeys(`${datasetType}-${elementType}`,\n        () => [[\n          `datasets.${datasetType}.elements.${elementType}`,\n          `datasets.${datasetType}`,\n          `elements.${elementType}`,\n          ''\n        ]]);\n    }\n    pluginScopeKeys(plugin) {\n      const id = plugin.id;\n      const type = this.type;\n      return cachedKeys(`${type}-plugin-${id}`,\n        () => [[\n          `plugins.${id}`,\n          ...plugin.additionalOptionScopes || [],\n        ]]);\n    }\n    _cachedScopes(mainScope, resetCache) {\n      const _scopeCache = this._scopeCache;\n      let cache = _scopeCache.get(mainScope);\n      if (!cache || resetCache) {\n        cache = new Map();\n        _scopeCache.set(mainScope, cache);\n      }\n      return cache;\n    }\n    getOptionScopes(mainScope, keyLists, resetCache) {\n      const { options, type } = this;\n      const cache = this._cachedScopes(mainScope, resetCache);\n      const cached = cache.get(keyLists);\n      if (cached) {\n        return cached;\n      }\n      const scopes = new Set();\n      keyLists.forEach(keys => {\n        if (mainScope) {\n          scopes.add(mainScope);\n          keys.forEach(key => addIfFound(scopes, mainScope, key));\n        }\n        keys.forEach(key => addIfFound(scopes, options, key));\n        keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n        keys.forEach(key => addIfFound(scopes, defaults, key));\n        keys.forEach(key => addIfFound(scopes, descriptors, key));\n      });\n      const array = [...scopes];\n      if (keysCached.has(keyLists)) {\n        cache.set(keyLists, array);\n      }\n      return array;\n    }\n    chartOptionScopes() {\n      const { options, type } = this;\n      return [\n        options,\n        overrides[type] || {},\n        defaults.datasets[type] || {},\n        { type },\n        defaults,\n        descriptors\n      ];\n    }\n    resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n      const result = { $shared: true };\n      const { resolver, subPrefixes } = getResolver(this._resolverCache, scopes, prefixes);\n      let options = resolver;\n      if (needContext(resolver, names)) {\n        result.$shared = false;\n        context = isFunction(context) ? context() : context;\n        const subResolver = this.createResolver(scopes, context, subPrefixes);\n        options = _attachContext(resolver, context, subResolver);\n      }\n      for (const prop of names) {\n        result[prop] = options[prop];\n      }\n      return result;\n    }\n    createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n      const { resolver } = getResolver(this._resolverCache, scopes, prefixes);\n      return isObject(context)\n        ? _attachContext(resolver, context, undefined, descriptorDefaults)\n        : resolver;\n    }\n  }\n  function getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n      cache = new Map();\n      resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n      const resolver = _createResolver(scopes, prefixes);\n      cached = {\n        resolver,\n        subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n      };\n      cache.set(cacheKey, cached);\n    }\n    return cached;\n  }\n  function needContext(proxy, names) {\n    const { isScriptable, isIndexable } = _descriptors(proxy);\n    for (const prop of names) {\n      if ((isScriptable(prop) && isFunction(proxy[prop]))\n        || (isIndexable(prop) && isArray(proxy[prop]))) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  var version = \"3.3.2\";\n\n  const KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\n  function positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n  }\n  function compare2Level(l1, l2) {\n    return function (a, b) {\n      return a[l1] === b[l1]\n        ? a[l2] - b[l2]\n        : a[l1] - b[l1];\n    };\n  }\n  function onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [context], chart);\n  }\n  function onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [context], chart);\n  }\n  function isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n  }\n  function getCanvas(item) {\n    if (isDomSupported() && typeof item === 'string') {\n      item = document.getElementById(item);\n    } else if (item && item.length) {\n      item = item[0];\n    }\n    if (item && item.canvas) {\n      item = item.canvas;\n    }\n    return item;\n  }\n  const instances = {};\n  const getChart = (key) => {\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n  };\n  class Chart {\n    constructor(item, config) {\n      const me = this;\n      this.config = config = new Config(config);\n      const initialCanvas = getCanvas(item);\n      const existingChart = getChart(initialCanvas);\n      if (existingChart) {\n        throw new Error(\n          'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n          ' must be destroyed before the canvas can be reused.'\n        );\n      }\n      const options = config.createResolver(config.chartOptionScopes(), me.getContext());\n      this.platform = me._initializePlatform(initialCanvas, config);\n      const context = me.platform.acquireContext(initialCanvas, options.aspectRatio);\n      const canvas = context && context.canvas;\n      const height = canvas && canvas.height;\n      const width = canvas && canvas.width;\n      this.id = uid();\n      this.ctx = context;\n      this.canvas = canvas;\n      this.width = width;\n      this.height = height;\n      this._options = options;\n      this._aspectRatio = this.aspectRatio;\n      this._layers = [];\n      this._metasets = [];\n      this._stacks = undefined;\n      this.boxes = [];\n      this.currentDevicePixelRatio = undefined;\n      this.chartArea = undefined;\n      this._active = [];\n      this._lastEvent = undefined;\n      this._listeners = {};\n      this._responsiveListeners = undefined;\n      this._sortedMetasets = [];\n      this.scales = {};\n      this.scale = undefined;\n      this._plugins = new PluginService();\n      this.$proxies = {};\n      this._hiddenIndices = {};\n      this.attached = false;\n      this._animationsDisabled = undefined;\n      this.$context = undefined;\n      this._doResize = debounce(() => this.update('resize'), options.resizeDelay || 0);\n      instances[me.id] = me;\n      if (!context || !canvas) {\n        console.error(\"Failed to create chart: can't acquire context from the given item\");\n        return;\n      }\n      animator.listen(me, 'complete', onAnimationsComplete);\n      animator.listen(me, 'progress', onAnimationProgress);\n      me._initialize();\n      if (me.attached) {\n        me.update();\n      }\n    }\n    get aspectRatio() {\n      const { options: { aspectRatio, maintainAspectRatio }, width, height, _aspectRatio } = this;\n      if (!isNullOrUndef(aspectRatio)) {\n        return aspectRatio;\n      }\n      if (maintainAspectRatio && _aspectRatio) {\n        return _aspectRatio;\n      }\n      return height ? width / height : null;\n    }\n    get data() {\n      return this.config.data;\n    }\n    set data(data) {\n      this.config.data = data;\n    }\n    get options() {\n      return this._options;\n    }\n    set options(options) {\n      this.config.options = options;\n    }\n    _initialize() {\n      const me = this;\n      me.notifyPlugins('beforeInit');\n      if (me.options.responsive) {\n        me.resize();\n      } else {\n        retinaScale(me, me.options.devicePixelRatio);\n      }\n      me.bindEvents();\n      me.notifyPlugins('afterInit');\n      return me;\n    }\n    _initializePlatform(canvas, config) {\n      if (config.platform) {\n        return new config.platform();\n      } else if (!isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n        return new BasicPlatform();\n      }\n      return new DomPlatform();\n    }\n    clear() {\n      clearCanvas(this.canvas, this.ctx);\n      return this;\n    }\n    stop() {\n      animator.stop(this);\n      return this;\n    }\n    resize(width, height) {\n      if (!animator.running(this)) {\n        this._resize(width, height);\n      } else {\n        this._resizeBeforeDraw = { width, height };\n      }\n    }\n    _resize(width, height) {\n      const me = this;\n      const options = me.options;\n      const canvas = me.canvas;\n      const aspectRatio = options.maintainAspectRatio && me.aspectRatio;\n      const newSize = me.platform.getMaximumSize(canvas, width, height, aspectRatio);\n      const newRatio = options.devicePixelRatio || me.platform.getDevicePixelRatio();\n      me.width = newSize.width;\n      me.height = newSize.height;\n      me._aspectRatio = me.aspectRatio;\n      if (!retinaScale(me, newRatio, true)) {\n        return;\n      }\n      me.notifyPlugins('resize', { size: newSize });\n      callback(options.onResize, [me, newSize], me);\n      if (me.attached) {\n        if (me._doResize()) {\n          me.render();\n        }\n      }\n    }\n    ensureScalesHaveIDs() {\n      const options = this.options;\n      const scalesOptions = options.scales || {};\n      each(scalesOptions, (axisOptions, axisID) => {\n        axisOptions.id = axisID;\n      });\n    }\n    buildOrUpdateScales() {\n      const me = this;\n      const options = me.options;\n      const scaleOpts = options.scales;\n      const scales = me.scales;\n      const updated = Object.keys(scales).reduce((obj, id) => {\n        obj[id] = false;\n        return obj;\n      }, {});\n      let items = [];\n      if (scaleOpts) {\n        items = items.concat(\n          Object.keys(scaleOpts).map((id) => {\n            const scaleOptions = scaleOpts[id];\n            const axis = determineAxis(id, scaleOptions);\n            const isRadial = axis === 'r';\n            const isHorizontal = axis === 'x';\n            return {\n              options: scaleOptions,\n              dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n              dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n            };\n          })\n        );\n      }\n      each(items, (item) => {\n        const scaleOptions = item.options;\n        const id = scaleOptions.id;\n        const axis = determineAxis(id, scaleOptions);\n        const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n        if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n          scaleOptions.position = item.dposition;\n        }\n        updated[id] = true;\n        let scale = null;\n        if (id in scales && scales[id].type === scaleType) {\n          scale = scales[id];\n        } else {\n          const scaleClass = registry.getScale(scaleType);\n          scale = new scaleClass({\n            id,\n            type: scaleType,\n            ctx: me.ctx,\n            chart: me\n          });\n          scales[scale.id] = scale;\n        }\n        scale.init(scaleOptions, options);\n      });\n      each(updated, (hasUpdated, id) => {\n        if (!hasUpdated) {\n          delete scales[id];\n        }\n      });\n      each(scales, (scale) => {\n        layouts.configure(me, scale, scale.options);\n        layouts.addBox(me, scale);\n      });\n    }\n    _updateMetasets() {\n      const me = this;\n      const metasets = me._metasets;\n      const numData = me.data.datasets.length;\n      const numMeta = metasets.length;\n      metasets.sort((a, b) => a.index - b.index);\n      if (numMeta > numData) {\n        for (let i = numData; i < numMeta; ++i) {\n          me._destroyDatasetMeta(i);\n        }\n        metasets.splice(numData, numMeta - numData);\n      }\n      me._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n    _removeUnreferencedMetasets() {\n      const me = this;\n      const { _metasets: metasets, data: { datasets } } = me;\n      if (metasets.length > datasets.length) {\n        delete me._stacks;\n      }\n      metasets.forEach((meta, index) => {\n        if (datasets.filter(x => x === meta._dataset).length === 0) {\n          me._destroyDatasetMeta(index);\n        }\n      });\n    }\n    buildOrUpdateControllers() {\n      const me = this;\n      const newControllers = [];\n      const datasets = me.data.datasets;\n      let i, ilen;\n      me._removeUnreferencedMetasets();\n      for (i = 0, ilen = datasets.length; i < ilen; i++) {\n        const dataset = datasets[i];\n        let meta = me.getDatasetMeta(i);\n        const type = dataset.type || me.config.type;\n        if (meta.type && meta.type !== type) {\n          me._destroyDatasetMeta(i);\n          meta = me.getDatasetMeta(i);\n        }\n        meta.type = type;\n        meta.indexAxis = dataset.indexAxis || getIndexAxis(type, me.options);\n        meta.order = dataset.order || 0;\n        meta.index = i;\n        meta.label = '' + dataset.label;\n        meta.visible = me.isDatasetVisible(i);\n        if (meta.controller) {\n          meta.controller.updateIndex(i);\n          meta.controller.linkScales();\n        } else {\n          const ControllerClass = registry.getController(type);\n          const { datasetElementType, dataElementType } = defaults.datasets[type];\n          Object.assign(ControllerClass.prototype, {\n            dataElementType: registry.getElement(dataElementType),\n            datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n          });\n          meta.controller = new ControllerClass(me, i);\n          newControllers.push(meta.controller);\n        }\n      }\n      me._updateMetasets();\n      return newControllers;\n    }\n    _resetElements() {\n      const me = this;\n      each(me.data.datasets, (dataset, datasetIndex) => {\n        me.getDatasetMeta(datasetIndex).controller.reset();\n      }, me);\n    }\n    reset() {\n      this._resetElements();\n      this.notifyPlugins('reset');\n    }\n    update(mode) {\n      const me = this;\n      const config = me.config;\n      config.update();\n      me._options = config.createResolver(config.chartOptionScopes(), me.getContext());\n      each(me.scales, (scale) => {\n        layouts.removeBox(me, scale);\n      });\n      const animsDisabled = me._animationsDisabled = !me.options.animation;\n      me.ensureScalesHaveIDs();\n      me.buildOrUpdateScales();\n      const existingEvents = new Set(Object.keys(me._listeners));\n      const newEvents = new Set(me.options.events);\n      if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== me.options.responsive) {\n        me.unbindEvents();\n        me.bindEvents();\n      }\n      me._plugins.invalidate();\n      if (me.notifyPlugins('beforeUpdate', { mode, cancelable: true }) === false) {\n        return;\n      }\n      const newControllers = me.buildOrUpdateControllers();\n      me.notifyPlugins('beforeElementsUpdate');\n      let minPadding = 0;\n      for (let i = 0, ilen = me.data.datasets.length; i < ilen; i++) {\n        const { controller } = me.getDatasetMeta(i);\n        const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n        controller.buildOrUpdateElements(reset);\n        minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n      }\n      me._minPadding = minPadding;\n      me._updateLayout(minPadding);\n      if (!animsDisabled) {\n        each(newControllers, (controller) => {\n          controller.reset();\n        });\n      }\n      me._updateDatasets(mode);\n      me.notifyPlugins('afterUpdate', { mode });\n      me._layers.sort(compare2Level('z', '_idx'));\n      if (me._lastEvent) {\n        me._eventHandler(me._lastEvent, true);\n      }\n      me.render();\n    }\n    _updateLayout(minPadding) {\n      const me = this;\n      if (me.notifyPlugins('beforeLayout', { cancelable: true }) === false) {\n        return;\n      }\n      layouts.update(me, me.width, me.height, minPadding);\n      const area = me.chartArea;\n      const noArea = area.width <= 0 || area.height <= 0;\n      me._layers = [];\n      each(me.boxes, (box) => {\n        if (noArea && box.position === 'chartArea') {\n          return;\n        }\n        if (box.configure) {\n          box.configure();\n        }\n        me._layers.push(...box._layers());\n      }, me);\n      me._layers.forEach((item, index) => {\n        item._idx = index;\n      });\n      me.notifyPlugins('afterLayout');\n    }\n    _updateDatasets(mode) {\n      const me = this;\n      const isFunction = typeof mode === 'function';\n      if (me.notifyPlugins('beforeDatasetsUpdate', { mode, cancelable: true }) === false) {\n        return;\n      }\n      for (let i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n        me._updateDataset(i, isFunction ? mode({ datasetIndex: i }) : mode);\n      }\n      me.notifyPlugins('afterDatasetsUpdate', { mode });\n    }\n    _updateDataset(index, mode) {\n      const me = this;\n      const meta = me.getDatasetMeta(index);\n      const args = { meta, index, mode, cancelable: true };\n      if (me.notifyPlugins('beforeDatasetUpdate', args) === false) {\n        return;\n      }\n      meta.controller._update(mode);\n      args.cancelable = false;\n      me.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n      const me = this;\n      if (me.notifyPlugins('beforeRender', { cancelable: true }) === false) {\n        return;\n      }\n      if (animator.has(me)) {\n        if (me.attached && !animator.running(me)) {\n          animator.start(me);\n        }\n      } else {\n        me.draw();\n        onAnimationsComplete({ chart: me });\n      }\n    }\n    draw() {\n      const me = this;\n      let i;\n      if (me._resizeBeforeDraw) {\n        const { width, height } = me._resizeBeforeDraw;\n        me._resize(width, height);\n        me._resizeBeforeDraw = null;\n      }\n      me.clear();\n      if (me.width <= 0 || me.height <= 0) {\n        return;\n      }\n      if (me.notifyPlugins('beforeDraw', { cancelable: true }) === false) {\n        return;\n      }\n      const layers = me._layers;\n      for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n        layers[i].draw(me.chartArea);\n      }\n      me._drawDatasets();\n      for (; i < layers.length; ++i) {\n        layers[i].draw(me.chartArea);\n      }\n      me.notifyPlugins('afterDraw');\n    }\n    _getSortedDatasetMetas(filterVisible) {\n      const me = this;\n      const metasets = me._sortedMetasets;\n      const result = [];\n      let i, ilen;\n      for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n        const meta = metasets[i];\n        if (!filterVisible || meta.visible) {\n          result.push(meta);\n        }\n      }\n      return result;\n    }\n    getSortedVisibleDatasetMetas() {\n      return this._getSortedDatasetMetas(true);\n    }\n    _drawDatasets() {\n      const me = this;\n      if (me.notifyPlugins('beforeDatasetsDraw', { cancelable: true }) === false) {\n        return;\n      }\n      const metasets = me.getSortedVisibleDatasetMetas();\n      for (let i = metasets.length - 1; i >= 0; --i) {\n        me._drawDataset(metasets[i]);\n      }\n      me.notifyPlugins('afterDatasetsDraw');\n    }\n    _drawDataset(meta) {\n      const me = this;\n      const ctx = me.ctx;\n      const clip = meta._clip;\n      const area = me.chartArea;\n      const args = {\n        meta,\n        index: meta.index,\n        cancelable: true\n      };\n      if (me.notifyPlugins('beforeDatasetDraw', args) === false) {\n        return;\n      }\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? me.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? me.height : area.bottom + clip.bottom\n      });\n      meta.controller.draw();\n      unclipArea(ctx);\n      args.cancelable = false;\n      me.notifyPlugins('afterDatasetDraw', args);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n      const method = Interaction.modes[mode];\n      if (typeof method === 'function') {\n        return method(this, e, options, useFinalPosition);\n      }\n      return [];\n    }\n    getDatasetMeta(datasetIndex) {\n      const me = this;\n      const dataset = me.data.datasets[datasetIndex];\n      const metasets = me._metasets;\n      let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n      if (!meta) {\n        meta = {\n          type: null,\n          data: [],\n          dataset: null,\n          controller: null,\n          hidden: null,\n          xAxisID: null,\n          yAxisID: null,\n          order: dataset && dataset.order || 0,\n          index: datasetIndex,\n          _dataset: dataset,\n          _parsed: [],\n          _sorted: false\n        };\n        metasets.push(meta);\n      }\n      return meta;\n    }\n    getContext() {\n      return this.$context || (this.$context = { chart: this, type: 'chart' });\n    }\n    getVisibleDatasetCount() {\n      return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n      const dataset = this.data.datasets[datasetIndex];\n      if (!dataset) {\n        return false;\n      }\n      const meta = this.getDatasetMeta(datasetIndex);\n      return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n      const meta = this.getDatasetMeta(datasetIndex);\n      meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n      this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n      return !this._hiddenIndices[index];\n    }\n    _updateDatasetVisibility(datasetIndex, visible) {\n      const me = this;\n      const mode = visible ? 'show' : 'hide';\n      const meta = me.getDatasetMeta(datasetIndex);\n      const anims = meta.controller._resolveAnimations(undefined, mode);\n      me.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, { visible });\n      me.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n    hide(datasetIndex) {\n      this._updateDatasetVisibility(datasetIndex, false);\n    }\n    show(datasetIndex) {\n      this._updateDatasetVisibility(datasetIndex, true);\n    }\n    _destroyDatasetMeta(datasetIndex) {\n      const me = this;\n      const meta = me._metasets && me._metasets[datasetIndex];\n      if (meta && meta.controller) {\n        meta.controller._destroy();\n        delete me._metasets[datasetIndex];\n      }\n    }\n    destroy() {\n      const me = this;\n      const { canvas, ctx } = me;\n      let i, ilen;\n      me.stop();\n      animator.remove(me);\n      for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n        me._destroyDatasetMeta(i);\n      }\n      me.config.clearCache();\n      if (canvas) {\n        me.unbindEvents();\n        clearCanvas(canvas, ctx);\n        me.platform.releaseContext(ctx);\n        me.canvas = null;\n        me.ctx = null;\n      }\n      me.notifyPlugins('destroy');\n      delete instances[me.id];\n    }\n    toBase64Image(...args) {\n      return this.canvas.toDataURL(...args);\n    }\n    bindEvents() {\n      this.bindUserEvents();\n      if (this.options.responsive) {\n        this.bindResponsiveEvents();\n      } else {\n        this.attached = true;\n      }\n    }\n    bindUserEvents() {\n      const me = this;\n      const listeners = me._listeners;\n      const platform = me.platform;\n      const _add = (type, listener) => {\n        platform.addEventListener(me, type, listener);\n        listeners[type] = listener;\n      };\n      const listener = function (e, x, y) {\n        e.offsetX = x;\n        e.offsetY = y;\n        me._eventHandler(e);\n      };\n      each(me.options.events, (type) => _add(type, listener));\n    }\n    bindResponsiveEvents() {\n      const me = this;\n      if (!me._responsiveListeners) {\n        me._responsiveListeners = {};\n      }\n      const listeners = me._responsiveListeners;\n      const platform = me.platform;\n      const _add = (type, listener) => {\n        platform.addEventListener(me, type, listener);\n        listeners[type] = listener;\n      };\n      const _remove = (type, listener) => {\n        if (listeners[type]) {\n          platform.removeEventListener(me, type, listener);\n          delete listeners[type];\n        }\n      };\n      const listener = (width, height) => {\n        if (me.canvas) {\n          me.resize(width, height);\n        }\n      };\n      let detached;\n      const attached = () => {\n        _remove('attach', attached);\n        me.attached = true;\n        me.resize();\n        _add('resize', listener);\n        _add('detach', detached);\n      };\n      detached = () => {\n        me.attached = false;\n        _remove('resize', listener);\n        _add('attach', attached);\n      };\n      if (platform.isAttached(me.canvas)) {\n        attached();\n      } else {\n        detached();\n      }\n    }\n    unbindEvents() {\n      const me = this;\n      each(me._listeners, (listener, type) => {\n        me.platform.removeEventListener(me, type, listener);\n      });\n      me._listeners = {};\n      each(me._responsiveListeners, (listener, type) => {\n        me.platform.removeEventListener(me, type, listener);\n      });\n      me._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n      const prefix = enabled ? 'set' : 'remove';\n      let meta, item, i, ilen;\n      if (mode === 'dataset') {\n        meta = this.getDatasetMeta(items[0].datasetIndex);\n        meta.controller['_' + prefix + 'DatasetHoverStyle']();\n      }\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        item = items[i];\n        const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n        if (controller) {\n          controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n        }\n      }\n    }\n    getActiveElements() {\n      return this._active || [];\n    }\n    setActiveElements(activeElements) {\n      const me = this;\n      const lastActive = me._active || [];\n      const active = activeElements.map(({ datasetIndex, index }) => {\n        const meta = me.getDatasetMeta(datasetIndex);\n        if (!meta) {\n          throw new Error('No dataset found at index ' + datasetIndex);\n        }\n        return {\n          datasetIndex,\n          element: meta.data[index],\n          index,\n        };\n      });\n      const changed = !_elementsEqual(active, lastActive);\n      if (changed) {\n        me._active = active;\n        me._updateHoverStyles(active, lastActive);\n      }\n    }\n    notifyPlugins(hook, args, filter) {\n      return this._plugins.notify(this, hook, args, filter);\n    }\n    _updateHoverStyles(active, lastActive, replay) {\n      const me = this;\n      const hoverOptions = me.options.hover;\n      const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n      const deactivated = diff(lastActive, active);\n      const activated = replay ? active : diff(active, lastActive);\n      if (deactivated.length) {\n        me.updateHoverStyle(deactivated, hoverOptions.mode, false);\n      }\n      if (activated.length && hoverOptions.mode) {\n        me.updateHoverStyle(activated, hoverOptions.mode, true);\n      }\n    }\n    _eventHandler(e, replay) {\n      const me = this;\n      const args = { event: e, replay, cancelable: true };\n      const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.type);\n      if (me.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n        return;\n      }\n      const changed = me._handleEvent(e, replay);\n      args.cancelable = false;\n      me.notifyPlugins('afterEvent', args, eventFilter);\n      if (changed || args.changed) {\n        me.render();\n      }\n      return me;\n    }\n    _handleEvent(e, replay) {\n      const me = this;\n      const { _active: lastActive = [], options } = me;\n      const hoverOptions = options.hover;\n      const useFinalPosition = replay;\n      let active = [];\n      let changed = false;\n      let lastEvent = null;\n      if (e.type !== 'mouseout') {\n        active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n        lastEvent = e.type === 'click' ? me._lastEvent : e;\n      }\n      me._lastEvent = null;\n      if (_isPointInArea(e, me.chartArea, me._minPadding)) {\n        callback(options.onHover, [e, active, me], me);\n        if (e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu') {\n          callback(options.onClick, [e, active, me], me);\n        }\n      }\n      changed = !_elementsEqual(active, lastActive);\n      if (changed || replay) {\n        me._active = active;\n        me._updateHoverStyles(active, lastActive, replay);\n      }\n      me._lastEvent = lastEvent;\n      return changed;\n    }\n  }\n  const invalidatePlugins = () => each(Chart.instances, (chart) => chart._plugins.invalidate());\n  const enumerable = true;\n  Object.defineProperties(Chart, {\n    defaults: {\n      enumerable,\n      value: defaults\n    },\n    instances: {\n      enumerable,\n      value: instances\n    },\n    overrides: {\n      enumerable,\n      value: overrides\n    },\n    registry: {\n      enumerable,\n      value: registry\n    },\n    version: {\n      enumerable,\n      value: version\n    },\n    getChart: {\n      enumerable,\n      value: getChart\n    },\n    register: {\n      enumerable,\n      value: (...items) => {\n        registry.add(...items);\n        invalidatePlugins();\n      }\n    },\n    unregister: {\n      enumerable,\n      value: (...items) => {\n        registry.remove(...items);\n        invalidatePlugins();\n      }\n    }\n  });\n\n  function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n  }\n  class DateAdapter {\n    constructor(options) {\n      this.options = options || {};\n    }\n    formats() {\n      return abstract();\n    }\n    parse(value, format) {\n      return abstract();\n    }\n    format(timestamp, format) {\n      return abstract();\n    }\n    add(timestamp, amount, unit) {\n      return abstract();\n    }\n    diff(a, b, unit) {\n      return abstract();\n    }\n    startOf(timestamp, unit, weekday) {\n      return abstract();\n    }\n    endOf(timestamp, unit) {\n      return abstract();\n    }\n  }\n  DateAdapter.override = function (members) {\n    Object.assign(DateAdapter.prototype, members);\n  };\n  var _adapters = {\n    _date: DateAdapter\n  };\n\n  function getAllScaleValues(scale) {\n    if (!scale._cache.$bar) {\n      const metas = scale.getMatchingVisibleMetas('bar');\n      let values = [];\n      for (let i = 0, ilen = metas.length; i < ilen; i++) {\n        values = values.concat(metas[i].controller.getAllParsedValues(scale));\n      }\n      scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n    }\n    return scale._cache.$bar;\n  }\n  function computeMinSampleSize(scale) {\n    const values = getAllScaleValues(scale);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = () => {\n      if (curr === 32767 || curr === -32768) {\n        return;\n      }\n      if (defined(prev)) {\n        min = Math.min(min, Math.abs(curr - prev) || min);\n      }\n      prev = curr;\n    };\n    for (i = 0, ilen = values.length; i < ilen; ++i) {\n      curr = scale.getPixelForValue(values[i]);\n      updateMinAndPrev();\n    }\n    prev = undefined;\n    for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n      curr = scale.getPixelForTick(i);\n      updateMinAndPrev();\n    }\n    return min;\n  }\n  function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n      size = ruler.min * options.categoryPercentage;\n      ratio = options.barPercentage;\n    } else {\n      size = thickness * stackCount;\n      ratio = 1;\n    }\n    return {\n      chunk: size / stackCount,\n      ratio,\n      start: ruler.pixels[index] - (size / 2)\n    };\n  }\n  function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n      prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n      next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n      chunk: size / stackCount,\n      ratio: options.barPercentage,\n      start\n    };\n  }\n  function parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n      barStart = max;\n      barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n      barStart,\n      barEnd,\n      start: startValue,\n      end: endValue,\n      min,\n      max\n    };\n  }\n  function parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n      parseFloatBar(entry, item, vScale, i);\n    } else {\n      item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n  }\n  function parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      entry = data[i];\n      item = {};\n      item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n      parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n  }\n  function isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n  }\n  class BarController extends DatasetController {\n    parsePrimitiveData(meta, data, start, count) {\n      return parseArrayOrPrimitive(meta, data, start, count);\n    }\n    parseArrayData(meta, data, start, count) {\n      return parseArrayOrPrimitive(meta, data, start, count);\n    }\n    parseObjectData(meta, data, start, count) {\n      const { iScale, vScale } = meta;\n      const { xAxisKey = 'x', yAxisKey = 'y' } = this._parsing;\n      const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n      const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n      const parsed = [];\n      let i, ilen, item, obj;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        obj = data[i];\n        item = {};\n        item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n        parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n      }\n      return parsed;\n    }\n    updateRangeFromParsed(range, scale, parsed, stack) {\n      super.updateRangeFromParsed(range, scale, parsed, stack);\n      const custom = parsed._custom;\n      if (custom && scale === this._cachedMeta.vScale) {\n        range.min = Math.min(range.min, custom.min);\n        range.max = Math.max(range.max, custom.max);\n      }\n    }\n    getLabelAndValue(index) {\n      const me = this;\n      const meta = me._cachedMeta;\n      const { iScale, vScale } = meta;\n      const parsed = me.getParsed(index);\n      const custom = parsed._custom;\n      const value = isFloatBar(custom)\n        ? '[' + custom.start + ', ' + custom.end + ']'\n        : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n      return {\n        label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n        value\n      };\n    }\n    initialize() {\n      const me = this;\n      me.enableOptionSharing = true;\n      super.initialize();\n      const meta = me._cachedMeta;\n      meta.stack = me.getDataset().stack;\n    }\n    update(mode) {\n      const me = this;\n      const meta = me._cachedMeta;\n      me.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n      const me = this;\n      const reset = mode === 'reset';\n      const vScale = me._cachedMeta.vScale;\n      const base = vScale.getBasePixel();\n      const horizontal = vScale.isHorizontal();\n      const ruler = me._getRuler();\n      const firstOpts = me.resolveDataElementOptions(start, mode);\n      const sharedOptions = me.getSharedOptions(firstOpts);\n      const includeOptions = me.includeOptions(mode, sharedOptions);\n      me.updateSharedOptions(sharedOptions, mode, firstOpts);\n      for (let i = start; i < start + count; i++) {\n        const parsed = me.getParsed(i);\n        const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? { base, head: base } : me._calculateBarValuePixels(i);\n        const ipixels = me._calculateBarIndexPixels(i, ruler);\n        const stack = (parsed._stacks || {})[vScale.axis];\n        const properties = {\n          horizontal,\n          base: vpixels.base,\n          enableBorderRadius: !stack || isFloatBar(parsed._custom) || (me.index === stack._top || me.index === stack._bottom),\n          x: horizontal ? vpixels.head : ipixels.center,\n          y: horizontal ? ipixels.center : vpixels.head,\n          height: horizontal ? ipixels.size : undefined,\n          width: horizontal ? undefined : ipixels.size\n        };\n        if (includeOptions) {\n          properties.options = sharedOptions || me.resolveDataElementOptions(i, mode);\n        }\n        me.updateElement(bars[i], i, properties, mode);\n      }\n    }\n    _getStacks(last, dataIndex) {\n      const me = this;\n      const meta = me._cachedMeta;\n      const iScale = meta.iScale;\n      const metasets = iScale.getMatchingVisibleMetas(me._type);\n      const stacked = iScale.options.stacked;\n      const ilen = metasets.length;\n      const stacks = [];\n      let i, item;\n      for (i = 0; i < ilen; ++i) {\n        item = metasets[i];\n        if (typeof dataIndex !== 'undefined') {\n          const val = item.controller.getParsed(dataIndex)[\n            item.controller._cachedMeta.vScale.axis\n          ];\n          if (isNullOrUndef(val) || isNaN(val)) {\n            continue;\n          }\n        }\n        if (stacked === false || stacks.indexOf(item.stack) === -1 ||\n          (stacked === undefined && item.stack === undefined)) {\n          stacks.push(item.stack);\n        }\n        if (item.index === last) {\n          break;\n        }\n      }\n      if (!stacks.length) {\n        stacks.push(undefined);\n      }\n      return stacks;\n    }\n    _getStackCount(index) {\n      return this._getStacks(undefined, index).length;\n    }\n    _getStackIndex(datasetIndex, name, dataIndex) {\n      const stacks = this._getStacks(datasetIndex, dataIndex);\n      const index = (name !== undefined)\n        ? stacks.indexOf(name)\n        : -1;\n      return (index === -1)\n        ? stacks.length - 1\n        : index;\n    }\n    _getRuler() {\n      const me = this;\n      const opts = me.options;\n      const meta = me._cachedMeta;\n      const iScale = meta.iScale;\n      const pixels = [];\n      let i, ilen;\n      for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n        pixels.push(iScale.getPixelForValue(me.getParsed(i)[iScale.axis], i));\n      }\n      const barThickness = opts.barThickness;\n      const min = barThickness || computeMinSampleSize(iScale);\n      return {\n        min,\n        pixels,\n        start: iScale._startPixel,\n        end: iScale._endPixel,\n        stackCount: me._getStackCount(),\n        scale: iScale,\n        grouped: opts.grouped,\n        ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n      };\n    }\n    _calculateBarValuePixels(index) {\n      const me = this;\n      const { vScale, _stacked } = me._cachedMeta;\n      const { base: baseValue, minBarLength } = me.options;\n      const parsed = me.getParsed(index);\n      const custom = parsed._custom;\n      const floating = isFloatBar(custom);\n      let value = parsed[vScale.axis];\n      let start = 0;\n      let length = _stacked ? me.applyStack(vScale, parsed, _stacked) : value;\n      let head, size;\n      if (length !== value) {\n        start = length - value;\n        length = value;\n      }\n      if (floating) {\n        value = custom.barStart;\n        length = custom.barEnd - custom.barStart;\n        if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n          start = 0;\n        }\n        start += value;\n      }\n      const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n      let base = vScale.getPixelForValue(startValue);\n      if (this.chart.getDataVisibility(index)) {\n        head = vScale.getPixelForValue(start + length);\n      } else {\n        head = base;\n      }\n      size = head - base;\n      if (minBarLength !== undefined && Math.abs(size) < minBarLength) {\n        size = size < 0 ? -minBarLength : minBarLength;\n        if (value === 0) {\n          base -= size / 2;\n        }\n        head = base + size;\n      }\n      const actualBase = baseValue || 0;\n      if (base === vScale.getPixelForValue(actualBase)) {\n        const halfGrid = vScale.getLineWidthForValue(actualBase) / 2;\n        if (size > 0) {\n          base += halfGrid;\n          size -= halfGrid;\n        } else if (size < 0) {\n          base -= halfGrid;\n          size += halfGrid;\n        }\n      }\n      return {\n        size,\n        base,\n        head,\n        center: head + size / 2\n      };\n    }\n    _calculateBarIndexPixels(index, ruler) {\n      const me = this;\n      const scale = ruler.scale;\n      const options = me.options;\n      const skipNull = options.skipNull;\n      const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n      let center, size;\n      if (ruler.grouped) {\n        const stackCount = skipNull ? me._getStackCount(index) : ruler.stackCount;\n        const range = options.barThickness === 'flex'\n          ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n          : computeFitCategoryTraits(index, ruler, options, stackCount);\n        const stackIndex = me._getStackIndex(me.index, me._cachedMeta.stack, skipNull ? index : undefined);\n        center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n        size = Math.min(maxBarThickness, range.chunk * range.ratio);\n      } else {\n        center = scale.getPixelForValue(me.getParsed(index)[scale.axis], index);\n        size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n      }\n      return {\n        base: center - size / 2,\n        head: center + size / 2,\n        center,\n        size\n      };\n    }\n    draw() {\n      const me = this;\n      const chart = me.chart;\n      const meta = me._cachedMeta;\n      const vScale = meta.vScale;\n      const rects = meta.data;\n      const ilen = rects.length;\n      let i = 0;\n      clipArea(chart.ctx, chart.chartArea);\n      for (; i < ilen; ++i) {\n        if (me.getParsed(i)[vScale.axis] !== null) {\n          rects[i].draw(me._ctx);\n        }\n      }\n      unclipArea(chart.ctx);\n    }\n  }\n  BarController.id = 'bar';\n  BarController.defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n  BarController.overrides = {\n    interaction: {\n      mode: 'index'\n    },\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n  class BubbleController extends DatasetController {\n    initialize() {\n      this.enableOptionSharing = true;\n      super.initialize();\n    }\n    parseObjectData(meta, data, start, count) {\n      const { xScale, yScale } = meta;\n      const { xAxisKey = 'x', yAxisKey = 'y' } = this._parsing;\n      const parsed = [];\n      let i, ilen, item;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        item = data[i];\n        parsed.push({\n          x: xScale.parse(resolveObjectKey(item, xAxisKey), i),\n          y: yScale.parse(resolveObjectKey(item, yAxisKey), i),\n          _custom: item && item.r && +item.r\n        });\n      }\n      return parsed;\n    }\n    getMaxOverflow() {\n      const { data, _parsed } = this._cachedMeta;\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size() / 2, _parsed[i]._custom);\n      }\n      return max > 0 && max;\n    }\n    getLabelAndValue(index) {\n      const me = this;\n      const meta = me._cachedMeta;\n      const { xScale, yScale } = meta;\n      const parsed = me.getParsed(index);\n      const x = xScale.getLabelForValue(parsed.x);\n      const y = yScale.getLabelForValue(parsed.y);\n      const r = parsed._custom;\n      return {\n        label: meta.label,\n        value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n      };\n    }\n    update(mode) {\n      const me = this;\n      const points = me._cachedMeta.data;\n      me.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n      const me = this;\n      const reset = mode === 'reset';\n      const { iScale, vScale } = me._cachedMeta;\n      const firstOpts = me.resolveDataElementOptions(start, mode);\n      const sharedOptions = me.getSharedOptions(firstOpts);\n      const includeOptions = me.includeOptions(mode, sharedOptions);\n      const iAxis = iScale.axis;\n      const vAxis = vScale.axis;\n      for (let i = start; i < start + count; i++) {\n        const point = points[i];\n        const parsed = !reset && me.getParsed(i);\n        const properties = {};\n        const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n        const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel);\n        if (includeOptions) {\n          properties.options = me.resolveDataElementOptions(i, mode);\n          if (reset) {\n            properties.options.radius = 0;\n          }\n        }\n        me.updateElement(point, i, properties, mode);\n      }\n      me.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n    resolveDataElementOptions(index, mode) {\n      const parsed = this.getParsed(index);\n      let values = super.resolveDataElementOptions(index, mode);\n      if (values.$shared) {\n        values = Object.assign({}, values, { $shared: false });\n      }\n      const radius = values.radius;\n      if (mode !== 'active') {\n        values.radius = 0;\n      }\n      values.radius += valueOrDefault(parsed && parsed._custom, radius);\n      return values;\n    }\n  }\n  BubbleController.id = 'bubble';\n  BubbleController.defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n  BubbleController.overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          title() {\n            return '';\n          }\n        }\n      }\n    }\n  };\n\n  function getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n      const startAngle = rotation;\n      const endAngle = startAngle + circumference;\n      const startX = Math.cos(startAngle);\n      const startY = Math.sin(startAngle);\n      const endX = Math.cos(endAngle);\n      const endY = Math.sin(endAngle);\n      const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n      const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n      const maxX = calcMax(0, startX, endX);\n      const maxY = calcMax(HALF_PI, startY, endY);\n      const minX = calcMin(PI, startX, endX);\n      const minY = calcMin(PI + HALF_PI, startY, endY);\n      ratioX = (maxX - minX) / 2;\n      ratioY = (maxY - minY) / 2;\n      offsetX = -(maxX + minX) / 2;\n      offsetY = -(maxY + minY) / 2;\n    }\n    return { ratioX, ratioY, offsetX, offsetY };\n  }\n  class DoughnutController extends DatasetController {\n    constructor(chart, datasetIndex) {\n      super(chart, datasetIndex);\n      this.enableOptionSharing = true;\n      this.innerRadius = undefined;\n      this.outerRadius = undefined;\n      this.offsetX = undefined;\n      this.offsetY = undefined;\n    }\n    linkScales() { }\n    parse(start, count) {\n      const data = this.getDataset().data;\n      const meta = this._cachedMeta;\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = +data[i];\n      }\n    }\n    _getRotation() {\n      return toRadians(this.options.rotation - 90);\n    }\n    _getCircumference() {\n      return toRadians(this.options.circumference);\n    }\n    _getRotationExtents() {\n      let min = TAU;\n      let max = -TAU;\n      const me = this;\n      for (let i = 0; i < me.chart.data.datasets.length; ++i) {\n        if (me.chart.isDatasetVisible(i)) {\n          const controller = me.chart.getDatasetMeta(i).controller;\n          const rotation = controller._getRotation();\n          const circumference = controller._getCircumference();\n          min = Math.min(min, rotation);\n          max = Math.max(max, rotation + circumference);\n        }\n      }\n      return {\n        rotation: min,\n        circumference: max - min,\n      };\n    }\n    update(mode) {\n      const me = this;\n      const chart = me.chart;\n      const { chartArea } = chart;\n      const meta = me._cachedMeta;\n      const arcs = meta.data;\n      const spacing = me.getMaxBorderWidth() + me.getMaxOffset(arcs);\n      const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n      const cutout = Math.min(toPercentage(me.options.cutout, maxSize), 1);\n      const chartWeight = me._getRingWeight(me.index);\n      const { circumference, rotation } = me._getRotationExtents();\n      const { ratioX, ratioY, offsetX, offsetY } = getRatioAndOffset(rotation, circumference, cutout);\n      const maxWidth = (chartArea.width - spacing) / ratioX;\n      const maxHeight = (chartArea.height - spacing) / ratioY;\n      const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n      const outerRadius = toDimension(me.options.radius, maxRadius);\n      const innerRadius = Math.max(outerRadius * cutout, 0);\n      const radiusLength = (outerRadius - innerRadius) / me._getVisibleDatasetWeightTotal();\n      me.offsetX = offsetX * outerRadius;\n      me.offsetY = offsetY * outerRadius;\n      meta.total = me.calculateTotal();\n      me.outerRadius = outerRadius - radiusLength * me._getRingWeightOffset(me.index);\n      me.innerRadius = Math.max(me.outerRadius - radiusLength * chartWeight, 0);\n      me.updateElements(arcs, 0, arcs.length, mode);\n    }\n    _circumference(i, reset) {\n      const me = this;\n      const opts = me.options;\n      const meta = me._cachedMeta;\n      const circumference = me._getCircumference();\n      if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null) {\n        return 0;\n      }\n      return me.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n      const me = this;\n      const reset = mode === 'reset';\n      const chart = me.chart;\n      const chartArea = chart.chartArea;\n      const opts = chart.options;\n      const animationOpts = opts.animation;\n      const centerX = (chartArea.left + chartArea.right) / 2;\n      const centerY = (chartArea.top + chartArea.bottom) / 2;\n      const animateScale = reset && animationOpts.animateScale;\n      const innerRadius = animateScale ? 0 : me.innerRadius;\n      const outerRadius = animateScale ? 0 : me.outerRadius;\n      const firstOpts = me.resolveDataElementOptions(start, mode);\n      const sharedOptions = me.getSharedOptions(firstOpts);\n      const includeOptions = me.includeOptions(mode, sharedOptions);\n      let startAngle = me._getRotation();\n      let i;\n      for (i = 0; i < start; ++i) {\n        startAngle += me._circumference(i, reset);\n      }\n      for (i = start; i < start + count; ++i) {\n        const circumference = me._circumference(i, reset);\n        const arc = arcs[i];\n        const properties = {\n          x: centerX + me.offsetX,\n          y: centerY + me.offsetY,\n          startAngle,\n          endAngle: startAngle + circumference,\n          circumference,\n          outerRadius,\n          innerRadius\n        };\n        if (includeOptions) {\n          properties.options = sharedOptions || me.resolveDataElementOptions(i, mode);\n        }\n        startAngle += circumference;\n        me.updateElement(arc, i, properties, mode);\n      }\n      me.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n    calculateTotal() {\n      const meta = this._cachedMeta;\n      const metaData = meta.data;\n      let total = 0;\n      let i;\n      for (i = 0; i < metaData.length; i++) {\n        const value = meta._parsed[i];\n        if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i)) {\n          total += Math.abs(value);\n        }\n      }\n      return total;\n    }\n    calculateCircumference(value) {\n      const total = this._cachedMeta.total;\n      if (total > 0 && !isNaN(value)) {\n        return TAU * (Math.abs(value) / total);\n      }\n      return 0;\n    }\n    getLabelAndValue(index) {\n      const me = this;\n      const meta = me._cachedMeta;\n      const chart = me.chart;\n      const labels = chart.data.labels || [];\n      const value = formatNumber(meta._parsed[index], chart.options.locale);\n      return {\n        label: labels[index] || '',\n        value,\n      };\n    }\n    getMaxBorderWidth(arcs) {\n      const me = this;\n      let max = 0;\n      const chart = me.chart;\n      let i, ilen, meta, controller, options;\n      if (!arcs) {\n        for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n          if (chart.isDatasetVisible(i)) {\n            meta = chart.getDatasetMeta(i);\n            arcs = meta.data;\n            controller = meta.controller;\n            if (controller !== me) {\n              controller.configure();\n            }\n            break;\n          }\n        }\n      }\n      if (!arcs) {\n        return 0;\n      }\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        options = controller.resolveDataElementOptions(i);\n        if (options.borderAlign !== 'inner') {\n          max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n        }\n      }\n      return max;\n    }\n    getMaxOffset(arcs) {\n      let max = 0;\n      for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n        const options = this.resolveDataElementOptions(i);\n        max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n      }\n      return max;\n    }\n    _getRingWeightOffset(datasetIndex) {\n      let ringWeightOffset = 0;\n      for (let i = 0; i < datasetIndex; ++i) {\n        if (this.chart.isDatasetVisible(i)) {\n          ringWeightOffset += this._getRingWeight(i);\n        }\n      }\n      return ringWeightOffset;\n    }\n    _getRingWeight(datasetIndex) {\n      return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n    _getVisibleDatasetWeightTotal() {\n      return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n  }\n  DoughnutController.id = 'doughnut';\n  DoughnutController.defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth']\n      },\n    },\n    cutout: '50%',\n    rotation: 0,\n    circumference: 360,\n    radius: '100%',\n    indexAxis: 'r',\n  };\n  DoughnutController.overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  lineWidth: style.borderWidth,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      },\n      tooltip: {\n        callbacks: {\n          title() {\n            return '';\n          },\n          label(tooltipItem) {\n            let dataLabel = tooltipItem.label;\n            const value = ': ' + tooltipItem.formattedValue;\n            if (isArray(dataLabel)) {\n              dataLabel = dataLabel.slice();\n              dataLabel[0] += value;\n            } else {\n              dataLabel += value;\n            }\n            return dataLabel;\n          }\n        }\n      }\n    }\n  };\n\n  class LineController extends DatasetController {\n    initialize() {\n      this.enableOptionSharing = true;\n      super.initialize();\n    }\n    update(mode) {\n      const me = this;\n      const meta = me._cachedMeta;\n      const { dataset: line, data: points = [], _dataset } = meta;\n      const animationsDisabled = me.chart._animationsDisabled;\n      let { start, count } = getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n      me._drawStart = start;\n      me._drawCount = count;\n      if (scaleRangesChanged(meta)) {\n        start = 0;\n        count = points.length;\n      }\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = me.resolveDatasetElementOptions(mode);\n      if (!me.options.showLine) {\n        options.borderWidth = 0;\n      }\n      options.segment = me.options.segment;\n      me.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n      me.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n      const me = this;\n      const reset = mode === 'reset';\n      const { iScale, vScale, _stacked } = me._cachedMeta;\n      const firstOpts = me.resolveDataElementOptions(start, mode);\n      const sharedOptions = me.getSharedOptions(firstOpts);\n      const includeOptions = me.includeOptions(mode, sharedOptions);\n      const iAxis = iScale.axis;\n      const vAxis = vScale.axis;\n      const spanGaps = me.options.spanGaps;\n      const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n      const directUpdate = me.chart._animationsDisabled || reset || mode === 'none';\n      let prevParsed = start > 0 && me.getParsed(start - 1);\n      for (let i = start; i < start + count; ++i) {\n        const point = points[i];\n        const parsed = me.getParsed(i);\n        const properties = directUpdate ? point : {};\n        const nullData = isNullOrUndef(parsed[vAxis]);\n        const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n        const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? me.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n        properties.stop = i > 0 && (parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n        properties.parsed = parsed;\n        if (includeOptions) {\n          properties.options = sharedOptions || me.resolveDataElementOptions(i, mode);\n        }\n        if (!directUpdate) {\n          me.updateElement(point, i, properties, mode);\n        }\n        prevParsed = parsed;\n      }\n      me.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n    getMaxOverflow() {\n      const me = this;\n      const meta = me._cachedMeta;\n      const dataset = meta.dataset;\n      const border = dataset.options && dataset.options.borderWidth || 0;\n      const data = meta.data || [];\n      if (!data.length) {\n        return border;\n      }\n      const firstPoint = data[0].size(me.resolveDataElementOptions(0));\n      const lastPoint = data[data.length - 1].size(me.resolveDataElementOptions(data.length - 1));\n      return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n      const meta = this._cachedMeta;\n      meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n      super.draw();\n    }\n  }\n  LineController.id = 'line';\n  LineController.defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    showLine: true,\n    spanGaps: false,\n  };\n  LineController.overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n  function getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n      const { iScale, _parsed } = meta;\n      const axis = iScale.axis;\n      const { min, max, minDefined, maxDefined } = iScale.getUserBounds();\n      if (minDefined) {\n        start = _limitValue(Math.min(\n          _lookupByKey(_parsed, iScale.axis, min).lo,\n          animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),\n          0, pointCount - 1);\n      }\n      if (maxDefined) {\n        count = _limitValue(Math.max(\n          _lookupByKey(_parsed, iScale.axis, max).hi + 1,\n          animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max)).hi + 1),\n          start, pointCount) - start;\n      } else {\n        count = pointCount - start;\n      }\n    }\n    return { start, count };\n  }\n  function scaleRangesChanged(meta) {\n    const { xScale, yScale, _scaleRanges } = meta;\n    const newRanges = {\n      xmin: xScale.min,\n      xmax: xScale.max,\n      ymin: yScale.min,\n      ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n      meta._scaleRanges = newRanges;\n      return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min\n      || _scaleRanges.xmax !== xScale.max\n      || _scaleRanges.ymin !== yScale.min\n      || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n  }\n\n  class PolarAreaController extends DatasetController {\n    constructor(chart, datasetIndex) {\n      super(chart, datasetIndex);\n      this.innerRadius = undefined;\n      this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n      const me = this;\n      const meta = me._cachedMeta;\n      const chart = me.chart;\n      const labels = chart.data.labels || [];\n      const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n      return {\n        label: labels[index] || '',\n        value,\n      };\n    }\n    update(mode) {\n      const arcs = this._cachedMeta.data;\n      this._updateRadius();\n      this.updateElements(arcs, 0, arcs.length, mode);\n    }\n    _updateRadius() {\n      const me = this;\n      const chart = me.chart;\n      const chartArea = chart.chartArea;\n      const opts = chart.options;\n      const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n      const outerRadius = Math.max(minSize / 2, 0);\n      const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n      const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n      me.outerRadius = outerRadius - (radiusLength * me.index);\n      me.innerRadius = me.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n      const me = this;\n      const reset = mode === 'reset';\n      const chart = me.chart;\n      const dataset = me.getDataset();\n      const opts = chart.options;\n      const animationOpts = opts.animation;\n      const scale = me._cachedMeta.rScale;\n      const centerX = scale.xCenter;\n      const centerY = scale.yCenter;\n      const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n      let angle = datasetStartAngle;\n      let i;\n      const defaultAngle = 360 / me.countVisibleElements();\n      for (i = 0; i < start; ++i) {\n        angle += me._computeAngle(i, mode, defaultAngle);\n      }\n      for (i = start; i < start + count; i++) {\n        const arc = arcs[i];\n        let startAngle = angle;\n        let endAngle = angle + me._computeAngle(i, mode, defaultAngle);\n        let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(dataset.data[i]) : 0;\n        angle = endAngle;\n        if (reset) {\n          if (animationOpts.animateScale) {\n            outerRadius = 0;\n          }\n          if (animationOpts.animateRotate) {\n            startAngle = endAngle = datasetStartAngle;\n          }\n        }\n        const properties = {\n          x: centerX,\n          y: centerY,\n          innerRadius: 0,\n          outerRadius,\n          startAngle,\n          endAngle,\n          options: me.resolveDataElementOptions(i, mode)\n        };\n        me.updateElement(arc, i, properties, mode);\n      }\n    }\n    countVisibleElements() {\n      const dataset = this.getDataset();\n      const meta = this._cachedMeta;\n      let count = 0;\n      meta.data.forEach((element, index) => {\n        if (!isNaN(dataset.data[index]) && this.chart.getDataVisibility(index)) {\n          count++;\n        }\n      });\n      return count;\n    }\n    _computeAngle(index, mode, defaultAngle) {\n      return this.chart.getDataVisibility(index)\n        ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n        : 0;\n    }\n  }\n  PolarAreaController.id = 'polarArea';\n  PolarAreaController.defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n  PolarAreaController.overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  lineWidth: style.borderWidth,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      },\n      tooltip: {\n        callbacks: {\n          title() {\n            return '';\n          },\n          label(context) {\n            return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;\n          }\n        }\n      }\n    },\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  class PieController extends DoughnutController {\n  }\n  PieController.id = 'pie';\n  PieController.defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: '100%'\n  };\n\n  class RadarController extends DatasetController {\n    getLabelAndValue(index) {\n      const me = this;\n      const vScale = me._cachedMeta.vScale;\n      const parsed = me.getParsed(index);\n      return {\n        label: vScale.getLabels()[index],\n        value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n      };\n    }\n    update(mode) {\n      const me = this;\n      const meta = me._cachedMeta;\n      const line = meta.dataset;\n      const points = meta.data || [];\n      const labels = meta.iScale.getLabels();\n      line.points = points;\n      if (mode !== 'resize') {\n        const options = me.resolveDatasetElementOptions(mode);\n        if (!me.options.showLine) {\n          options.borderWidth = 0;\n        }\n        const properties = {\n          _loop: true,\n          _fullLoop: labels.length === points.length,\n          options\n        };\n        me.updateElement(line, undefined, properties, mode);\n      }\n      me.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n      const me = this;\n      const dataset = me.getDataset();\n      const scale = me._cachedMeta.rScale;\n      const reset = mode === 'reset';\n      for (let i = start; i < start + count; i++) {\n        const point = points[i];\n        const options = me.resolveDataElementOptions(i, mode);\n        const pointPosition = scale.getPointPositionForValue(i, dataset.data[i]);\n        const x = reset ? scale.xCenter : pointPosition.x;\n        const y = reset ? scale.yCenter : pointPosition.y;\n        const properties = {\n          x,\n          y,\n          angle: pointPosition.angle,\n          skip: isNaN(x) || isNaN(y),\n          options\n        };\n        me.updateElement(point, i, properties, mode);\n      }\n    }\n  }\n  RadarController.id = 'radar';\n  RadarController.defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n  RadarController.overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  class ScatterController extends LineController {\n  }\n  ScatterController.id = 'scatter';\n  ScatterController.defaults = {\n    showLine: false,\n    fill: false\n  };\n  ScatterController.overrides = {\n    interaction: {\n      mode: 'point'\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          title() {\n            return '';\n          },\n          label(item) {\n            return '(' + item.label + ', ' + item.formattedValue + ')';\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  var controllers = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    BarController: BarController,\n    BubbleController: BubbleController,\n    DoughnutController: DoughnutController,\n    LineController: LineController,\n    PolarAreaController: PolarAreaController,\n    PieController: PieController,\n    RadarController: RadarController,\n    ScatterController: ScatterController\n  });\n\n  function clipArc(ctx, element, endAngle) {\n    const { startAngle, pixelMargin, x, y, outerRadius, innerRadius } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n      angleMargin = pixelMargin / innerRadius;\n      ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n      ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n  }\n  function toRadiusCorners(value) {\n    return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n  }\n  function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    const computeOuterLimit = (val) => {\n      const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n      return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n      outerStart: computeOuterLimit(o.outerStart),\n      outerEnd: computeOuterLimit(o.outerEnd),\n      innerStart: _limitValue(o.innerStart, 0, innerLimit),\n      innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n    };\n  }\n  function rThetaToXY(r, theta, x, y) {\n    return {\n      x: x + r * Math.cos(theta),\n      y: y + r * Math.sin(theta),\n    };\n  }\n  function pathArc(ctx, element, offset, end) {\n    const { x, y, startAngle: start, pixelMargin, innerRadius: innerR } = element;\n    const outerRadius = Math.max(element.outerRadius + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + offset + pixelMargin : 0;\n    const alpha = end - start;\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset;\n    const endAngle = end - angleOffset;\n    const { outerStart, outerEnd, innerStart, innerEnd } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), startAngle + (innerStart / innerRadius), true);\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n    ctx.closePath();\n  }\n  function drawArc(ctx, element, offset) {\n    const { fullCircles, startAngle, circumference } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n      pathArc(ctx, element, offset, startAngle + TAU);\n      for (let i = 0; i < fullCircles; ++i) {\n        ctx.fill();\n      }\n      if (!isNaN(circumference)) {\n        endAngle = startAngle + circumference % TAU;\n        if (circumference % TAU === 0) {\n          endAngle += TAU;\n        }\n      }\n    }\n    pathArc(ctx, element, offset, endAngle);\n    ctx.fill();\n    return endAngle;\n  }\n  function drawFullCircleBorders(ctx, element, inner) {\n    const { x, y, startAngle, pixelMargin, fullCircles } = element;\n    const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);\n    const innerRadius = element.innerRadius + pixelMargin;\n    let i;\n    if (inner) {\n      clipArc(ctx, element, startAngle + TAU);\n    }\n    ctx.beginPath();\n    ctx.arc(x, y, innerRadius, startAngle + TAU, startAngle, true);\n    for (i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle, startAngle + TAU);\n    for (i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n  }\n  function drawBorder(ctx, element, offset, endAngle) {\n    const { options } = element;\n    const inner = options.borderAlign === 'inner';\n    if (!options.borderWidth) {\n      return;\n    }\n    if (inner) {\n      ctx.lineWidth = options.borderWidth * 2;\n      ctx.lineJoin = 'round';\n    } else {\n      ctx.lineWidth = options.borderWidth;\n      ctx.lineJoin = 'bevel';\n    }\n    if (element.fullCircles) {\n      drawFullCircleBorders(ctx, element, inner);\n    }\n    if (inner) {\n      clipArc(ctx, element, endAngle);\n    }\n    pathArc(ctx, element, offset, endAngle);\n    ctx.stroke();\n  }\n  class ArcElement extends Element {\n    constructor(cfg) {\n      super();\n      this.options = undefined;\n      this.circumference = undefined;\n      this.startAngle = undefined;\n      this.endAngle = undefined;\n      this.innerRadius = undefined;\n      this.outerRadius = undefined;\n      this.pixelMargin = 0;\n      this.fullCircles = 0;\n      if (cfg) {\n        Object.assign(this, cfg);\n      }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n      const point = this.getProps(['x', 'y'], useFinalPosition);\n      const { angle, distance } = getAngleFromPoint(point, { x: chartX, y: chartY });\n      const { startAngle, endAngle, innerRadius, outerRadius, circumference } = this.getProps([\n        'startAngle',\n        'endAngle',\n        'innerRadius',\n        'outerRadius',\n        'circumference'\n      ], useFinalPosition);\n      const betweenAngles = circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n      const withinRadius = (distance >= innerRadius && distance <= outerRadius);\n      return (betweenAngles && withinRadius);\n    }\n    getCenterPoint(useFinalPosition) {\n      const { x, y, startAngle, endAngle, innerRadius, outerRadius } = this.getProps([\n        'x',\n        'y',\n        'startAngle',\n        'endAngle',\n        'innerRadius',\n        'outerRadius',\n        'circumference'\n      ], useFinalPosition);\n      const halfAngle = (startAngle + endAngle) / 2;\n      const halfRadius = (innerRadius + outerRadius) / 2;\n      return {\n        x: x + Math.cos(halfAngle) * halfRadius,\n        y: y + Math.sin(halfAngle) * halfRadius\n      };\n    }\n    tooltipPosition(useFinalPosition) {\n      return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n      const me = this;\n      const { options, circumference } = me;\n      const offset = (options.offset || 0) / 2;\n      me.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n      me.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n      if (circumference === 0 || me.innerRadius < 0 || me.outerRadius < 0) {\n        return;\n      }\n      ctx.save();\n      let radiusOffset = 0;\n      if (offset) {\n        radiusOffset = offset / 2;\n        const halfAngle = (me.startAngle + me.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);\n        if (me.circumference >= PI) {\n          radiusOffset = offset;\n        }\n      }\n      ctx.fillStyle = options.backgroundColor;\n      ctx.strokeStyle = options.borderColor;\n      const endAngle = drawArc(ctx, me, radiusOffset);\n      drawBorder(ctx, me, radiusOffset, endAngle);\n      ctx.restore();\n    }\n  }\n  ArcElement.id = 'arc';\n  ArcElement.defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    angle: undefined,\n  };\n  ArcElement.defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  function setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n  }\n  function lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n  }\n  function getLineMethod(options) {\n    if (options.stepped) {\n      return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n      return _bezierCurveTo;\n    }\n    return lineTo;\n  }\n  function pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0, end: paramsEnd = count - 1 } = params;\n    const { start: segmentStart, end: segmentEnd } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n      count,\n      start,\n      loop: segment.loop,\n      ilen: end < start && !outside ? count + end - start : end - start\n    };\n  }\n  function pathSegment(ctx, line, segment, params) {\n    const { points, options } = line;\n    const { count, start, loop, ilen } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move = true, reverse } = params || {};\n    let i, point, prev;\n    for (i = 0; i <= ilen; ++i) {\n      point = points[(start + (reverse ? ilen - i : i)) % count];\n      if (point.skip) {\n        continue;\n      } else if (move) {\n        ctx.moveTo(point.x, point.y);\n        move = false;\n      } else {\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n      }\n      prev = point;\n    }\n    if (loop) {\n      point = points[(start + (reverse ? ilen : 0)) % count];\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n  }\n  function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count, start, ilen } = pathVars(points, segment, params);\n    const { move = true, reverse } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n    const drawX = () => {\n      if (minY !== maxY) {\n        ctx.lineTo(avgX, maxY);\n        ctx.lineTo(avgX, minY);\n        ctx.lineTo(avgX, lastY);\n      }\n    };\n    if (move) {\n      point = points[pointIndex(0)];\n      ctx.moveTo(point.x, point.y);\n    }\n    for (i = 0; i <= ilen; ++i) {\n      point = points[pointIndex(i)];\n      if (point.skip) {\n        continue;\n      }\n      const x = point.x;\n      const y = point.y;\n      const truncX = x | 0;\n      if (truncX === prevX) {\n        if (y < minY) {\n          minY = y;\n        } else if (y > maxY) {\n          maxY = y;\n        }\n        avgX = (countX * avgX + x) / ++countX;\n      } else {\n        drawX();\n        ctx.lineTo(x, y);\n        prevX = truncX;\n        countX = 0;\n        minY = maxY = y;\n      }\n      lastY = y;\n    }\n    drawX();\n  }\n  function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n  }\n  function _getInterpolationMethod(options) {\n    if (options.stepped) {\n      return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n      return _bezierInterpolation;\n    }\n    return _pointInLine;\n  }\n  function strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n      path = line._path = new Path2D();\n      if (line.path(path, start, count)) {\n        path.closePath();\n      }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n  }\n  function strokePathDirect(ctx, line, start, count) {\n    const { segments, options } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments) {\n      setStyle(ctx, options, segment.style);\n      ctx.beginPath();\n      if (segmentMethod(ctx, line, segment, { start, end: start + count - 1 })) {\n        ctx.closePath();\n      }\n      ctx.stroke();\n    }\n  }\n  const usePath2D = typeof Path2D === 'function';\n  function draw(ctx, line, start, count) {\n    if (usePath2D && line.segments.length === 1) {\n      strokePathWithCache(ctx, line, start, count);\n    } else {\n      strokePathDirect(ctx, line, start, count);\n    }\n  }\n  class LineElement extends Element {\n    constructor(cfg) {\n      super();\n      this.animated = true;\n      this.options = undefined;\n      this._loop = undefined;\n      this._fullLoop = undefined;\n      this._path = undefined;\n      this._points = undefined;\n      this._segments = undefined;\n      this._decimated = false;\n      this._pointsUpdated = false;\n      if (cfg) {\n        Object.assign(this, cfg);\n      }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n      const me = this;\n      const options = me.options;\n      if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !me._pointsUpdated) {\n        const loop = options.spanGaps ? me._loop : me._fullLoop;\n        _updateBezierControlPoints(me._points, options, chartArea, loop, indexAxis);\n        me._pointsUpdated = true;\n      }\n    }\n    set points(points) {\n      const me = this;\n      me._points = points;\n      delete me._segments;\n      delete me._path;\n      me._pointsUpdated = false;\n    }\n    get points() {\n      return this._points;\n    }\n    get segments() {\n      return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n    first() {\n      const segments = this.segments;\n      const points = this.points;\n      return segments.length && points[segments[0].start];\n    }\n    last() {\n      const segments = this.segments;\n      const points = this.points;\n      const count = segments.length;\n      return count && points[segments[count - 1].end];\n    }\n    interpolate(point, property) {\n      const me = this;\n      const options = me.options;\n      const value = point[property];\n      const points = me.points;\n      const segments = _boundSegments(me, { property, start: value, end: value });\n      if (!segments.length) {\n        return;\n      }\n      const result = [];\n      const _interpolate = _getInterpolationMethod(options);\n      let i, ilen;\n      for (i = 0, ilen = segments.length; i < ilen; ++i) {\n        const { start, end } = segments[i];\n        const p1 = points[start];\n        const p2 = points[end];\n        if (p1 === p2) {\n          result.push(p1);\n          continue;\n        }\n        const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n        const interpolated = _interpolate(p1, p2, t, options.stepped);\n        interpolated[property] = point[property];\n        result.push(interpolated);\n      }\n      return result.length === 1 ? result[0] : result;\n    }\n    pathSegment(ctx, segment, params) {\n      const segmentMethod = _getSegmentMethod(this);\n      return segmentMethod(ctx, this, segment, params);\n    }\n    path(ctx, start, count) {\n      const me = this;\n      const segments = me.segments;\n      const segmentMethod = _getSegmentMethod(me);\n      let loop = me._loop;\n      start = start || 0;\n      count = count || (me.points.length - start);\n      for (const segment of segments) {\n        loop &= segmentMethod(ctx, me, segment, { start, end: start + count - 1 });\n      }\n      return !!loop;\n    }\n    draw(ctx, chartArea, start, count) {\n      const me = this;\n      const options = me.options || {};\n      const points = me.points || [];\n      if (!points.length || !options.borderWidth) {\n        return;\n      }\n      ctx.save();\n      draw(ctx, me, start, count);\n      ctx.restore();\n      if (me.animated) {\n        me._pointsUpdated = false;\n        me._path = undefined;\n      }\n    }\n  }\n  LineElement.id = 'line';\n  LineElement.defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n  LineElement.defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  LineElement.descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n  function inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value } = el.getProps([axis], useFinalPosition);\n    return (Math.abs(pos - value) < options.radius + options.hitRadius);\n  }\n  class PointElement extends Element {\n    constructor(cfg) {\n      super();\n      this.options = undefined;\n      this.parsed = undefined;\n      this.skip = undefined;\n      this.stop = undefined;\n      if (cfg) {\n        Object.assign(this, cfg);\n      }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n      const options = this.options;\n      const { x, y } = this.getProps(['x', 'y'], useFinalPosition);\n      return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n    }\n    inXRange(mouseX, useFinalPosition) {\n      return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n      return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n      const { x, y } = this.getProps(['x', 'y'], useFinalPosition);\n      return { x, y };\n    }\n    size(options) {\n      options = options || this.options || {};\n      let radius = options.radius || 0;\n      radius = Math.max(radius, radius && options.hoverRadius || 0);\n      const borderWidth = radius && options.borderWidth || 0;\n      return (radius + borderWidth) * 2;\n    }\n    draw(ctx) {\n      const me = this;\n      const options = me.options;\n      if (me.skip || options.radius < 0.1) {\n        return;\n      }\n      ctx.strokeStyle = options.borderColor;\n      ctx.lineWidth = options.borderWidth;\n      ctx.fillStyle = options.backgroundColor;\n      drawPoint(ctx, options, me.x, me.y);\n    }\n    getRange() {\n      const options = this.options || {};\n      return options.radius + options.hitRadius;\n    }\n  }\n  PointElement.id = 'point';\n  PointElement.defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n  PointElement.defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  function getBarBounds(bar, useFinalPosition) {\n    const { x, y, base, width, height } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n      half = height / 2;\n      left = Math.min(x, base);\n      right = Math.max(x, base);\n      top = y - half;\n      bottom = y + half;\n    } else {\n      half = width / 2;\n      left = x - half;\n      right = x + half;\n      top = Math.min(y, base);\n      bottom = Math.max(y, base);\n    }\n    return { left, top, right, bottom };\n  }\n  function parseBorderSkipped(bar) {\n    let edge = bar.options.borderSkipped;\n    const res = {};\n    if (!edge) {\n      return res;\n    }\n    edge = bar.horizontal\n      ? parseEdge(edge, 'left', 'right', bar.base > bar.x)\n      : parseEdge(edge, 'bottom', 'top', bar.base < bar.y);\n    res[edge] = true;\n    return res;\n  }\n  function parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n      edge = swap(edge, a, b);\n      edge = startEnd(edge, b, a);\n    } else {\n      edge = startEnd(edge, a, b);\n    }\n    return edge;\n  }\n  function swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n  }\n  function startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n  }\n  function skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : Math.max(Math.min(value, max), min);\n  }\n  function parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = parseBorderSkipped(bar);\n    const o = toTRBL(value);\n    return {\n      t: skipOrLimit(skip.top, o.top, 0, maxH),\n      r: skipOrLimit(skip.right, o.right, 0, maxW),\n      b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n      l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n  }\n  function parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius } = bar.getProps(['enableBorderRadius']);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = parseBorderSkipped(bar);\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n      topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n      topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n      bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n      bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n  }\n  function boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n      outer: {\n        x: bounds.left,\n        y: bounds.top,\n        w: width,\n        h: height,\n        radius\n      },\n      inner: {\n        x: bounds.left + border.l,\n        y: bounds.top + border.t,\n        w: width - border.l - border.r,\n        h: height - border.t - border.b,\n        radius: {\n          topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n          topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n          bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n          bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n        }\n      }\n    };\n  }\n  function inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds\n      && (skipX || x >= bounds.left && x <= bounds.right)\n      && (skipY || y >= bounds.top && y <= bounds.bottom);\n  }\n  function hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n  }\n  function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n  }\n  class BarElement extends Element {\n    constructor(cfg) {\n      super();\n      this.options = undefined;\n      this.horizontal = undefined;\n      this.base = undefined;\n      this.width = undefined;\n      this.height = undefined;\n      if (cfg) {\n        Object.assign(this, cfg);\n      }\n    }\n    draw(ctx) {\n      const options = this.options;\n      const { inner, outer } = boundingRects(this);\n      const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n      ctx.save();\n      if (outer.w !== inner.w || outer.h !== inner.h) {\n        ctx.beginPath();\n        addRectPath(ctx, outer);\n        ctx.clip();\n        addRectPath(ctx, inner);\n        ctx.fillStyle = options.borderColor;\n        ctx.fill('evenodd');\n      }\n      ctx.beginPath();\n      addRectPath(ctx, inner);\n      ctx.fillStyle = options.backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n      return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n      return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n      return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n      const { x, y, base, horizontal } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n      return {\n        x: horizontal ? (x + base) / 2 : x,\n        y: horizontal ? y : (y + base) / 2\n      };\n    }\n    getRange(axis) {\n      return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n  }\n  BarElement.id = 'bar';\n  BarElement.defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    enableBorderRadius: true,\n    pointStyle: undefined\n  };\n  BarElement.defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  var elements = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ArcElement: ArcElement,\n    LineElement: LineElement,\n    PointElement: PointElement,\n    BarElement: BarElement\n  });\n\n  function lttbDecimation(data, start, count, availableWidth, options) {\n    const samples = options.samples || availableWidth;\n    if (samples >= count) {\n      return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for (i = 0; i < samples - 2; i++) {\n      let avgX = 0;\n      let avgY = 0;\n      let j;\n      const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n      const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n      const avgRangeLength = avgRangeEnd - avgRangeStart;\n      for (j = avgRangeStart; j < avgRangeEnd; j++) {\n        avgX += data[j].x;\n        avgY += data[j].y;\n      }\n      avgX /= avgRangeLength;\n      avgY /= avgRangeLength;\n      const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n      const rangeTo = Math.floor((i + 1) * bucketWidth) + 1 + start;\n      const { x: pointAx, y: pointAy } = data[a];\n      maxArea = area = -1;\n      for (j = rangeOffs; j < rangeTo; j++) {\n        area = 0.5 * Math.abs(\n          (pointAx - avgX) * (data[j].y - pointAy) -\n          (pointAx - data[j].x) * (avgY - pointAy)\n        );\n        if (area > maxArea) {\n          maxArea = area;\n          maxAreaPoint = data[j];\n          nextA = j;\n        }\n      }\n      decimated[sampledIndex++] = maxAreaPoint;\n      a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n  }\n  function minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for (i = start; i < start + count; ++i) {\n      point = data[i];\n      x = (point.x - xMin) / dx * availableWidth;\n      y = point.y;\n      const truncX = x | 0;\n      if (truncX === prevX) {\n        if (y < minY) {\n          minY = y;\n          minIndex = i;\n        } else if (y > maxY) {\n          maxY = y;\n          maxIndex = i;\n        }\n        avgX = (countX * avgX + point.x) / ++countX;\n      } else {\n        const lastIndex = i - 1;\n        if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n          const intermediateIndex1 = Math.min(minIndex, maxIndex);\n          const intermediateIndex2 = Math.max(minIndex, maxIndex);\n          if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n            decimated.push({\n              ...data[intermediateIndex1],\n              x: avgX,\n            });\n          }\n          if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n            decimated.push({\n              ...data[intermediateIndex2],\n              x: avgX\n            });\n          }\n        }\n        if (i > 0 && lastIndex !== startIndex) {\n          decimated.push(data[lastIndex]);\n        }\n        decimated.push(point);\n        prevX = truncX;\n        countX = 0;\n        minY = maxY = y;\n        minIndex = maxIndex = startIndex = i;\n      }\n    }\n    return decimated;\n  }\n  function cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n      const data = dataset._data;\n      delete dataset._decimated;\n      delete dataset._data;\n      Object.defineProperty(dataset, 'data', { value: data });\n    }\n  }\n  function cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset) => {\n      cleanDecimatedDataset(dataset);\n    });\n  }\n  function getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale } = meta;\n    const { min, max, minDefined, maxDefined } = iScale.getUserBounds();\n    if (minDefined) {\n      start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n      count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n      count = pointCount - start;\n    }\n    return { start, count };\n  }\n  var plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n      algorithm: 'min-max',\n      enabled: false,\n    },\n    beforeElementsUpdate: (chart, args, options) => {\n      if (!options.enabled) {\n        cleanDecimatedData(chart);\n        return;\n      }\n      const availableWidth = chart.width;\n      chart.data.datasets.forEach((dataset, datasetIndex) => {\n        const { _data, indexAxis } = dataset;\n        const meta = chart.getDatasetMeta(datasetIndex);\n        const data = _data || dataset.data;\n        if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n          return;\n        }\n        if (meta.type !== 'line') {\n          return;\n        }\n        const xAxis = chart.scales[meta.xAxisID];\n        if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n          return;\n        }\n        if (chart.options.parsing) {\n          return;\n        }\n        let { start, count } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n        if (count <= 4 * availableWidth) {\n          cleanDecimatedDataset(dataset);\n          return;\n        }\n        if (isNullOrUndef(_data)) {\n          dataset._data = data;\n          delete dataset.data;\n          Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            get: function () {\n              return this._decimated;\n            },\n            set: function (d) {\n              this._data = d;\n            }\n          });\n        }\n        let decimated;\n        switch (options.algorithm) {\n          case 'lttb':\n            decimated = lttbDecimation(data, start, count, availableWidth, options);\n            break;\n          case 'min-max':\n            decimated = minMaxDecimation(data, start, count, availableWidth);\n            break;\n          default:\n            throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n        }\n        dataset._decimated = decimated;\n      });\n    },\n    destroy(chart) {\n      cleanDecimatedData(chart);\n    }\n  };\n\n  function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n  }\n  function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n      fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n      return false;\n    }\n    if (fill === true) {\n      return 'origin';\n    }\n    return fill;\n  }\n  function decodeFill(line, index, count) {\n    const fill = parseFillOption(line);\n    if (isObject(fill)) {\n      return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n      if (fill[0] === '-' || fill[0] === '+') {\n        target = index + target;\n      }\n      if (target === index || target < 0 || target >= count) {\n        return false;\n      }\n      return target;\n    }\n    return ['origin', 'start', 'end', 'stack'].indexOf(fill) >= 0 && fill;\n  }\n  function computeLinearBoundary(source) {\n    const { scale = {}, fill } = source;\n    let target = null;\n    let horizontal;\n    if (fill === 'start') {\n      target = scale.bottom;\n    } else if (fill === 'end') {\n      target = scale.top;\n    } else if (isObject(fill)) {\n      target = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n      target = scale.getBasePixel();\n    }\n    if (isNumberFinite(target)) {\n      horizontal = scale.isHorizontal();\n      return {\n        x: horizontal ? target : null,\n        y: horizontal ? null : target\n      };\n    }\n    return null;\n  }\n  class simpleArc {\n    constructor(opts) {\n      this.x = opts.x;\n      this.y = opts.y;\n      this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n      const { x, y, radius } = this;\n      bounds = bounds || { start: 0, end: TAU };\n      ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n      return !opts.bounds;\n    }\n    interpolate(point) {\n      const { x, y, radius } = this;\n      const angle = point.angle;\n      return {\n        x: x + Math.cos(angle) * radius,\n        y: y + Math.sin(angle) * radius,\n        angle\n      };\n    }\n  }\n  function computeCircularBoundary(source) {\n    const { scale, fill } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const target = [];\n    const start = options.reverse ? scale.max : scale.min;\n    const end = options.reverse ? scale.min : scale.max;\n    let i, center, value;\n    if (fill === 'start') {\n      value = start;\n    } else if (fill === 'end') {\n      value = end;\n    } else if (isObject(fill)) {\n      value = fill.value;\n    } else {\n      value = scale.getBaseValue();\n    }\n    if (options.grid.circular) {\n      center = scale.getPointPositionForValue(0, start);\n      return new simpleArc({\n        x: center.x,\n        y: center.y,\n        radius: scale.getDistanceFromCenterForValue(value)\n      });\n    }\n    for (i = 0; i < length; ++i) {\n      target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n  }\n  function computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n      return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n  }\n  function pointsFromSegments(boundary, line) {\n    const { x = null, y = null } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach((segment) => {\n      const first = linePoints[segment.start];\n      const last = linePoints[segment.end];\n      if (y !== null) {\n        points.push({ x: first.x, y });\n        points.push({ x: last.x, y });\n      } else if (x !== null) {\n        points.push({ x, y: first.y });\n        points.push({ x, y: last.y });\n      }\n    });\n    return points;\n  }\n  function buildStackLine(source) {\n    const { chart, scale, index, line } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(chart, index);\n    linesBelow.push(createBoundaryLine({ x: null, y: scale.bottom }, line));\n    for (let i = 0; i < segments.length; i++) {\n      const segment = segments[i];\n      for (let j = segment.start; j <= segment.end; j++) {\n        addPointsBelow(points, sourcePoints[j], linesBelow);\n      }\n    }\n    return new LineElement({ points, options: {} });\n  }\n  const isLineAndNotInHideAnimation = (meta) => meta.type === 'line' && !meta.hidden;\n  function getLinesBelow(chart, index) {\n    const below = [];\n    const metas = chart.getSortedVisibleDatasetMetas();\n    for (let i = 0; i < metas.length; i++) {\n      const meta = metas[i];\n      if (meta.index === index) {\n        break;\n      }\n      if (isLineAndNotInHideAnimation(meta)) {\n        below.unshift(meta.dataset);\n      }\n    }\n    return below;\n  }\n  function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for (let j = 0; j < linesBelow.length; j++) {\n      const line = linesBelow[j];\n      const { first, last, point } = findPoint(line, sourcePoint, 'x');\n      if (!point || (first && last)) {\n        continue;\n      }\n      if (first) {\n        postponed.unshift(point);\n      } else {\n        points.push(point);\n        if (!last) {\n          break;\n        }\n      }\n    }\n    points.push(...postponed);\n  }\n  function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n      return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for (let i = 0; i < segments.length; i++) {\n      const segment = segments[i];\n      const firstValue = linePoints[segment.start][property];\n      const lastValue = linePoints[segment.end][property];\n      if (pointValue >= firstValue && pointValue <= lastValue) {\n        first = pointValue === firstValue;\n        last = pointValue === lastValue;\n        break;\n      }\n    }\n    return { first, last, point };\n  }\n  function getTarget(source) {\n    const { chart, fill, line } = source;\n    if (isNumberFinite(fill)) {\n      return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n      return buildStackLine(source);\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n      return boundary;\n    }\n    return createBoundaryLine(boundary, line);\n  }\n  function createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n      _loop = true;\n      points = boundary;\n    } else {\n      points = pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n      points,\n      options: { tension: 0 },\n      _loop,\n      _fullLoop: _loop\n    }) : null;\n  }\n  function resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [index];\n    let target;\n    if (!propagate) {\n      return fill;\n    }\n    while (fill !== false && visited.indexOf(fill) === -1) {\n      if (!isNumberFinite(fill)) {\n        return fill;\n      }\n      target = sources[fill];\n      if (!target) {\n        return false;\n      }\n      if (target.visible) {\n        return fill;\n      }\n      visited.push(fill);\n      fill = target.fill;\n    }\n    return false;\n  }\n  function _clip(ctx, target, clipY) {\n    ctx.beginPath();\n    target.path(ctx);\n    ctx.lineTo(target.last().x, clipY);\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n  }\n  function getBounds(property, first, last, loop) {\n    if (loop) {\n      return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n      start = _normalizeAngle(start);\n      end = _normalizeAngle(end);\n    }\n    return { property, start, end };\n  }\n  function _getEdge(a, b, prop, fn) {\n    if (a && b) {\n      return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n  }\n  function _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments) {\n      const bounds = getBounds(property, points[segment.start], points[segment.end], segment.loop);\n      if (!target.segments) {\n        parts.push({\n          source: segment,\n          target: bounds,\n          start: points[segment.start],\n          end: points[segment.end]\n        });\n        continue;\n      }\n      const targetSegments = _boundSegments(target, bounds);\n      for (const tgt of targetSegments) {\n        const subBounds = getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n        const fillSources = _boundSegment(segment, points, subBounds);\n        for (const fillSource of fillSources) {\n          parts.push({\n            source: fillSource,\n            target: tgt,\n            start: {\n              [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n            },\n            end: {\n              [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n            }\n          });\n        }\n      }\n    }\n    return parts;\n  }\n  function clipBounds(ctx, scale, bounds) {\n    const { top, bottom } = scale.chart.chartArea;\n    const { property, start, end } = bounds || {};\n    if (property === 'x') {\n      ctx.beginPath();\n      ctx.rect(start, top, end - start, bottom - top);\n      ctx.clip();\n    }\n  }\n  function interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n      ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n  }\n  function _fill(ctx, cfg) {\n    const { line, target, property, color, scale } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src, target: tgt, start, end } of segments) {\n      const { style: { backgroundColor = color } = {} } = src;\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      clipBounds(ctx, scale, getBounds(property, start, end));\n      ctx.beginPath();\n      const lineLoop = !!line.pathSegment(ctx, src);\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, { move: lineLoop, reverse: true });\n      const loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n      ctx.closePath();\n      ctx.fill(loop ? 'evenodd' : 'nonzero');\n      ctx.restore();\n    }\n  }\n  function doFill(ctx, cfg) {\n    const { line, target, above, below, area, scale } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n      _clip(ctx, target, area.top);\n      _fill(ctx, { line, target, color: above, scale, property });\n      ctx.restore();\n      ctx.save();\n      _clip(ctx, target, area.bottom);\n    }\n    _fill(ctx, { line, target, color: below, scale, property });\n    ctx.restore();\n  }\n  function drawfill(ctx, source, area) {\n    const target = getTarget(source);\n    const { line, scale, axis } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above = color, below = color } = fillOption || {};\n    if (target && line.points.length) {\n      clipArea(ctx, area);\n      doFill(ctx, { line, target, above, below, area, scale, axis });\n      unclipArea(ctx);\n    }\n  }\n  var plugin_filler = {\n    id: 'filler',\n    afterDatasetsUpdate(chart, _args, options) {\n      const count = (chart.data.datasets || []).length;\n      const sources = [];\n      let meta, i, line, source;\n      for (i = 0; i < count; ++i) {\n        meta = chart.getDatasetMeta(i);\n        line = meta.dataset;\n        source = null;\n        if (line && line.options && line instanceof LineElement) {\n          source = {\n            visible: chart.isDatasetVisible(i),\n            index: i,\n            fill: decodeFill(line, i, count),\n            chart,\n            axis: meta.controller.options.indexAxis,\n            scale: meta.vScale,\n            line,\n          };\n        }\n        meta.$filler = source;\n        sources.push(source);\n      }\n      for (i = 0; i < count; ++i) {\n        source = sources[i];\n        if (!source || source.fill === false) {\n          continue;\n        }\n        source.fill = resolveTarget(sources, i, options.propagate);\n      }\n    },\n    beforeDraw(chart, _args, options) {\n      const draw = options.drawTime === 'beforeDraw';\n      const metasets = chart.getSortedVisibleDatasetMetas();\n      const area = chart.chartArea;\n      for (let i = metasets.length - 1; i >= 0; --i) {\n        const source = metasets[i].$filler;\n        if (!source) {\n          continue;\n        }\n        source.line.updateControlPoints(area, source.axis);\n        if (draw) {\n          drawfill(chart.ctx, source, area);\n        }\n      }\n    },\n    beforeDatasetsDraw(chart, _args, options) {\n      if (options.drawTime !== 'beforeDatasetsDraw') {\n        return;\n      }\n      const metasets = chart.getSortedVisibleDatasetMetas();\n      for (let i = metasets.length - 1; i >= 0; --i) {\n        const source = metasets[i].$filler;\n        if (source) {\n          drawfill(chart.ctx, source, chart.chartArea);\n        }\n      }\n    },\n    beforeDatasetDraw(chart, args, options) {\n      const source = args.meta.$filler;\n      if (!source || source.fill === false || options.drawTime !== 'beforeDatasetDraw') {\n        return;\n      }\n      drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n      propagate: true,\n      drawTime: 'beforeDatasetDraw'\n    }\n  };\n\n  const getBoxSize = (labelOpts, fontSize) => {\n    let { boxHeight = fontSize, boxWidth = fontSize } = labelOpts;\n    if (labelOpts.usePointStyle) {\n      boxHeight = Math.min(boxHeight, fontSize);\n      boxWidth = Math.min(boxWidth, fontSize);\n    }\n    return {\n      boxWidth,\n      boxHeight,\n      itemHeight: Math.max(fontSize, boxHeight)\n    };\n  };\n  const itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n  class Legend extends Element {\n    constructor(config) {\n      super();\n      this._added = false;\n      this.legendHitBoxes = [];\n      this._hoveredItem = null;\n      this.doughnutMode = false;\n      this.chart = config.chart;\n      this.options = config.options;\n      this.ctx = config.ctx;\n      this.legendItems = undefined;\n      this.columnSizes = undefined;\n      this.lineWidths = undefined;\n      this.maxHeight = undefined;\n      this.maxWidth = undefined;\n      this.top = undefined;\n      this.bottom = undefined;\n      this.left = undefined;\n      this.right = undefined;\n      this.height = undefined;\n      this.width = undefined;\n      this._margins = undefined;\n      this.position = undefined;\n      this.weight = undefined;\n      this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n      const me = this;\n      me.maxWidth = maxWidth;\n      me.maxHeight = maxHeight;\n      me._margins = margins;\n      me.setDimensions();\n      me.buildLabels();\n      me.fit();\n    }\n    setDimensions() {\n      const me = this;\n      if (me.isHorizontal()) {\n        me.width = me.maxWidth;\n        me.left = 0;\n        me.right = me.width;\n      } else {\n        me.height = me.maxHeight;\n        me.top = 0;\n        me.bottom = me.height;\n      }\n    }\n    buildLabels() {\n      const me = this;\n      const labelOpts = me.options.labels || {};\n      let legendItems = callback(labelOpts.generateLabels, [me.chart], me) || [];\n      if (labelOpts.filter) {\n        legendItems = legendItems.filter((item) => labelOpts.filter(item, me.chart.data));\n      }\n      if (labelOpts.sort) {\n        legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, me.chart.data));\n      }\n      if (me.options.reverse) {\n        legendItems.reverse();\n      }\n      me.legendItems = legendItems;\n    }\n    fit() {\n      const me = this;\n      const { options, ctx } = me;\n      if (!options.display) {\n        me.width = me.height = 0;\n        return;\n      }\n      const labelOpts = options.labels;\n      const labelFont = toFont(labelOpts.font);\n      const fontSize = labelFont.size;\n      const titleHeight = me._computeTitleHeight();\n      const { boxWidth, itemHeight } = getBoxSize(labelOpts, fontSize);\n      let width, height;\n      ctx.font = labelFont.string;\n      if (me.isHorizontal()) {\n        width = me.maxWidth;\n        height = me._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n      } else {\n        height = me.maxHeight;\n        width = me._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n      }\n      me.width = Math.min(width, options.maxWidth || me.maxWidth);\n      me.height = Math.min(height, options.maxHeight || me.maxHeight);\n    }\n    _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n      const me = this;\n      const { ctx, maxWidth, options: { labels: { padding } } } = me;\n      const hitboxes = me.legendHitBoxes = [];\n      const lineWidths = me.lineWidths = [0];\n      const lineHeight = itemHeight + padding;\n      let totalHeight = titleHeight;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      let row = -1;\n      let top = -lineHeight;\n      me.legendItems.forEach((legendItem, i) => {\n        const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n        if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n          totalHeight += lineHeight;\n          lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n          top += lineHeight;\n          row++;\n        }\n        hitboxes[i] = { left: 0, top, row, width: itemWidth, height: itemHeight };\n        lineWidths[lineWidths.length - 1] += itemWidth + padding;\n      });\n      return totalHeight;\n    }\n    _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {\n      const me = this;\n      const { ctx, maxHeight, options: { labels: { padding } } } = me;\n      const hitboxes = me.legendHitBoxes = [];\n      const columnSizes = me.columnSizes = [];\n      const heightLimit = maxHeight - titleHeight;\n      let totalWidth = padding;\n      let currentColWidth = 0;\n      let currentColHeight = 0;\n      let left = 0;\n      let top = 0;\n      let col = 0;\n      me.legendItems.forEach((legendItem, i) => {\n        const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n        if (i > 0 && currentColHeight + fontSize + 2 * padding > heightLimit) {\n          totalWidth += currentColWidth + padding;\n          columnSizes.push({ width: currentColWidth, height: currentColHeight });\n          left += currentColWidth + padding;\n          col++;\n          top = 0;\n          currentColWidth = currentColHeight = 0;\n        }\n        currentColWidth = Math.max(currentColWidth, itemWidth);\n        currentColHeight += fontSize + padding;\n        hitboxes[i] = { left, top, col, width: itemWidth, height: itemHeight };\n        top += itemHeight + padding;\n      });\n      totalWidth += currentColWidth;\n      columnSizes.push({ width: currentColWidth, height: currentColHeight });\n      return totalWidth;\n    }\n    adjustHitBoxes() {\n      const me = this;\n      if (!me.options.display) {\n        return;\n      }\n      const titleHeight = me._computeTitleHeight();\n      const { legendHitBoxes: hitboxes, options: { align, labels: { padding } } } = me;\n      if (this.isHorizontal()) {\n        let row = 0;\n        let left = _alignStartEnd(align, me.left + padding, me.right - me.lineWidths[row]);\n        for (const hitbox of hitboxes) {\n          if (row !== hitbox.row) {\n            row = hitbox.row;\n            left = _alignStartEnd(align, me.left + padding, me.right - me.lineWidths[row]);\n          }\n          hitbox.top += me.top + titleHeight + padding;\n          hitbox.left = left;\n          left += hitbox.width + padding;\n        }\n      } else {\n        let col = 0;\n        let top = _alignStartEnd(align, me.top + titleHeight + padding, me.bottom - me.columnSizes[col].height);\n        for (const hitbox of hitboxes) {\n          if (hitbox.col !== col) {\n            col = hitbox.col;\n            top = _alignStartEnd(align, me.top + titleHeight + padding, me.bottom - me.columnSizes[col].height);\n          }\n          hitbox.top = top;\n          hitbox.left += me.left + padding;\n          top += hitbox.height + padding;\n        }\n      }\n    }\n    isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n      const me = this;\n      if (me.options.display) {\n        const ctx = me.ctx;\n        clipArea(ctx, me);\n        me._draw();\n        unclipArea(ctx);\n      }\n    }\n    _draw() {\n      const me = this;\n      const { options: opts, columnSizes, lineWidths, ctx } = me;\n      const { align, labels: labelOpts } = opts;\n      const defaultColor = defaults.color;\n      const rtlHelper = getRtlAdapter(opts.rtl, me.left, me.width);\n      const labelFont = toFont(labelOpts.font);\n      const { color: fontColor, padding } = labelOpts;\n      const fontSize = labelFont.size;\n      const halfFontSize = fontSize / 2;\n      let cursor;\n      me.drawTitle();\n      ctx.textAlign = rtlHelper.textAlign('left');\n      ctx.textBaseline = 'middle';\n      ctx.lineWidth = 0.5;\n      ctx.font = labelFont.string;\n      const { boxWidth, boxHeight, itemHeight } = getBoxSize(labelOpts, fontSize);\n      const drawLegendBox = function (x, y, legendItem) {\n        if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n          return;\n        }\n        ctx.save();\n        const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n        ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n        ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n        ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n        ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n        ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n        if (labelOpts.usePointStyle) {\n          const drawOptions = {\n            radius: boxWidth * Math.SQRT2 / 2,\n            pointStyle: legendItem.pointStyle,\n            rotation: legendItem.rotation,\n            borderWidth: lineWidth\n          };\n          const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n          const centerY = y + halfFontSize;\n          drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n          const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n          const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n          const borderRadius = toTRBLCorners(legendItem.borderRadius);\n          ctx.beginPath();\n          if (Object.values(borderRadius).some(v => v !== 0)) {\n            addRoundedRectPath(ctx, {\n              x: xBoxLeft,\n              y: yBoxTop,\n              w: boxWidth,\n              h: boxHeight,\n              radius: borderRadius,\n            });\n          } else {\n            ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n          }\n          ctx.fill();\n          if (lineWidth !== 0) {\n            ctx.stroke();\n          }\n        }\n        ctx.restore();\n      };\n      const fillText = function (x, y, legendItem) {\n        renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n          strikethrough: legendItem.hidden,\n          textAlign: legendItem.textAlign\n        });\n      };\n      const isHorizontal = me.isHorizontal();\n      const titleHeight = this._computeTitleHeight();\n      if (isHorizontal) {\n        cursor = {\n          x: _alignStartEnd(align, me.left + padding, me.right - lineWidths[0]),\n          y: me.top + padding + titleHeight,\n          line: 0\n        };\n      } else {\n        cursor = {\n          x: me.left + padding,\n          y: _alignStartEnd(align, me.top + titleHeight + padding, me.bottom - columnSizes[0].height),\n          line: 0\n        };\n      }\n      overrideTextDirection(me.ctx, opts.textDirection);\n      const lineHeight = itemHeight + padding;\n      me.legendItems.forEach((legendItem, i) => {\n        ctx.strokeStyle = legendItem.fontColor || fontColor;\n        ctx.fillStyle = legendItem.fontColor || fontColor;\n        const textWidth = ctx.measureText(legendItem.text).width;\n        const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n        const width = boxWidth + (fontSize / 2) + textWidth;\n        let x = cursor.x;\n        let y = cursor.y;\n        rtlHelper.setWidth(me.width);\n        if (isHorizontal) {\n          if (i > 0 && x + width + padding > me.right) {\n            y = cursor.y += lineHeight;\n            cursor.line++;\n            x = cursor.x = _alignStartEnd(align, me.left + padding, me.right - lineWidths[cursor.line]);\n          }\n        } else if (i > 0 && y + lineHeight > me.bottom) {\n          x = cursor.x = x + columnSizes[cursor.line].width + padding;\n          cursor.line++;\n          y = cursor.y = _alignStartEnd(align, me.top + titleHeight + padding, me.bottom - columnSizes[cursor.line].height);\n        }\n        const realX = rtlHelper.x(x);\n        drawLegendBox(realX, y, legendItem);\n        x = _textX(textAlign, x + boxWidth + halfFontSize, me.right);\n        fillText(rtlHelper.x(x), y, legendItem);\n        if (isHorizontal) {\n          cursor.x += width + padding;\n        } else {\n          cursor.y += lineHeight;\n        }\n      });\n      restoreTextDirection(me.ctx, opts.textDirection);\n    }\n    drawTitle() {\n      const me = this;\n      const opts = me.options;\n      const titleOpts = opts.title;\n      const titleFont = toFont(titleOpts.font);\n      const titlePadding = toPadding(titleOpts.padding);\n      if (!titleOpts.display) {\n        return;\n      }\n      const rtlHelper = getRtlAdapter(opts.rtl, me.left, me.width);\n      const ctx = me.ctx;\n      const position = titleOpts.position;\n      const halfFontSize = titleFont.size / 2;\n      const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n      let y;\n      let left = me.left;\n      let maxWidth = me.width;\n      if (this.isHorizontal()) {\n        maxWidth = Math.max(...me.lineWidths);\n        y = me.top + topPaddingPlusHalfFontSize;\n        left = _alignStartEnd(opts.align, left, me.right - maxWidth);\n      } else {\n        const maxHeight = me.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n        y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, me.top, me.bottom - maxHeight - opts.labels.padding - me._computeTitleHeight());\n      }\n      const x = _alignStartEnd(position, left, left + maxWidth);\n      ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n      ctx.textBaseline = 'middle';\n      ctx.strokeStyle = titleOpts.color;\n      ctx.fillStyle = titleOpts.color;\n      ctx.font = titleFont.string;\n      renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n    _computeTitleHeight() {\n      const titleOpts = this.options.title;\n      const titleFont = toFont(titleOpts.font);\n      const titlePadding = toPadding(titleOpts.padding);\n      return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n    _getLegendItemAt(x, y) {\n      const me = this;\n      let i, hitBox, lh;\n      if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {\n        lh = me.legendHitBoxes;\n        for (i = 0; i < lh.length; ++i) {\n          hitBox = lh[i];\n          if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {\n            return me.legendItems[i];\n          }\n        }\n      }\n      return null;\n    }\n    handleEvent(e) {\n      const me = this;\n      const opts = me.options;\n      if (!isListened(e.type, opts)) {\n        return;\n      }\n      const hoveredItem = me._getLegendItemAt(e.x, e.y);\n      if (e.type === 'mousemove') {\n        const previous = me._hoveredItem;\n        const sameItem = itemsEqual(previous, hoveredItem);\n        if (previous && !sameItem) {\n          callback(opts.onLeave, [e, previous, me], me);\n        }\n        me._hoveredItem = hoveredItem;\n        if (hoveredItem && !sameItem) {\n          callback(opts.onHover, [e, hoveredItem, me], me);\n        }\n      } else if (hoveredItem) {\n        callback(opts.onClick, [e, hoveredItem, me], me);\n      }\n    }\n  }\n  function isListened(type, opts) {\n    if (type === 'mousemove' && (opts.onHover || opts.onLeave)) {\n      return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n      return true;\n    }\n    return false;\n  }\n  var plugin_legend = {\n    id: 'legend',\n    _element: Legend,\n    start(chart, _args, options) {\n      const legend = chart.legend = new Legend({ ctx: chart.ctx, options, chart });\n      layouts.configure(chart, legend, options);\n      layouts.addBox(chart, legend);\n    },\n    stop(chart) {\n      layouts.removeBox(chart, chart.legend);\n      delete chart.legend;\n    },\n    beforeUpdate(chart, _args, options) {\n      const legend = chart.legend;\n      layouts.configure(chart, legend, options);\n      legend.options = options;\n    },\n    afterUpdate(chart) {\n      const legend = chart.legend;\n      legend.buildLabels();\n      legend.adjustHitBoxes();\n    },\n    afterEvent(chart, args) {\n      if (!args.replay) {\n        chart.legend.handleEvent(args.event);\n      }\n    },\n    defaults: {\n      display: true,\n      position: 'top',\n      align: 'center',\n      fullSize: true,\n      reverse: false,\n      weight: 1000,\n      onClick(e, legendItem, legend) {\n        const index = legendItem.datasetIndex;\n        const ci = legend.chart;\n        if (ci.isDatasetVisible(index)) {\n          ci.hide(index);\n          legendItem.hidden = true;\n        } else {\n          ci.show(index);\n          legendItem.hidden = false;\n        }\n      },\n      onHover: null,\n      onLeave: null,\n      labels: {\n        color: (ctx) => ctx.chart.options.color,\n        boxWidth: 40,\n        padding: 10,\n        generateLabels(chart) {\n          const datasets = chart.data.datasets;\n          const { labels: { usePointStyle, pointStyle, textAlign, color } } = chart.legend.options;\n          return chart._getSortedDatasetMetas().map((meta) => {\n            const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n            const borderWidth = toPadding(style.borderWidth);\n            return {\n              text: datasets[meta.index].label,\n              fillStyle: style.backgroundColor,\n              fontColor: color,\n              hidden: !meta.visible,\n              lineCap: style.borderCapStyle,\n              lineDash: style.borderDash,\n              lineDashOffset: style.borderDashOffset,\n              lineJoin: style.borderJoinStyle,\n              lineWidth: (borderWidth.width + borderWidth.height) / 4,\n              strokeStyle: style.borderColor,\n              pointStyle: pointStyle || style.pointStyle,\n              rotation: style.rotation,\n              textAlign: textAlign || style.textAlign,\n              borderRadius: 0,\n              datasetIndex: meta.index\n            };\n          }, this);\n        }\n      },\n      title: {\n        color: (ctx) => ctx.chart.options.color,\n        display: false,\n        position: 'center',\n        text: '',\n      }\n    },\n    descriptors: {\n      _scriptable: (name) => !name.startsWith('on'),\n      labels: {\n        _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n      }\n    },\n  };\n\n  class Title extends Element {\n    constructor(config) {\n      super();\n      this.chart = config.chart;\n      this.options = config.options;\n      this.ctx = config.ctx;\n      this._padding = undefined;\n      this.top = undefined;\n      this.bottom = undefined;\n      this.left = undefined;\n      this.right = undefined;\n      this.width = undefined;\n      this.height = undefined;\n      this.position = undefined;\n      this.weight = undefined;\n      this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n      const me = this;\n      const opts = me.options;\n      me.left = 0;\n      me.top = 0;\n      if (!opts.display) {\n        me.width = me.height = me.right = me.bottom = 0;\n        return;\n      }\n      me.width = me.right = maxWidth;\n      me.height = me.bottom = maxHeight;\n      const lineCount = isArray(opts.text) ? opts.text.length : 1;\n      me._padding = toPadding(opts.padding);\n      const textSize = lineCount * toFont(opts.font).lineHeight + me._padding.height;\n      if (me.isHorizontal()) {\n        me.height = textSize;\n      } else {\n        me.width = textSize;\n      }\n    }\n    isHorizontal() {\n      const pos = this.options.position;\n      return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n      const { top, left, bottom, right, options } = this;\n      const align = options.align;\n      let rotation = 0;\n      let maxWidth, titleX, titleY;\n      if (this.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        titleY = top + offset;\n        maxWidth = right - left;\n      } else {\n        if (options.position === 'left') {\n          titleX = left + offset;\n          titleY = _alignStartEnd(align, bottom, top);\n          rotation = PI * -0.5;\n        } else {\n          titleX = right - offset;\n          titleY = _alignStartEnd(align, top, bottom);\n          rotation = PI * 0.5;\n        }\n        maxWidth = bottom - top;\n      }\n      return { titleX, titleY, maxWidth, rotation };\n    }\n    draw() {\n      const me = this;\n      const ctx = me.ctx;\n      const opts = me.options;\n      if (!opts.display) {\n        return;\n      }\n      const fontOpts = toFont(opts.font);\n      const lineHeight = fontOpts.lineHeight;\n      const offset = lineHeight / 2 + me._padding.top;\n      const { titleX, titleY, maxWidth, rotation } = me._drawArgs(offset);\n      renderText(ctx, opts.text, 0, 0, fontOpts, {\n        color: opts.color,\n        maxWidth,\n        rotation,\n        textAlign: _toLeftRightCenter(opts.align),\n        textBaseline: 'middle',\n        translation: [titleX, titleY],\n      });\n    }\n  }\n  function createTitle(chart, titleOpts) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options: titleOpts,\n      chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n  }\n  var plugin_title = {\n    id: 'title',\n    _element: Title,\n    start(chart, _args, options) {\n      createTitle(chart, options);\n    },\n    stop(chart) {\n      const titleBlock = chart.titleBlock;\n      layouts.removeBox(chart, titleBlock);\n      delete chart.titleBlock;\n    },\n    beforeUpdate(chart, _args, options) {\n      const title = chart.titleBlock;\n      layouts.configure(chart, title, options);\n      title.options = options;\n    },\n    defaults: {\n      align: 'center',\n      display: false,\n      font: {\n        weight: 'bold',\n      },\n      fullSize: true,\n      padding: 10,\n      position: 'top',\n      text: '',\n      weight: 2000\n    },\n    defaultRoutes: {\n      color: 'color'\n    },\n    descriptors: {\n      _scriptable: true,\n      _indexable: false,\n    },\n  };\n\n  const positioners = {\n    average(items) {\n      if (!items.length) {\n        return false;\n      }\n      let i, len;\n      let x = 0;\n      let y = 0;\n      let count = 0;\n      for (i = 0, len = items.length; i < len; ++i) {\n        const el = items[i].element;\n        if (el && el.hasValue()) {\n          const pos = el.tooltipPosition();\n          x += pos.x;\n          y += pos.y;\n          ++count;\n        }\n      }\n      return {\n        x: x / count,\n        y: y / count\n      };\n    },\n    nearest(items, eventPosition) {\n      if (!items.length) {\n        return false;\n      }\n      let x = eventPosition.x;\n      let y = eventPosition.y;\n      let minDistance = Number.POSITIVE_INFINITY;\n      let i, len, nearestElement;\n      for (i = 0, len = items.length; i < len; ++i) {\n        const el = items[i].element;\n        if (el && el.hasValue()) {\n          const center = el.getCenterPoint();\n          const d = distanceBetweenPoints(eventPosition, center);\n          if (d < minDistance) {\n            minDistance = d;\n            nearestElement = el;\n          }\n        }\n      }\n      if (nearestElement) {\n        const tp = nearestElement.tooltipPosition();\n        x = tp.x;\n        y = tp.y;\n      }\n      return {\n        x,\n        y\n      };\n    }\n  };\n  function pushOrConcat(base, toPush) {\n    if (toPush) {\n      if (isArray(toPush)) {\n        Array.prototype.push.apply(base, toPush);\n      } else {\n        base.push(toPush);\n      }\n    }\n    return base;\n  }\n  function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n      return str.split('\\n');\n    }\n    return str;\n  }\n  function createTooltipItem(chart, item) {\n    const { element, datasetIndex, index } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label, value } = controller.getLabelAndValue(index);\n    return {\n      chart,\n      label,\n      parsed: controller.getParsed(index),\n      raw: chart.data.datasets[datasetIndex].data[index],\n      formattedValue: value,\n      dataset: controller.getDataset(),\n      dataIndex: index,\n      datasetIndex,\n      element\n    };\n  }\n  function getTooltipSize(tooltip, options) {\n    const ctx = tooltip._chart.ctx;\n    const { body, footer, title } = tooltip;\n    const { boxWidth, boxHeight } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n      height += titleLineCount * titleFont.lineHeight\n        + (titleLineCount - 1) * options.titleSpacing\n        + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n      const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n      height += bodyLineItemCount * bodyLineHeight\n        + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n        + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n      height += options.footerMarginTop\n        + footerLineCount * footerFont.lineHeight\n        + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function (line) {\n      width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? (boxWidth + 2) : 0;\n    each(body, (bodyItem) => {\n      each(bodyItem.before, maxLineWidth);\n      each(bodyItem.lines, maxLineWidth);\n      each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return { width, height };\n  }\n  function determineYAlign(chart, size) {\n    const { y, height } = size;\n    if (y < height / 2) {\n      return 'top';\n    } else if (y > (chart.height - height / 2)) {\n      return 'bottom';\n    }\n    return 'center';\n  }\n  function doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x, width } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n      return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n      return true;\n    }\n  }\n  function determineXAlign(chart, options, size, yAlign) {\n    const { x, width } = size;\n    const { width: chartWidth, chartArea: { left, right } } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n      xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n      xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n      xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n      xAlign = 'center';\n    }\n    return xAlign;\n  }\n  function determineAlignment(chart, options, size) {\n    const yAlign = options.yAlign || determineYAlign(chart, size);\n    return {\n      xAlign: options.xAlign || determineXAlign(chart, options, size, yAlign),\n      yAlign\n    };\n  }\n  function alignX(size, xAlign) {\n    let { x, width } = size;\n    if (xAlign === 'right') {\n      x -= width;\n    } else if (xAlign === 'center') {\n      x -= (width / 2);\n    }\n    return x;\n  }\n  function alignY(size, yAlign, paddingAndSize) {\n    let { y, height } = size;\n    if (yAlign === 'top') {\n      y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n      y -= height + paddingAndSize;\n    } else {\n      y -= (height / 2);\n    }\n    return y;\n  }\n  function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize, caretPadding, cornerRadius } = options;\n    const { xAlign, yAlign } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const radiusAndPadding = cornerRadius + caretPadding;\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n      if (xAlign === 'left') {\n        x += paddingAndSize;\n      } else if (xAlign === 'right') {\n        x -= paddingAndSize;\n      }\n    } else if (xAlign === 'left') {\n      x -= radiusAndPadding;\n    } else if (xAlign === 'right') {\n      x += radiusAndPadding;\n    }\n    return {\n      x: _limitValue(x, 0, chart.width - size.width),\n      y: _limitValue(y, 0, chart.height - size.height)\n    };\n  }\n  function getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center'\n      ? tooltip.x + tooltip.width / 2\n      : align === 'right'\n        ? tooltip.x + tooltip.width - padding.right\n        : tooltip.x + padding.left;\n  }\n  function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n  }\n  function createTooltipContext(parent, tooltip, tooltipItems) {\n    return Object.assign(Object.create(parent), {\n      tooltip,\n      tooltipItems,\n      type: 'tooltip'\n    });\n  }\n  function overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n  }\n  class Tooltip extends Element {\n    constructor(config) {\n      super();\n      this.opacity = 0;\n      this._active = [];\n      this._chart = config._chart;\n      this._eventPosition = undefined;\n      this._size = undefined;\n      this._cachedAnimations = undefined;\n      this._tooltipItems = [];\n      this.$animations = undefined;\n      this.$context = undefined;\n      this.options = config.options;\n      this.dataPoints = undefined;\n      this.title = undefined;\n      this.beforeBody = undefined;\n      this.body = undefined;\n      this.afterBody = undefined;\n      this.footer = undefined;\n      this.xAlign = undefined;\n      this.yAlign = undefined;\n      this.x = undefined;\n      this.y = undefined;\n      this.height = undefined;\n      this.width = undefined;\n      this.caretX = undefined;\n      this.caretY = undefined;\n      this.labelColors = undefined;\n      this.labelPointStyles = undefined;\n      this.labelTextColors = undefined;\n    }\n    initialize(options) {\n      this.options = options;\n      this._cachedAnimations = undefined;\n      this.$context = undefined;\n    }\n    _resolveAnimations() {\n      const me = this;\n      const cached = me._cachedAnimations;\n      if (cached) {\n        return cached;\n      }\n      const chart = me._chart;\n      const options = me.options.setContext(me.getContext());\n      const opts = options.enabled && chart.options.animation && options.animations;\n      const animations = new Animations(me._chart, opts);\n      if (opts._cacheable) {\n        me._cachedAnimations = Object.freeze(animations);\n      }\n      return animations;\n    }\n    getContext() {\n      const me = this;\n      return me.$context ||\n        (me.$context = createTooltipContext(me._chart.getContext(), me, me._tooltipItems));\n    }\n    getTitle(context, options) {\n      const me = this;\n      const { callbacks } = options;\n      const beforeTitle = callbacks.beforeTitle.apply(me, [context]);\n      const title = callbacks.title.apply(me, [context]);\n      const afterTitle = callbacks.afterTitle.apply(me, [context]);\n      let lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n      lines = pushOrConcat(lines, splitNewlines(title));\n      lines = pushOrConcat(lines, splitNewlines(afterTitle));\n      return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n      return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));\n    }\n    getBody(tooltipItems, options) {\n      const me = this;\n      const { callbacks } = options;\n      const bodyItems = [];\n      each(tooltipItems, (context) => {\n        const bodyItem = {\n          before: [],\n          lines: [],\n          after: []\n        };\n        const scoped = overrideCallbacks(callbacks, context);\n        pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(me, context)));\n        pushOrConcat(bodyItem.lines, scoped.label.call(me, context));\n        pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(me, context)));\n        bodyItems.push(bodyItem);\n      });\n      return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n      return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));\n    }\n    getFooter(tooltipItems, options) {\n      const me = this;\n      const { callbacks } = options;\n      const beforeFooter = callbacks.beforeFooter.apply(me, [tooltipItems]);\n      const footer = callbacks.footer.apply(me, [tooltipItems]);\n      const afterFooter = callbacks.afterFooter.apply(me, [tooltipItems]);\n      let lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n      lines = pushOrConcat(lines, splitNewlines(footer));\n      lines = pushOrConcat(lines, splitNewlines(afterFooter));\n      return lines;\n    }\n    _createItems(options) {\n      const me = this;\n      const active = me._active;\n      const data = me._chart.data;\n      const labelColors = [];\n      const labelPointStyles = [];\n      const labelTextColors = [];\n      let tooltipItems = [];\n      let i, len;\n      for (i = 0, len = active.length; i < len; ++i) {\n        tooltipItems.push(createTooltipItem(me._chart, active[i]));\n      }\n      if (options.filter) {\n        tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n      }\n      if (options.itemSort) {\n        tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n      }\n      each(tooltipItems, (context) => {\n        const scoped = overrideCallbacks(options.callbacks, context);\n        labelColors.push(scoped.labelColor.call(me, context));\n        labelPointStyles.push(scoped.labelPointStyle.call(me, context));\n        labelTextColors.push(scoped.labelTextColor.call(me, context));\n      });\n      me.labelColors = labelColors;\n      me.labelPointStyles = labelPointStyles;\n      me.labelTextColors = labelTextColors;\n      me.dataPoints = tooltipItems;\n      return tooltipItems;\n    }\n    update(changed, replay) {\n      const me = this;\n      const options = me.options.setContext(me.getContext());\n      const active = me._active;\n      let properties;\n      let tooltipItems = [];\n      if (!active.length) {\n        if (me.opacity !== 0) {\n          properties = {\n            opacity: 0\n          };\n        }\n      } else {\n        const position = positioners[options.position].call(me, active, me._eventPosition);\n        tooltipItems = me._createItems(options);\n        me.title = me.getTitle(tooltipItems, options);\n        me.beforeBody = me.getBeforeBody(tooltipItems, options);\n        me.body = me.getBody(tooltipItems, options);\n        me.afterBody = me.getAfterBody(tooltipItems, options);\n        me.footer = me.getFooter(tooltipItems, options);\n        const size = me._size = getTooltipSize(me, options);\n        const positionAndSize = Object.assign({}, position, size);\n        const alignment = determineAlignment(me._chart, options, positionAndSize);\n        const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, me._chart);\n        me.xAlign = alignment.xAlign;\n        me.yAlign = alignment.yAlign;\n        properties = {\n          opacity: 1,\n          x: backgroundPoint.x,\n          y: backgroundPoint.y,\n          width: size.width,\n          height: size.height,\n          caretX: position.x,\n          caretY: position.y\n        };\n      }\n      me._tooltipItems = tooltipItems;\n      me.$context = undefined;\n      if (properties) {\n        me._resolveAnimations().update(me, properties);\n      }\n      if (changed && options.external) {\n        options.external.call(me, { chart: me._chart, tooltip: me, replay });\n      }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n      const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n      ctx.lineTo(caretPosition.x1, caretPosition.y1);\n      ctx.lineTo(caretPosition.x2, caretPosition.y2);\n      ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n      const { xAlign, yAlign } = this;\n      const { cornerRadius, caretSize } = options;\n      const { x: ptX, y: ptY } = tooltipPoint;\n      const { width, height } = size;\n      let x1, x2, x3, y1, y2, y3;\n      if (yAlign === 'center') {\n        y2 = ptY + (height / 2);\n        if (xAlign === 'left') {\n          x1 = ptX;\n          x2 = x1 - caretSize;\n          y1 = y2 + caretSize;\n          y3 = y2 - caretSize;\n        } else {\n          x1 = ptX + width;\n          x2 = x1 + caretSize;\n          y1 = y2 - caretSize;\n          y3 = y2 + caretSize;\n        }\n        x3 = x1;\n      } else {\n        if (xAlign === 'left') {\n          x2 = ptX + cornerRadius + (caretSize);\n        } else if (xAlign === 'right') {\n          x2 = ptX + width - cornerRadius - caretSize;\n        } else {\n          x2 = this.caretX;\n        }\n        if (yAlign === 'top') {\n          y1 = ptY;\n          y2 = y1 - caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else {\n          y1 = ptY + height;\n          y2 = y1 + caretSize;\n          x1 = x2 + caretSize;\n          x3 = x2 - caretSize;\n        }\n        y3 = y1;\n      }\n      return { x1, x2, x3, y1, y2, y3 };\n    }\n    drawTitle(pt, ctx, options) {\n      const me = this;\n      const title = me.title;\n      const length = title.length;\n      let titleFont, titleSpacing, i;\n      if (length) {\n        const rtlHelper = getRtlAdapter(options.rtl, me.x, me.width);\n        pt.x = getAlignedX(me, options.titleAlign, options);\n        ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n        ctx.textBaseline = 'middle';\n        titleFont = toFont(options.titleFont);\n        titleSpacing = options.titleSpacing;\n        ctx.fillStyle = options.titleColor;\n        ctx.font = titleFont.string;\n        for (i = 0; i < length; ++i) {\n          ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n          pt.y += titleFont.lineHeight + titleSpacing;\n          if (i + 1 === length) {\n            pt.y += options.titleMarginBottom - titleSpacing;\n          }\n        }\n      }\n    }\n    _drawColorBox(ctx, pt, i, rtlHelper, options) {\n      const me = this;\n      const labelColors = me.labelColors[i];\n      const labelPointStyle = me.labelPointStyles[i];\n      const { boxHeight, boxWidth } = options;\n      const bodyFont = toFont(options.bodyFont);\n      const colorX = getAlignedX(me, 'left', options);\n      const rtlColorX = rtlHelper.x(colorX);\n      const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n      const colorY = pt.y + yOffSet;\n      if (options.usePointStyle) {\n        const drawOptions = {\n          radius: Math.min(boxWidth, boxHeight) / 2,\n          pointStyle: labelPointStyle.pointStyle,\n          rotation: labelPointStyle.rotation,\n          borderWidth: 1\n        };\n        const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n        const centerY = colorY + boxHeight / 2;\n        ctx.strokeStyle = options.multiKeyBackground;\n        ctx.fillStyle = options.multiKeyBackground;\n        drawPoint(ctx, drawOptions, centerX, centerY);\n        ctx.strokeStyle = labelColors.borderColor;\n        ctx.fillStyle = labelColors.backgroundColor;\n        drawPoint(ctx, drawOptions, centerX, centerY);\n      } else {\n        ctx.lineWidth = labelColors.borderWidth || 1;\n        ctx.strokeStyle = labelColors.borderColor;\n        ctx.setLineDash(labelColors.borderDash || []);\n        ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n        const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n        const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n        const borderRadius = toTRBLCorners(labelColors.borderRadius);\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          ctx.beginPath();\n          ctx.fillStyle = options.multiKeyBackground;\n          addRoundedRectPath(ctx, {\n            x: outerX,\n            y: colorY,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n          ctx.fill();\n          ctx.stroke();\n          ctx.fillStyle = labelColors.backgroundColor;\n          ctx.beginPath();\n          addRoundedRectPath(ctx, {\n            x: innerX,\n            y: colorY + 1,\n            w: boxWidth - 2,\n            h: boxHeight - 2,\n            radius: borderRadius,\n          });\n          ctx.fill();\n        } else {\n          ctx.fillStyle = options.multiKeyBackground;\n          ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n          ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n          ctx.fillStyle = labelColors.backgroundColor;\n          ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n        }\n      }\n      ctx.fillStyle = me.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n      const me = this;\n      const { body } = me;\n      const { bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth } = options;\n      const bodyFont = toFont(options.bodyFont);\n      let bodyLineHeight = bodyFont.lineHeight;\n      let xLinePadding = 0;\n      const rtlHelper = getRtlAdapter(options.rtl, me.x, me.width);\n      const fillLineOfText = function (line) {\n        ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n        pt.y += bodyLineHeight + bodySpacing;\n      };\n      const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n      let bodyItem, textColor, lines, i, j, ilen, jlen;\n      ctx.textAlign = bodyAlign;\n      ctx.textBaseline = 'middle';\n      ctx.font = bodyFont.string;\n      pt.x = getAlignedX(me, bodyAlignForCalculation, options);\n      ctx.fillStyle = options.bodyColor;\n      each(me.beforeBody, fillLineOfText);\n      xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n        ? bodyAlign === 'center' ? (boxWidth / 2 + 1) : (boxWidth + 2)\n        : 0;\n      for (i = 0, ilen = body.length; i < ilen; ++i) {\n        bodyItem = body[i];\n        textColor = me.labelTextColors[i];\n        ctx.fillStyle = textColor;\n        each(bodyItem.before, fillLineOfText);\n        lines = bodyItem.lines;\n        if (displayColors && lines.length) {\n          me._drawColorBox(ctx, pt, i, rtlHelper, options);\n          bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n        }\n        for (j = 0, jlen = lines.length; j < jlen; ++j) {\n          fillLineOfText(lines[j]);\n          bodyLineHeight = bodyFont.lineHeight;\n        }\n        each(bodyItem.after, fillLineOfText);\n      }\n      xLinePadding = 0;\n      bodyLineHeight = bodyFont.lineHeight;\n      each(me.afterBody, fillLineOfText);\n      pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n      const me = this;\n      const footer = me.footer;\n      const length = footer.length;\n      let footerFont, i;\n      if (length) {\n        const rtlHelper = getRtlAdapter(options.rtl, me.x, me.width);\n        pt.x = getAlignedX(me, options.footerAlign, options);\n        pt.y += options.footerMarginTop;\n        ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n        ctx.textBaseline = 'middle';\n        footerFont = toFont(options.footerFont);\n        ctx.fillStyle = options.footerColor;\n        ctx.font = footerFont.string;\n        for (i = 0; i < length; ++i) {\n          ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n          pt.y += footerFont.lineHeight + options.footerSpacing;\n        }\n      }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n      const { xAlign, yAlign } = this;\n      const { x, y } = pt;\n      const { width, height } = tooltipSize;\n      const radius = options.cornerRadius;\n      ctx.fillStyle = options.backgroundColor;\n      ctx.strokeStyle = options.borderColor;\n      ctx.lineWidth = options.borderWidth;\n      ctx.beginPath();\n      ctx.moveTo(x + radius, y);\n      if (yAlign === 'top') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + width - radius, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n      if (yAlign === 'center' && xAlign === 'right') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + width, y + height - radius);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n      if (yAlign === 'bottom') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + radius, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n      if (yAlign === 'center' && xAlign === 'left') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x, y + radius);\n      ctx.quadraticCurveTo(x, y, x + radius, y);\n      ctx.closePath();\n      ctx.fill();\n      if (options.borderWidth > 0) {\n        ctx.stroke();\n      }\n    }\n    _updateAnimationTarget(options) {\n      const me = this;\n      const chart = me._chart;\n      const anims = me.$animations;\n      const animX = anims && anims.x;\n      const animY = anims && anims.y;\n      if (animX || animY) {\n        const position = positioners[options.position].call(me, me._active, me._eventPosition);\n        if (!position) {\n          return;\n        }\n        const size = me._size = getTooltipSize(me, options);\n        const positionAndSize = Object.assign({}, position, me._size);\n        const alignment = determineAlignment(chart, options, positionAndSize);\n        const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n        if (animX._to !== point.x || animY._to !== point.y) {\n          me.xAlign = alignment.xAlign;\n          me.yAlign = alignment.yAlign;\n          me.width = size.width;\n          me.height = size.height;\n          me.caretX = position.x;\n          me.caretY = position.y;\n          me._resolveAnimations().update(me, point);\n        }\n      }\n    }\n    draw(ctx) {\n      const me = this;\n      const options = me.options.setContext(me.getContext());\n      let opacity = me.opacity;\n      if (!opacity) {\n        return;\n      }\n      me._updateAnimationTarget(options);\n      const tooltipSize = {\n        width: me.width,\n        height: me.height\n      };\n      const pt = {\n        x: me.x,\n        y: me.y\n      };\n      opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n      const padding = toPadding(options.padding);\n      const hasTooltipContent = me.title.length || me.beforeBody.length || me.body.length || me.afterBody.length || me.footer.length;\n      if (options.enabled && hasTooltipContent) {\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        me.drawBackground(pt, ctx, tooltipSize, options);\n        overrideTextDirection(ctx, options.textDirection);\n        pt.y += padding.top;\n        me.drawTitle(pt, ctx, options);\n        me.drawBody(pt, ctx, options);\n        me.drawFooter(pt, ctx, options);\n        restoreTextDirection(ctx, options.textDirection);\n        ctx.restore();\n      }\n    }\n    getActiveElements() {\n      return this._active || [];\n    }\n    setActiveElements(activeElements, eventPosition) {\n      const me = this;\n      const lastActive = me._active;\n      const active = activeElements.map(({ datasetIndex, index }) => {\n        const meta = me._chart.getDatasetMeta(datasetIndex);\n        if (!meta) {\n          throw new Error('Cannot find a dataset at index ' + datasetIndex);\n        }\n        return {\n          datasetIndex,\n          element: meta.data[index],\n          index,\n        };\n      });\n      const changed = !_elementsEqual(lastActive, active);\n      const positionChanged = me._positionChanged(active, eventPosition);\n      if (changed || positionChanged) {\n        me._active = active;\n        me._eventPosition = eventPosition;\n        me.update(true);\n      }\n    }\n    handleEvent(e, replay) {\n      const me = this;\n      const options = me.options;\n      const lastActive = me._active || [];\n      let changed = false;\n      let active = [];\n      if (e.type !== 'mouseout') {\n        active = me._chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n          active.reverse();\n        }\n      }\n      const positionChanged = me._positionChanged(active, e);\n      changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n      if (changed) {\n        me._active = active;\n        if (options.enabled || options.external) {\n          me._eventPosition = {\n            x: e.x,\n            y: e.y\n          };\n          me.update(true, replay);\n        }\n      }\n      return changed;\n    }\n    _positionChanged(active, e) {\n      const { caretX, caretY, options } = this;\n      const position = positioners[options.position].call(this, active, e);\n      return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n  }\n  Tooltip.positioners = positioners;\n  var plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit(chart, _args, options) {\n      if (options) {\n        chart.tooltip = new Tooltip({ _chart: chart, options });\n      }\n    },\n    beforeUpdate(chart, _args, options) {\n      if (chart.tooltip) {\n        chart.tooltip.initialize(options);\n      }\n    },\n    reset(chart, _args, options) {\n      if (chart.tooltip) {\n        chart.tooltip.initialize(options);\n      }\n    },\n    afterDraw(chart) {\n      const tooltip = chart.tooltip;\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {\n        return;\n      }\n      if (tooltip) {\n        tooltip.draw(chart.ctx);\n      }\n      chart.notifyPlugins('afterTooltipDraw', args);\n    },\n    afterEvent(chart, args) {\n      if (chart.tooltip) {\n        const useFinalPosition = args.replay;\n        if (chart.tooltip.handleEvent(args.event, useFinalPosition)) {\n          args.changed = true;\n        }\n      }\n    },\n    defaults: {\n      enabled: true,\n      external: null,\n      position: 'average',\n      backgroundColor: 'rgba(0,0,0,0.8)',\n      titleColor: '#fff',\n      titleFont: {\n        weight: 'bold',\n      },\n      titleSpacing: 2,\n      titleMarginBottom: 6,\n      titleAlign: 'left',\n      bodyColor: '#fff',\n      bodySpacing: 2,\n      bodyFont: {\n      },\n      bodyAlign: 'left',\n      footerColor: '#fff',\n      footerSpacing: 2,\n      footerMarginTop: 6,\n      footerFont: {\n        weight: 'bold',\n      },\n      footerAlign: 'left',\n      padding: 6,\n      caretPadding: 2,\n      caretSize: 5,\n      cornerRadius: 6,\n      boxHeight: (ctx, opts) => opts.bodyFont.size,\n      boxWidth: (ctx, opts) => opts.bodyFont.size,\n      multiKeyBackground: '#fff',\n      displayColors: true,\n      borderColor: 'rgba(0,0,0,0)',\n      borderWidth: 0,\n      animation: {\n        duration: 400,\n        easing: 'easeOutQuart',\n      },\n      animations: {\n        numbers: {\n          type: 'number',\n          properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n        },\n        opacity: {\n          easing: 'linear',\n          duration: 200\n        }\n      },\n      callbacks: {\n        beforeTitle: noop,\n        title(tooltipItems) {\n          if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n              return item.dataset.label || '';\n            } else if (item.label) {\n              return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n              return labels[item.dataIndex];\n            }\n          }\n          return '';\n        },\n        afterTitle: noop,\n        beforeBody: noop,\n        beforeLabel: noop,\n        label(tooltipItem) {\n          if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n          }\n          let label = tooltipItem.dataset.label || '';\n          if (label) {\n            label += ': ';\n          }\n          const value = tooltipItem.formattedValue;\n          if (!isNullOrUndef(value)) {\n            label += value;\n          }\n          return label;\n        },\n        labelColor(tooltipItem) {\n          const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n          const options = meta.controller.getStyle(tooltipItem.dataIndex);\n          return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0,\n          };\n        },\n        labelTextColor() {\n          return this.options.bodyColor;\n        },\n        labelPointStyle(tooltipItem) {\n          const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n          const options = meta.controller.getStyle(tooltipItem.dataIndex);\n          return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation,\n          };\n        },\n        afterLabel: noop,\n        afterBody: noop,\n        beforeFooter: noop,\n        footer: noop,\n        afterFooter: noop\n      }\n    },\n    defaultRoutes: {\n      bodyFont: 'font',\n      footerFont: 'font',\n      titleFont: 'font'\n    },\n    descriptors: {\n      _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n      _indexable: false,\n      callbacks: {\n        _scriptable: false,\n        _indexable: false,\n      },\n      animation: {\n        _fallback: false\n      },\n      animations: {\n        _fallback: 'animation'\n      }\n    },\n    additionalOptionScopes: ['interaction']\n  };\n\n  var plugins = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Decimation: plugin_decimation,\n    Filler: plugin_filler,\n    Legend: plugin_legend,\n    Title: plugin_title,\n    Tooltip: plugin_tooltip\n  });\n\n  const addIfString = (labels, raw, index) => typeof raw === 'string'\n    ? labels.push(raw) - 1\n    : isNaN(raw) ? null : index;\n  function findOrAddLabel(labels, raw, index) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n      return addIfString(labels, raw, index);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n  }\n  const validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n  class CategoryScale extends Scale {\n    constructor(cfg) {\n      super(cfg);\n      this._startValue = undefined;\n      this._valueRange = 0;\n    }\n    parse(raw, index) {\n      if (isNullOrUndef(raw)) {\n        return null;\n      }\n      const labels = this.getLabels();\n      index = isFinite(index) && labels[index] === raw ? index\n        : findOrAddLabel(labels, raw, valueOrDefault(index, raw));\n      return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n      const me = this;\n      const { minDefined, maxDefined } = me.getUserBounds();\n      let { min, max } = me.getMinMax(true);\n      if (me.options.bounds === 'ticks') {\n        if (!minDefined) {\n          min = 0;\n        }\n        if (!maxDefined) {\n          max = me.getLabels().length - 1;\n        }\n      }\n      me.min = min;\n      me.max = max;\n    }\n    buildTicks() {\n      const me = this;\n      const min = me.min;\n      const max = me.max;\n      const offset = me.options.offset;\n      const ticks = [];\n      let labels = me.getLabels();\n      labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n      me._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n      me._startValue = me.min - (offset ? 0.5 : 0);\n      for (let value = min; value <= max; value++) {\n        ticks.push({ value });\n      }\n      return ticks;\n    }\n    getLabelForValue(value) {\n      const me = this;\n      const labels = me.getLabels();\n      if (value >= 0 && value < labels.length) {\n        return labels[value];\n      }\n      return value;\n    }\n    configure() {\n      const me = this;\n      super.configure();\n      if (!me.isHorizontal()) {\n        me._reversePixels = !me._reversePixels;\n      }\n    }\n    getPixelForValue(value) {\n      const me = this;\n      if (typeof value !== 'number') {\n        value = me.parse(value);\n      }\n      return value === null ? NaN : me.getPixelForDecimal((value - me._startValue) / me._valueRange);\n    }\n    getPixelForTick(index) {\n      const me = this;\n      const ticks = me.ticks;\n      if (index < 0 || index > ticks.length - 1) {\n        return null;\n      }\n      return me.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n      const me = this;\n      return Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);\n    }\n    getBasePixel() {\n      return this.bottom;\n    }\n  }\n  CategoryScale.id = 'category';\n  CategoryScale.defaults = {\n    ticks: {\n      callback: CategoryScale.prototype.getLabelForValue\n    }\n  };\n\n  function generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin, max: rmax } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n      return [{ value: rmin }, { value: rmax }];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n      spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n      factor = Math.pow(10, precision);\n      spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n      niceMin = Math.floor(rmin / spacing) * spacing;\n      niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n      niceMin = rmin;\n      niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n      numSpaces = Math.min((max - min) / spacing, maxTicks);\n      spacing = (max - min) / numSpaces;\n      niceMin = min;\n      niceMax = max;\n    } else if (countDefined) {\n      niceMin = minDefined ? min : niceMin;\n      niceMax = maxDefined ? max : niceMax;\n      numSpaces = count - 1;\n      spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n      numSpaces = (niceMax - niceMin) / spacing;\n      if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n        numSpaces = Math.round(numSpaces);\n      } else {\n        numSpaces = Math.ceil(numSpaces);\n      }\n    }\n    const decimalPlaces = Math.max(\n      _decimalPlaces(spacing),\n      _decimalPlaces(niceMin),\n    );\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n      if (includeBounds && niceMin !== min) {\n        ticks.push({ value: min });\n        if (niceMin < min) {\n          j++;\n        }\n        if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n          j++;\n        }\n      } else if (niceMin < min) {\n        j++;\n      }\n    }\n    for (; j < numSpaces; ++j) {\n      ticks.push({ value: Math.round((niceMin + j * spacing) * factor) / factor });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n      if (almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n        ticks[ticks.length - 1].value = max;\n      } else {\n        ticks.push({ value: max });\n      }\n    } else if (!maxDefined || niceMax === max) {\n      ticks.push({ value: niceMax });\n    }\n    return ticks;\n  }\n  function relativeLabelSize(value, minSpacing, { horizontal, minRotation }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n  }\n  class LinearScaleBase extends Scale {\n    constructor(cfg) {\n      super(cfg);\n      this.start = undefined;\n      this.end = undefined;\n      this._startValue = undefined;\n      this._endValue = undefined;\n      this._valueRange = 0;\n    }\n    parse(raw, index) {\n      if (isNullOrUndef(raw)) {\n        return null;\n      }\n      if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n        return null;\n      }\n      return +raw;\n    }\n    handleTickRangeOptions() {\n      const me = this;\n      const { beginAtZero } = me.options;\n      const { minDefined, maxDefined } = me.getUserBounds();\n      let { min, max } = me;\n      const setMin = v => (min = minDefined ? min : v);\n      const setMax = v => (max = maxDefined ? max : v);\n      if (beginAtZero) {\n        const minSign = sign(min);\n        const maxSign = sign(max);\n        if (minSign < 0 && maxSign < 0) {\n          setMax(0);\n        } else if (minSign > 0 && maxSign > 0) {\n          setMin(0);\n        }\n      }\n      if (min === max) {\n        setMax(max + 1);\n        if (!beginAtZero) {\n          setMin(min - 1);\n        }\n      }\n      me.min = min;\n      me.max = max;\n    }\n    getTickLimit() {\n      const me = this;\n      const tickOpts = me.options.ticks;\n      let { maxTicksLimit, stepSize } = tickOpts;\n      let maxTicks;\n      if (stepSize) {\n        maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;\n      } else {\n        maxTicks = me.computeTickLimit();\n        maxTicksLimit = maxTicksLimit || 11;\n      }\n      if (maxTicksLimit) {\n        maxTicks = Math.min(maxTicksLimit, maxTicks);\n      }\n      return maxTicks;\n    }\n    computeTickLimit() {\n      return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n      const me = this;\n      const opts = me.options;\n      const tickOpts = opts.ticks;\n      let maxTicks = me.getTickLimit();\n      maxTicks = Math.max(2, maxTicks);\n      const numericGeneratorOptions = {\n        maxTicks,\n        bounds: opts.bounds,\n        min: opts.min,\n        max: opts.max,\n        precision: tickOpts.precision,\n        step: tickOpts.stepSize,\n        count: tickOpts.count,\n        maxDigits: me._maxDigits(),\n        horizontal: me.isHorizontal(),\n        minRotation: tickOpts.minRotation || 0,\n        includeBounds: tickOpts.includeBounds !== false\n      };\n      const dataRange = me._range || me;\n      const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n      if (opts.bounds === 'ticks') {\n        _setMinAndMaxByKey(ticks, me, 'value');\n      }\n      if (opts.reverse) {\n        ticks.reverse();\n        me.start = me.max;\n        me.end = me.min;\n      } else {\n        me.start = me.min;\n        me.end = me.max;\n      }\n      return ticks;\n    }\n    configure() {\n      const me = this;\n      const ticks = me.ticks;\n      let start = me.min;\n      let end = me.max;\n      super.configure();\n      if (me.options.offset && ticks.length) {\n        const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n        start -= offset;\n        end += offset;\n      }\n      me._startValue = start;\n      me._endValue = end;\n      me._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n      return formatNumber(value, this.chart.options.locale);\n    }\n  }\n\n  class LinearScale extends LinearScaleBase {\n    determineDataLimits() {\n      const me = this;\n      const { min, max } = me.getMinMax(true);\n      me.min = isNumberFinite(min) ? min : 0;\n      me.max = isNumberFinite(max) ? max : 1;\n      me.handleTickRangeOptions();\n    }\n    computeTickLimit() {\n      const me = this;\n      const horizontal = me.isHorizontal();\n      const length = horizontal ? me.width : me.height;\n      const minRotation = toRadians(me.options.ticks.minRotation);\n      const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n      const tickFont = me._resolveTickFontOptions(0);\n      return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n      return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n      return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n  }\n  LinearScale.id = 'linear';\n  LinearScale.defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n  function isMajor(tickVal) {\n    const remain = tickVal / (Math.pow(10, Math.floor(log10(tickVal))));\n    return remain === 1;\n  }\n  function generateTicks(generationOptions, dataRange) {\n    const endExp = Math.floor(log10(dataRange.max));\n    const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n    const ticks = [];\n    let tickVal = finiteOrDefault(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));\n    let exp = Math.floor(log10(tickVal));\n    let significand = Math.floor(tickVal / Math.pow(10, exp));\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    do {\n      ticks.push({ value: tickVal, major: isMajor(tickVal) });\n      ++significand;\n      if (significand === 10) {\n        significand = 1;\n        ++exp;\n        precision = exp >= 0 ? 1 : precision;\n      }\n      tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n    } while (exp < endExp || (exp === endExp && significand < endSignificand));\n    const lastTick = finiteOrDefault(generationOptions.max, tickVal);\n    ticks.push({ value: lastTick, major: isMajor(tickVal) });\n    return ticks;\n  }\n  class LogarithmicScale extends Scale {\n    constructor(cfg) {\n      super(cfg);\n      this.start = undefined;\n      this.end = undefined;\n      this._startValue = undefined;\n      this._valueRange = 0;\n    }\n    parse(raw, index) {\n      const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n      if (value === 0) {\n        this._zero = true;\n        return undefined;\n      }\n      return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n      const me = this;\n      const { min, max } = me.getMinMax(true);\n      me.min = isNumberFinite(min) ? Math.max(0, min) : null;\n      me.max = isNumberFinite(max) ? Math.max(0, max) : null;\n      if (me.options.beginAtZero) {\n        me._zero = true;\n      }\n      me.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n      const me = this;\n      const { minDefined, maxDefined } = me.getUserBounds();\n      let min = me.min;\n      let max = me.max;\n      const setMin = v => (min = minDefined ? min : v);\n      const setMax = v => (max = maxDefined ? max : v);\n      const exp = (v, m) => Math.pow(10, Math.floor(log10(v)) + m);\n      if (min === max) {\n        if (min <= 0) {\n          setMin(1);\n          setMax(10);\n        } else {\n          setMin(exp(min, -1));\n          setMax(exp(max, +1));\n        }\n      }\n      if (min <= 0) {\n        setMin(exp(max, -1));\n      }\n      if (max <= 0) {\n        setMax(exp(min, +1));\n      }\n      if (me._zero && me.min !== me._suggestedMin && min === exp(me.min, 0)) {\n        setMin(exp(min, -1));\n      }\n      me.min = min;\n      me.max = max;\n    }\n    buildTicks() {\n      const me = this;\n      const opts = me.options;\n      const generationOptions = {\n        min: me._userMin,\n        max: me._userMax\n      };\n      const ticks = generateTicks(generationOptions, me);\n      if (opts.bounds === 'ticks') {\n        _setMinAndMaxByKey(ticks, me, 'value');\n      }\n      if (opts.reverse) {\n        ticks.reverse();\n        me.start = me.max;\n        me.end = me.min;\n      } else {\n        me.start = me.min;\n        me.end = me.max;\n      }\n      return ticks;\n    }\n    getLabelForValue(value) {\n      return value === undefined ? '0' : formatNumber(value, this.chart.options.locale);\n    }\n    configure() {\n      const me = this;\n      const start = me.min;\n      super.configure();\n      me._startValue = log10(start);\n      me._valueRange = log10(me.max) - log10(start);\n    }\n    getPixelForValue(value) {\n      const me = this;\n      if (value === undefined || value === 0) {\n        value = me.min;\n      }\n      if (value === null || isNaN(value)) {\n        return NaN;\n      }\n      return me.getPixelForDecimal(value === me.min\n        ? 0\n        : (log10(value) - me._startValue) / me._valueRange);\n    }\n    getValueForPixel(pixel) {\n      const me = this;\n      const decimal = me.getDecimalForPixel(pixel);\n      return Math.pow(10, me._startValue + decimal * me._valueRange);\n    }\n  }\n  LogarithmicScale.id = 'logarithmic';\n  LogarithmicScale.defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n  function getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n      const padding = toPadding(tickOpts.backdropPadding);\n      return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n  }\n  function measureLabelSize(ctx, lineHeight, label) {\n    if (isArray(label)) {\n      return {\n        w: _longestText(ctx, ctx.font, label),\n        h: label.length * lineHeight\n      };\n    }\n    return {\n      w: ctx.measureText(label).width,\n      h: lineHeight\n    };\n  }\n  function determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n      return {\n        start: pos - (size / 2),\n        end: pos + (size / 2)\n      };\n    } else if (angle < min || angle > max) {\n      return {\n        start: pos - size,\n        end: pos\n      };\n    }\n    return {\n      start: pos,\n      end: pos + size\n    };\n  }\n  function fitWithPointLabels(scale) {\n    const furthestLimits = {\n      l: 0,\n      r: scale.width,\n      t: 0,\n      b: scale.height - scale.paddingTop\n    };\n    const furthestAngles = {};\n    let i, textSize, pointPosition;\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale.getLabels().length;\n    for (i = 0; i < valueCount; i++) {\n      const opts = scale.options.pointLabels.setContext(scale.getContext(i));\n      padding[i] = opts.padding;\n      pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i]);\n      const plFont = toFont(opts.font);\n      scale.ctx.font = plFont.string;\n      textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale._pointLabels[i]);\n      labelSizes[i] = textSize;\n      const angleRadians = scale.getIndexAngle(i);\n      const angle = toDegrees(angleRadians);\n      const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n      const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n      if (hLimits.start < furthestLimits.l) {\n        furthestLimits.l = hLimits.start;\n        furthestAngles.l = angleRadians;\n      }\n      if (hLimits.end > furthestLimits.r) {\n        furthestLimits.r = hLimits.end;\n        furthestAngles.r = angleRadians;\n      }\n      if (vLimits.start < furthestLimits.t) {\n        furthestLimits.t = vLimits.start;\n        furthestAngles.t = angleRadians;\n      }\n      if (vLimits.end > furthestLimits.b) {\n        furthestLimits.b = vLimits.end;\n        furthestAngles.b = angleRadians;\n      }\n    }\n    scale._setReductions(scale.drawingArea, furthestLimits, furthestAngles);\n    scale._pointLabelItems = [];\n    const opts = scale.options;\n    const tickBackdropHeight = getTickBackdropHeight(opts);\n    const outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);\n    for (i = 0; i < valueCount; i++) {\n      const extra = (i === 0 ? tickBackdropHeight / 2 : 0);\n      const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i]);\n      const angle = toDegrees(scale.getIndexAngle(i));\n      const size = labelSizes[i];\n      adjustPointPositionForLabelHeight(angle, size, pointLabelPosition);\n      const textAlign = getTextAlignForAngle(angle);\n      let left;\n      if (textAlign === 'left') {\n        left = pointLabelPosition.x;\n      } else if (textAlign === 'center') {\n        left = pointLabelPosition.x - (size.w / 2);\n      } else {\n        left = pointLabelPosition.x - size.w;\n      }\n      const right = left + size.w;\n      scale._pointLabelItems[i] = {\n        x: pointLabelPosition.x,\n        y: pointLabelPosition.y,\n        textAlign,\n        left,\n        top: pointLabelPosition.y,\n        right,\n        bottom: pointLabelPosition.y + size.h,\n      };\n    }\n  }\n  function getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n      return 'center';\n    } else if (angle < 180) {\n      return 'left';\n    }\n    return 'right';\n  }\n  function adjustPointPositionForLabelHeight(angle, textSize, position) {\n    if (angle === 90 || angle === 270) {\n      position.y -= (textSize.h / 2);\n    } else if (angle > 270 || angle < 90) {\n      position.y -= textSize.h;\n    }\n  }\n  function drawPointLabels(scale, labelCount) {\n    const { ctx, options: { pointLabels } } = scale;\n    for (let i = labelCount - 1; i >= 0; i--) {\n      const optsAtIndex = pointLabels.setContext(scale.getContext(i));\n      const plFont = toFont(optsAtIndex.font);\n      const { x, y, textAlign, left, top, right, bottom } = scale._pointLabelItems[i];\n      const { backdropColor } = optsAtIndex;\n      if (!isNullOrUndef(backdropColor)) {\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        ctx.fillRect(left - padding.left, top - padding.top, right - left + padding.width, bottom - top + padding.height);\n      }\n      renderText(\n        ctx,\n        scale._pointLabels[i],\n        x,\n        y + (plFont.lineHeight / 2),\n        plFont,\n        {\n          color: optsAtIndex.color,\n          textAlign: textAlign,\n          textBaseline: 'middle'\n        }\n      );\n    }\n  }\n  function pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx } = scale;\n    if (circular) {\n      ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n      let pointPosition = scale.getPointPosition(0, radius);\n      ctx.moveTo(pointPosition.x, pointPosition.y);\n      for (let i = 1; i < labelCount; i++) {\n        pointPosition = scale.getPointPosition(i, radius);\n        ctx.lineTo(pointPosition.x, pointPosition.y);\n      }\n    }\n  }\n  function drawRadiusLine(scale, gridLineOpts, radius, labelCount) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color, lineWidth } = gridLineOpts;\n    if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n      return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(gridLineOpts.borderDash);\n    ctx.lineDashOffset = gridLineOpts.borderDashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n  }\n  function numberOrZero(param) {\n    return isNumber(param) ? param : 0;\n  }\n  class RadialLinearScale extends LinearScaleBase {\n    constructor(cfg) {\n      super(cfg);\n      this.xCenter = undefined;\n      this.yCenter = undefined;\n      this.drawingArea = undefined;\n      this._pointLabels = [];\n      this._pointLabelItems = [];\n    }\n    setDimensions() {\n      const me = this;\n      me.width = me.maxWidth;\n      me.height = me.maxHeight;\n      me.paddingTop = getTickBackdropHeight(me.options) / 2;\n      me.xCenter = Math.floor(me.width / 2);\n      me.yCenter = Math.floor((me.height - me.paddingTop) / 2);\n      me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;\n    }\n    determineDataLimits() {\n      const me = this;\n      const { min, max } = me.getMinMax(false);\n      me.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n      me.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n      me.handleTickRangeOptions();\n    }\n    computeTickLimit() {\n      return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n      const me = this;\n      LinearScaleBase.prototype.generateTickLabels.call(me, ticks);\n      me._pointLabels = me.getLabels().map((value, index) => {\n        const label = callback(me.options.pointLabels.callback, [value, index], me);\n        return label || label === 0 ? label : '';\n      });\n    }\n    fit() {\n      const me = this;\n      const opts = me.options;\n      if (opts.display && opts.pointLabels.display) {\n        fitWithPointLabels(me);\n      } else {\n        me.setCenterPoint(0, 0, 0, 0);\n      }\n    }\n    _setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {\n      const me = this;\n      let radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n      let radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);\n      let radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n      let radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);\n      radiusReductionLeft = numberOrZero(radiusReductionLeft);\n      radiusReductionRight = numberOrZero(radiusReductionRight);\n      radiusReductionTop = numberOrZero(radiusReductionTop);\n      radiusReductionBottom = numberOrZero(radiusReductionBottom);\n      me.drawingArea = Math.max(largestPossibleRadius / 2, Math.min(\n        Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),\n        Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2)));\n      me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n      const me = this;\n      const maxRight = me.width - rightMovement - me.drawingArea;\n      const maxLeft = leftMovement + me.drawingArea;\n      const maxTop = topMovement + me.drawingArea;\n      const maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;\n      me.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);\n      me.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);\n    }\n    getIndexAngle(index) {\n      const angleMultiplier = TAU / this.getLabels().length;\n      const startAngle = this.options.startAngle || 0;\n      return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n      const me = this;\n      if (isNullOrUndef(value)) {\n        return NaN;\n      }\n      const scalingFactor = me.drawingArea / (me.max - me.min);\n      if (me.options.reverse) {\n        return (me.max - value) * scalingFactor;\n      }\n      return (value - me.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n      if (isNullOrUndef(distance)) {\n        return NaN;\n      }\n      const me = this;\n      const scaledDistance = distance / (me.drawingArea / (me.max - me.min));\n      return me.options.reverse ? me.max - scaledDistance : me.min + scaledDistance;\n    }\n    getPointPosition(index, distanceFromCenter) {\n      const me = this;\n      const angle = me.getIndexAngle(index) - HALF_PI;\n      return {\n        x: Math.cos(angle) * distanceFromCenter + me.xCenter,\n        y: Math.sin(angle) * distanceFromCenter + me.yCenter,\n        angle\n      };\n    }\n    getPointPositionForValue(index, value) {\n      return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n      return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n      const { left, top, right, bottom } = this._pointLabelItems[index];\n      return {\n        left,\n        top,\n        right,\n        bottom,\n      };\n    }\n    drawBackground() {\n      const me = this;\n      const { backgroundColor, grid: { circular } } = me.options;\n      if (backgroundColor) {\n        const ctx = me.ctx;\n        ctx.save();\n        ctx.beginPath();\n        pathRadiusLine(me, me.getDistanceFromCenterForValue(me._endValue), circular, me.getLabels().length);\n        ctx.closePath();\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n      }\n    }\n    drawGrid() {\n      const me = this;\n      const ctx = me.ctx;\n      const opts = me.options;\n      const { angleLines, grid } = opts;\n      const labelCount = me.getLabels().length;\n      let i, offset, position;\n      if (opts.pointLabels.display) {\n        drawPointLabels(me, labelCount);\n      }\n      if (grid.display) {\n        me.ticks.forEach((tick, index) => {\n          if (index !== 0) {\n            offset = me.getDistanceFromCenterForValue(tick.value);\n            const optsAtIndex = grid.setContext(me.getContext(index - 1));\n            drawRadiusLine(me, optsAtIndex, offset, labelCount);\n          }\n        });\n      }\n      if (angleLines.display) {\n        ctx.save();\n        for (i = me.getLabels().length - 1; i >= 0; i--) {\n          const optsAtIndex = angleLines.setContext(me.getContext(i));\n          const { color, lineWidth } = optsAtIndex;\n          if (!lineWidth || !color) {\n            continue;\n          }\n          ctx.lineWidth = lineWidth;\n          ctx.strokeStyle = color;\n          ctx.setLineDash(optsAtIndex.borderDash);\n          ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n          offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);\n          position = me.getPointPosition(i, offset);\n          ctx.beginPath();\n          ctx.moveTo(me.xCenter, me.yCenter);\n          ctx.lineTo(position.x, position.y);\n          ctx.stroke();\n        }\n        ctx.restore();\n      }\n    }\n    drawBorder() { }\n    drawLabels() {\n      const me = this;\n      const ctx = me.ctx;\n      const opts = me.options;\n      const tickOpts = opts.ticks;\n      if (!tickOpts.display) {\n        return;\n      }\n      const startAngle = me.getIndexAngle(0);\n      let offset, width;\n      ctx.save();\n      ctx.translate(me.xCenter, me.yCenter);\n      ctx.rotate(startAngle);\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      me.ticks.forEach((tick, index) => {\n        if (index === 0 && !opts.reverse) {\n          return;\n        }\n        const optsAtIndex = tickOpts.setContext(me.getContext(index));\n        const tickFont = toFont(optsAtIndex.font);\n        offset = me.getDistanceFromCenterForValue(me.ticks[index].value);\n        if (optsAtIndex.showLabelBackdrop) {\n          width = ctx.measureText(tick.label).width;\n          ctx.fillStyle = optsAtIndex.backdropColor;\n          const padding = toPadding(optsAtIndex.backdropPadding);\n          ctx.fillRect(\n            -width / 2 - padding.left,\n            -offset - tickFont.size / 2 - padding.top,\n            width + padding.width,\n            tickFont.size + padding.height\n          );\n        }\n        renderText(ctx, tick.label, 0, -offset, tickFont, {\n          color: optsAtIndex.color,\n        });\n      });\n      ctx.restore();\n    }\n    drawTitle() { }\n  }\n  RadialLinearScale.id = 'radialLinear';\n  RadialLinearScale.defaults = {\n    display: true,\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    grid: {\n      circular: false\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: true,\n      callback: Ticks.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: undefined,\n      backdropPadding: 2,\n      display: true,\n      font: {\n        size: 10\n      },\n      callback(label) {\n        return label;\n      },\n      padding: 5\n    }\n  };\n  RadialLinearScale.defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n  RadialLinearScale.descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  const INTERVALS = {\n    millisecond: { common: true, size: 1, steps: 1000 },\n    second: { common: true, size: 1000, steps: 60 },\n    minute: { common: true, size: 60000, steps: 60 },\n    hour: { common: true, size: 3600000, steps: 24 },\n    day: { common: true, size: 86400000, steps: 30 },\n    week: { common: false, size: 604800000, steps: 4 },\n    month: { common: true, size: 2.628e9, steps: 12 },\n    quarter: { common: false, size: 7.884e9, steps: 4 },\n    year: { common: true, size: 3.154e10 }\n  };\n  const UNITS = (Object.keys(INTERVALS));\n  function sorter(a, b) {\n    return a - b;\n  }\n  function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n      return null;\n    }\n    const adapter = scale._adapter;\n    const { parser, round, isoWeekday } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n      value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n      value = typeof parser === 'string'\n        ? adapter.parse(value, parser)\n        : adapter.parse(value);\n    }\n    if (value === null) {\n      return null;\n    }\n    if (round) {\n      value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n        ? adapter.startOf(value, 'isoWeek', isoWeekday)\n        : adapter.startOf(value, round);\n    }\n    return +value;\n  }\n  function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n      const interval = INTERVALS[UNITS[i]];\n      const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n      if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n        return UNITS[i];\n      }\n    }\n    return UNITS[ilen - 1];\n  }\n  function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n      const unit = UNITS[i];\n      if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n        return unit;\n      }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n  }\n  function determineMajorUnit(unit) {\n    for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n      if (INTERVALS[UNITS[i]].common) {\n        return UNITS[i];\n      }\n    }\n  }\n  function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n      ticks[time] = true;\n    } else if (timestamps.length) {\n      const { lo, hi } = _lookup(timestamps, time);\n      const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n      ticks[timestamp] = true;\n    }\n  }\n  function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n      index = map[major];\n      if (index >= 0) {\n        ticks[index].major = true;\n      }\n    }\n    return ticks;\n  }\n  function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n    const map = {};\n    const ilen = values.length;\n    let i, value;\n    for (i = 0; i < ilen; ++i) {\n      value = values[i];\n      map[value] = i;\n      ticks.push({\n        value,\n        major: false\n      });\n    }\n    return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n  }\n  class TimeScale extends Scale {\n    constructor(props) {\n      super(props);\n      this._cache = {\n        data: [],\n        labels: [],\n        all: []\n      };\n      this._unit = 'day';\n      this._majorUnit = undefined;\n      this._offsets = {};\n      this._normalized = false;\n      this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts) {\n      const time = scaleOpts.time || (scaleOpts.time = {});\n      const adapter = this._adapter = new _adapters._date(scaleOpts.adapters.date);\n      mergeIf(time.displayFormats, adapter.formats());\n      this._parseOpts = {\n        parser: time.parser,\n        round: time.round,\n        isoWeekday: time.isoWeekday\n      };\n      super.init(scaleOpts);\n      this._normalized = opts.normalized;\n    }\n    parse(raw, index) {\n      if (raw === undefined) {\n        return null;\n      }\n      return parse(this, raw);\n    }\n    beforeLayout() {\n      super.beforeLayout();\n      this._cache = {\n        data: [],\n        labels: [],\n        all: []\n      };\n    }\n    determineDataLimits() {\n      const me = this;\n      const options = me.options;\n      const adapter = me._adapter;\n      const unit = options.time.unit || 'day';\n      let { min, max, minDefined, maxDefined } = me.getUserBounds();\n      function _applyBounds(bounds) {\n        if (!minDefined && !isNaN(bounds.min)) {\n          min = Math.min(min, bounds.min);\n        }\n        if (!maxDefined && !isNaN(bounds.max)) {\n          max = Math.max(max, bounds.max);\n        }\n      }\n      if (!minDefined || !maxDefined) {\n        _applyBounds(me._getLabelBounds());\n        if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n          _applyBounds(me.getMinMax(false));\n        }\n      }\n      min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n      max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n      me.min = Math.min(min, max - 1);\n      me.max = Math.max(min + 1, max);\n    }\n    _getLabelBounds() {\n      const arr = this.getLabelTimestamps();\n      let min = Number.POSITIVE_INFINITY;\n      let max = Number.NEGATIVE_INFINITY;\n      if (arr.length) {\n        min = arr[0];\n        max = arr[arr.length - 1];\n      }\n      return { min, max };\n    }\n    buildTicks() {\n      const me = this;\n      const options = me.options;\n      const timeOpts = options.time;\n      const tickOpts = options.ticks;\n      const timestamps = tickOpts.source === 'labels' ? me.getLabelTimestamps() : me._generate();\n      if (options.bounds === 'ticks' && timestamps.length) {\n        me.min = me._userMin || timestamps[0];\n        me.max = me._userMax || timestamps[timestamps.length - 1];\n      }\n      const min = me.min;\n      const max = me.max;\n      const ticks = _filterBetween(timestamps, min, max);\n      me._unit = timeOpts.unit || (tickOpts.autoSkip\n        ? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, me._getLabelCapacity(min))\n        : determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));\n      me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined\n        : determineMajorUnit(me._unit);\n      me.initOffsets(timestamps);\n      if (options.reverse) {\n        ticks.reverse();\n      }\n      return ticksFromTimestamps(me, ticks, me._majorUnit);\n    }\n    initOffsets(timestamps) {\n      const me = this;\n      let start = 0;\n      let end = 0;\n      let first, last;\n      if (me.options.offset && timestamps.length) {\n        first = me.getDecimalForValue(timestamps[0]);\n        if (timestamps.length === 1) {\n          start = 1 - first;\n        } else {\n          start = (me.getDecimalForValue(timestamps[1]) - first) / 2;\n        }\n        last = me.getDecimalForValue(timestamps[timestamps.length - 1]);\n        if (timestamps.length === 1) {\n          end = last;\n        } else {\n          end = (last - me.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n        }\n      }\n      const limit = timestamps.length < 3 ? 0.5 : 0.25;\n      start = _limitValue(start, 0, limit);\n      end = _limitValue(end, 0, limit);\n      me._offsets = { start, end, factor: 1 / (start + 1 + end) };\n    }\n    _generate() {\n      const me = this;\n      const adapter = me._adapter;\n      const min = me.min;\n      const max = me.max;\n      const options = me.options;\n      const timeOpts = options.time;\n      const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, me._getLabelCapacity(min));\n      const stepSize = valueOrDefault(timeOpts.stepSize, 1);\n      const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n      const hasWeekday = isNumber(weekday) || weekday === true;\n      const ticks = {};\n      let first = min;\n      let time, count;\n      if (hasWeekday) {\n        first = +adapter.startOf(first, 'isoWeek', weekday);\n      }\n      first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n      if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n        throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n      }\n      const timestamps = options.ticks.source === 'data' && me.getDataTimestamps();\n      for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n        addTick(ticks, time, timestamps);\n      }\n      if (time === max || options.bounds === 'ticks' || count === 1) {\n        addTick(ticks, time, timestamps);\n      }\n      return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n    }\n    getLabelForValue(value) {\n      const me = this;\n      const adapter = me._adapter;\n      const timeOpts = me.options.time;\n      if (timeOpts.tooltipFormat) {\n        return adapter.format(value, timeOpts.tooltipFormat);\n      }\n      return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n    _tickFormatFunction(time, index, ticks, format) {\n      const me = this;\n      const options = me.options;\n      const formats = options.time.displayFormats;\n      const unit = me._unit;\n      const majorUnit = me._majorUnit;\n      const minorFormat = unit && formats[unit];\n      const majorFormat = majorUnit && formats[majorUnit];\n      const tick = ticks[index];\n      const major = majorUnit && majorFormat && tick && tick.major;\n      const label = me._adapter.format(time, format || (major ? majorFormat : minorFormat));\n      const formatter = options.ticks.callback;\n      return formatter ? callback(formatter, [label, index, ticks], me) : label;\n    }\n    generateTickLabels(ticks) {\n      let i, ilen, tick;\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        tick = ticks[i];\n        tick.label = this._tickFormatFunction(tick.value, i, ticks);\n      }\n    }\n    getDecimalForValue(value) {\n      const me = this;\n      return value === null ? NaN : (value - me.min) / (me.max - me.min);\n    }\n    getPixelForValue(value) {\n      const me = this;\n      const offsets = me._offsets;\n      const pos = me.getDecimalForValue(value);\n      return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n    getValueForPixel(pixel) {\n      const me = this;\n      const offsets = me._offsets;\n      const pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n      return me.min + pos * (me.max - me.min);\n    }\n    _getLabelSize(label) {\n      const me = this;\n      const ticksOpts = me.options.ticks;\n      const tickLabelWidth = me.ctx.measureText(label).width;\n      const angle = toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n      const cosRotation = Math.cos(angle);\n      const sinRotation = Math.sin(angle);\n      const tickFontSize = me._resolveTickFontOptions(0).size;\n      return {\n        w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n        h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n      };\n    }\n    _getLabelCapacity(exampleTime) {\n      const me = this;\n      const timeOpts = me.options.time;\n      const displayFormats = timeOpts.displayFormats;\n      const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n      const exampleLabel = me._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);\n      const size = me._getLabelSize(exampleLabel);\n      const capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h) - 1;\n      return capacity > 0 ? capacity : 1;\n    }\n    getDataTimestamps() {\n      const me = this;\n      let timestamps = me._cache.data || [];\n      let i, ilen;\n      if (timestamps.length) {\n        return timestamps;\n      }\n      const metas = me.getMatchingVisibleMetas();\n      if (me._normalized && metas.length) {\n        return (me._cache.data = metas[0].controller.getAllParsedValues(me));\n      }\n      for (i = 0, ilen = metas.length; i < ilen; ++i) {\n        timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(me));\n      }\n      return (me._cache.data = me.normalize(timestamps));\n    }\n    getLabelTimestamps() {\n      const me = this;\n      const timestamps = me._cache.labels || [];\n      let i, ilen;\n      if (timestamps.length) {\n        return timestamps;\n      }\n      const labels = me.getLabels();\n      for (i = 0, ilen = labels.length; i < ilen; ++i) {\n        timestamps.push(parse(me, labels[i]));\n      }\n      return (me._cache.labels = me._normalized ? timestamps : me.normalize(timestamps));\n    }\n    normalize(values) {\n      return _arrayUnique(values.sort(sorter));\n    }\n  }\n  TimeScale.id = 'time';\n  TimeScale.defaults = {\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      unit: false,\n      round: false,\n      isoWeekday: false,\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      source: 'auto',\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  function interpolate(table, val, reverse) {\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n      prevSource = Math.floor(val);\n      nextSource = Math.ceil(val);\n      prevTarget = table[prevSource];\n      nextTarget = table[nextSource];\n    } else {\n      const result = _lookup(table, val);\n      prevTarget = result.lo;\n      nextTarget = result.hi;\n      prevSource = table[prevTarget];\n      nextSource = table[nextTarget];\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n  }\n  class TimeSeriesScale extends TimeScale {\n    constructor(props) {\n      super(props);\n      this._table = [];\n      this._maxIndex = undefined;\n    }\n    initOffsets() {\n      const me = this;\n      const timestamps = me._getTimestampsForTable();\n      me._table = me.buildLookupTable(timestamps);\n      me._maxIndex = me._table.length - 1;\n      super.initOffsets(timestamps);\n    }\n    buildLookupTable(timestamps) {\n      const me = this;\n      const { min, max } = me;\n      if (!timestamps.length) {\n        return [\n          { time: min, pos: 0 },\n          { time: max, pos: 1 }\n        ];\n      }\n      const items = [min];\n      let i, ilen, curr;\n      for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n        curr = timestamps[i];\n        if (curr > min && curr < max) {\n          items.push(curr);\n        }\n      }\n      items.push(max);\n      return items;\n    }\n    _getTimestampsForTable() {\n      const me = this;\n      let timestamps = me._cache.all || [];\n      if (timestamps.length) {\n        return timestamps;\n      }\n      const data = me.getDataTimestamps();\n      const label = me.getLabelTimestamps();\n      if (data.length && label.length) {\n        timestamps = me.normalize(data.concat(label));\n      } else {\n        timestamps = data.length ? data : label;\n      }\n      timestamps = me._cache.all = timestamps;\n      return timestamps;\n    }\n    getPixelForValue(value, index) {\n      const me = this;\n      const offsets = me._offsets;\n      const pos = me._normalized && me._maxIndex > 0 && !isNullOrUndef(index)\n        ? index / me._maxIndex : me.getDecimalForValue(value);\n      return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n    getDecimalForValue(value) {\n      return interpolate(this._table, value) / this._maxIndex;\n    }\n    getValueForPixel(pixel) {\n      const me = this;\n      const offsets = me._offsets;\n      const decimal = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n      return interpolate(me._table, decimal * this._maxIndex, true);\n    }\n  }\n  TimeSeriesScale.id = 'timeseries';\n  TimeSeriesScale.defaults = TimeScale.defaults;\n\n  var scales = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    CategoryScale: CategoryScale,\n    LinearScale: LinearScale,\n    LogarithmicScale: LogarithmicScale,\n    RadialLinearScale: RadialLinearScale,\n    TimeScale: TimeScale,\n    TimeSeriesScale: TimeSeriesScale\n  });\n\n  Chart.register(controllers, scales, elements, plugins);\n  Chart.helpers = { ...helpers };\n  Chart._adapters = _adapters;\n  Chart.Animation = Animation;\n  Chart.Animations = Animations;\n  Chart.animator = animator;\n  Chart.controllers = registry.controllers.items;\n  Chart.DatasetController = DatasetController;\n  Chart.Element = Element;\n  Chart.elements = elements;\n  Chart.Interaction = Interaction;\n  Chart.layouts = layouts;\n  Chart.platforms = platforms;\n  Chart.Scale = Scale;\n  Chart.Ticks = Ticks;\n  Object.assign(Chart, controllers, scales, elements, plugins, platforms);\n  Chart.Chart = Chart;\n  if (typeof window !== 'undefined') {\n    window.Chart = Chart;\n  }\n\n  return Chart;\n\n})));\n"
	}
});